{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/event.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/sidechain.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/paramValidator/index.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/address.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/code.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/index.js","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"axios\"","webpack:///external \"bignumber.js\"","webpack:///external \"elliptic\"","webpack:///external \"ethers\"","webpack:///external \"eventemitter3\"","webpack:///external \"injectpromise\"","webpack:///external \"querystring\"","webpack:///external \"semver\"","webpack:///external \"source-map-support/register\"","webpack:///external \"validator\""],"names":["DEFAULT_VERSION","FEE_LIMIT","TronWeb","options","solidityNode","eventServer","sideOptions","privateKey","fullNode","headers","eventHeaders","fullHost","utils","isString","providers","HttpProvider","event","Event","transactionBuilder","TransactionBuilder","trx","Trx","plugin","Plugin","setFullNode","setSolidityNode","setEventServer","BigNumber","defaultBlock","defaultPrivateKey","defaultAddress","hex","base58","forEach","key","sidechain","SideChain","setPrivateKey","fullnodeVersion","feeLimit","injectPromise","injectpromise","setFullNodeHeader","setEventHeader","getNodeInfo","nodeInfo","configNodeInfo","codeVersion","split","length","blockID","includes","isInteger","Error","Math","abs","setAddress","address","fromPrivateKey","emit","isAddress","toHex","fromHex","version","semver","satisfies","provider","Object","values","some","knownProvider","isValidProvider","setStatusPage","getFullnodeVersion","setServer","host","currentProviders","params","sinceTimestamp","eventName","blockNumber","size","page","splice","isFunction","getEventsByContractAddress","getEventsByTransactionID","abi","Contract","callback","isConnected","isHex","crypto","getBase58CheckAddress","code","hexStr2byteArray","replace","ADDRESS_PREFIX","toLowerCase","byteArray2hexStr","decodeBase58Address","strict","pkToAddress","string","prefix","keccak256","Buffer","from","toString","substring","val","isBoolean","fromDecimal","isBigNumber","fromUtf8","JSON","stringify","test","isFinite","result","str","i","l","parseInt","substr","String","fromCharCode","padding","padEnd","value","toBigNumber","toNumber","number","isLessThan","sun","div","times","amount","err","isAddressValid","account","accounts","generateAccount","EventEmitter","tronWeb","eventListener","bytecode","deployed","lastBlock","methods","methodInstances","props","loadAbi","events","sort","a","b","block","latestEvent","newEvents","filter","index","resourceNode","duplicate","slice","priorEvent","clearInterval","eventCallback","_getEvents","setInterval","then","console","error","property","hasOwnProperty","__proto__","prop","func","type","method","Method","methodCall","onMethod","bind","name","functionSelector","signature","hasProperty","push","data","methodName","inputData","methodInstance","decodeInput","createSmartContract","transaction","sign","signedTransaction","sendRawTransaction","contract","message","toUtf8","sleep","at","contract_address","contractAddress","getContract","entrys","self","start","startCallback","_startEventListener","stop","_stopEventListener","getFunctionSelector","stateMutability","iface","ethersUtils","Interface","getEvent","format","FormatTypes","sighash","getFunction","decodeOutput","output","decodeParamsV2ByABI","inputs","outputs","sha3","defaultOptions","callValue","userFeePercentage","shouldPollResponse","rawParameter","args","encodeParamsV2ByABI","call","_call","send","_send","watch","_watch","types","_isConstant","parameters","map","triggerSmartContract","len","constant_result","msg","msg2","chunk","keys","ex","broadcast","txID","checkResult","getTransactionInfo","setTimeout","resMessage","rawResponse","decoded","contractResult","keepTxID","listener","since","Date","now","getEvents","filters","onlyUnconfirmed","onlyConfirmed","Promise","reject","bindListener","parseEvent","healthcheck","request","assign","fromTimestamp","previousLastEventFingerprint","previousFingerprint","fingerprint","routeParams","warn","qs","only_confirmed","only_unconfirmed","join","querystring","isArray","mapEvent","response","transactionID","pluginNoOverride","disablePlugins","pluginInterface","requires","components","libs","plugged","skipped","fullClass","className","constructor","classInstanceName","component","timeout","user","password","statusPage","isValidURL","isNaN","isObject","instance","axios","create","baseURL","auth","hasProperties","url","payload","mainchain","mainGatewayAddress","sideGatewayAddress","sideChainId","setMainGatewayAddress","setSideGatewayAddress","setChainId","validator","Validator","multiSign","chainId","priKeyBytes","chainIdByteArr","byteArr","concat","byteArrHash","sha256","ECKeySign","Array","permissionId","raw_data","Permission_id","getSignWeight","signWeight","foundKey","permission","approved_list","indexOf","signTransaction","useTronHeader","multisig","signatureHex","signString","parameter","owner_address","depositFee","depositTrx","notValid","gte","Number","contractInstance","depositTRX","tokenId","tokenValue","depositTrc10","depositTRC10","num","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","id","trxHash","mappingFee","mappingTrc","startsWith","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee","resultManager","to","sendTrx","names","gt","to_address","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","optional","frozen_balance","frozen_duration","isNotNullOrUndefined","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","invalid","entries","srAddress","voteCount","vote_address","vote_count","originEnergyLimit","token_id","parse","payable","lte","funcABIV2","parametersV2","constructorParams","find","it","abiCoder","AbiCoder","ADDRESS_PREFIX_REGEX","match","v","encode","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","call_token_value","_triggerSmartContract","confirmed","shieldedParameter","function_selector","ownerAddress","clearABI","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","extension","expiration","extendExpiration","addUpdateData","TRX_MESSAGE_HEADER","ETH_MESSAGE_HEADER","token","getCurrentBlock","getConfirmedCurrentBlock","getBlock","getBlockByHash","getBlockByNumber","blockHash","getBlockTransactionCount","transactions","getTransactionFromBlock","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","offset","getTransactionsToAddress","getTransactionsRelated","getTransactionsFromAddress","direction","all","tx","timestamp","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","getBandwidth","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getTokensIssuedByAddress","assetIssue","tokens","_parseToken","reduce","getTokenFromID","listNodes","nodes","port","end","getBlockRange","startNum","endNum","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","floor","verifyMessage","verifySignature","getApprovedList","signedTransactions","sendRawTransactions","signedHexTransaction","sendHexTransaction","hexTransaction","sendTransaction","getProposal","proposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","getExchangeByID","exchange","listExchanges","exchanges","listExchangesPaginated","info","getTokenListByName","t","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","toUtf8Bytes","messageDigest","recovered","recoverAddress","recoveryParam","r","s","tronAddress","base58Address","toHexString","signingKey","SigningKey","signDigest","param","Function","normalized","no","lt","se","notPositive","notEqual","_isArray","_array","_addressToHex","deepCopy","target","prototype","newTarget","_isBigNumber","decodeParams","ignoreMethodHash","decode","obj","arg","encodeParams","extractSize","extractArrayDim","funABI","buildFullTypeDefinition","typeDef","innerTypes","innerType","convertTypes","convertAddresses","addrArr","addrs","mapTuple","dimension","encodeArgs","input","convertTypeNames","decodeResult","buildFullTypeNameDefinition","outputTypes","Uint8Array","decodeRes","decodeResCopy","genPriKey","pubKeyBytes","getPubKeyFromPriKey","addressBytes","getAddressFromPriKey","publicKey","ADDRESS_SIZE","ADDRESS_PREFIX_BYTE","ALPHABET","ALPHABET_MAP","charAt","BASE","encode58","buffer","j","digits","carry","reverse","digit","decode58","bytes","c","Base64","_keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","charCodeAt","encodeIgnoreUtf8","inputBytes","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","_utf8_encode","n","c2","c3","byte2hexStr","byte","hexByteMap","bytesToString","arr","one","bytesLength","store","st","hextoString","out","tmp","base64DecodeFromString","string64","base64EncodeToString","bin2String","array","arrayEquals","array1","array2","stringToBytes","hexChar2byte","d","isHexChar","k","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","isNumber","getStringType","hash0","SHA256","hash1","checkSum","base58Sting","checkSum1","arrayToBase64String","btoa","signBytes","contents","hashBytes","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","raw","getRawData","serializeBinary","ec","EC","genKeyPair","priKey","getPrivate","priKeyHex","computeAddress","pubBytes","hash","addressHex","decode58Check","addressStr","decodeCheck","decodeData","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","addressBase64","keyFromPrivate","pubkey","getPublic","x","y","xHex","yHex","pubkeyHex","pubkeyBytes","rHex","sHex","idHex","signHex","msgBytes","msgHex","hashHex","passwordToAddress","com_priKeyBytes","com_addressBytes","toUtf8String","arrayify","isURL","protocols","require_tld","isJson","bool","properties","block_number","block_timestamp","event_name","transaction_id","resource_Node","_unconfirmed","unconfirmed","_fingerprint","padLeft","res","millis","resolve"],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,eAAe,GAAG,OAAxB;AAEA,IAAMC,SAAS,GAAG,SAAlB;;IAEqBC,O;;;;;AAWjB,qBAEwF;AAAA;;AAAA,QAF5EC,OAE4E,uEAFlE,KAEkE;AAAA,QAApFC,YAAoF,uEAArE,KAAqE;AAAA,QAA9DC,WAA8D,uEAAhD,KAAgD;AAAA,QAAzCC,WAAyC,uEAA3B,KAA2B;AAAA,QAApBC,UAAoB,uEAAP,KAAO;;AAAA;;AACpF;AAEA,QAAIC,QAAJ;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,QAAIC,YAAY,GAAG,KAAnB;;AAEA,QAAI,qEAAOP,OAAP,MAAmB,QAAnB,KAAgCA,OAAO,CAACK,QAAR,IAAoBL,OAAO,CAACQ,QAA5D,CAAJ,EAA2E;AACvEH,cAAQ,GAAGL,OAAO,CAACK,QAAR,IAAoBL,OAAO,CAACQ,QAAvC;AACAL,iBAAW,GAAGF,YAAd;AACAA,kBAAY,GAAGD,OAAO,CAACC,YAAR,IAAwBD,OAAO,CAACQ,QAA/C;AACAN,iBAAW,GAAGF,OAAO,CAACE,WAAR,IAAuBF,OAAO,CAACQ,QAA7C;AACAF,aAAO,GAAGN,OAAO,CAACM,OAAR,IAAmB,KAA7B;AACAC,kBAAY,GAAGP,OAAO,CAACO,YAAR,IAAwBD,OAAvC;AACAF,gBAAU,GAAGJ,OAAO,CAACI,UAArB;AACH,KARD,MAQO;AACHC,cAAQ,GAAGL,OAAX;AACH;;AACD,QAAIS,8CAAK,CAACC,QAAN,CAAeL,QAAf,CAAJ,EACIA,QAAQ,GAAG,IAAIM,sDAAS,CAACC,YAAd,CAA2BP,QAA3B,CAAX;AAEJ,QAAII,8CAAK,CAACC,QAAN,CAAeT,YAAf,CAAJ,EACIA,YAAY,GAAG,IAAIU,sDAAS,CAACC,YAAd,CAA2BX,YAA3B,CAAf;AAEJ,QAAIQ,8CAAK,CAACC,QAAN,CAAeR,WAAf,CAAJ,EACIA,WAAW,GAAG,IAAIS,sDAAS,CAACC,YAAd,CAA2BV,WAA3B,CAAd;AAEJ,UAAKW,KAAL,GAAa,IAAIC,kDAAJ,4FAAb;AACA,UAAKC,kBAAL,GAA0B,IAAIC,+DAAJ,4FAA1B;AACA,UAAKC,GAAL,GAAW,IAAIC,gDAAJ,4FAAX;AACA,UAAKC,MAAL,GAAc,IAAIC,mDAAJ,6FAAiBpB,OAAjB,CAAd;AACA,UAAKS,KAAL,GAAaA,8CAAb;;AAEA,UAAKY,WAAL,CAAiBhB,QAAjB;;AACA,UAAKiB,eAAL,CAAqBrB,YAArB;;AACA,UAAKsB,cAAL,CAAoBrB,WAApB;;AAEA,UAAKS,SAAL,GAAiBA,sDAAjB;AACA,UAAKa,SAAL,GAAiBA,oDAAjB;AAEA,UAAKC,YAAL,GAAoB,KAApB;AACA,UAAKC,iBAAL,GAAyB,KAAzB;AACA,UAAKC,cAAL,GAAsB;AAClBC,SAAG,EAAE,KADa;AAElBC,YAAM,EAAE;AAFU,KAAtB;AAKA,KACI,MADJ,EACY,OADZ,EACqB,QADrB,EAC+B,UAD/B,EAEI,SAFJ,EAEe,WAFf,EAE4B,WAF5B,EAEyC,aAFzC,EAGI,OAHJ,EAGa,SAHb,EAGwB,aAHxB,EAGuC,WAHvC,EAII,eAJJ,EAIqB,SAJrB,EAIgC,SAJhC,EAKEC,OALF,CAKU,UAAAC,GAAG,EAAI;AACb,YAAKA,GAAL,IAAYhC,OAAO,CAACgC,GAAD,CAAnB;AACH,KAPD,EA/CoF,CAuDpF;;AACA,QAAI,qEAAO5B,WAAP,MAAuB,QAAvB,KAAoCA,WAAW,CAACE,QAAZ,IAAwBF,WAAW,CAACK,QAAxE,CAAJ,EAAuF;AACnF,YAAKwB,SAAL,GAAiB,IAAIC,sDAAJ,CAAc9B,WAAd,EAA2BJ,OAA3B,8FAA0CK,UAA1C,CAAjB;AACH,KAFD,MAEO;AACHA,gBAAU,GAAGA,UAAU,IAAID,WAA3B;AACH;;AAED,QAAIC,UAAJ,EACI,MAAK8B,aAAL,CAAmB9B,UAAnB;AACJ,UAAK+B,eAAL,GAAuBtC,eAAvB;AACA,UAAKuC,QAAL,GAAgBtC,SAAhB;AACA,UAAKuC,aAAL,GAAqBC,qDAAa,CAAC,2FAAnC;;AAEA,QAAIhC,OAAJ,EAAa;AACT,YAAKiC,iBAAL,CAAuBjC,OAAvB;AACH;;AAED,QAAIC,YAAJ,EAAkB;AACd,YAAKiC,cAAL,CAAoBjC,YAApB;AACH;;AA1EmF;AA2EvF;;;;;qMAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE+B,KAAKU,GAAL,CAASwB,WAAT,EAF/B;;AAAA;AAEcC,wBAFd;AAGQ,qBAAKP,eAAL,GAAuBO,QAAQ,CAACC,cAAT,CAAwBC,WAA/C;;AACA,oBAAI,KAAKT,eAAL,CAAqBU,KAArB,CAA2B,GAA3B,EAAgCC,MAAhC,KAA2C,CAA/C,EAAkD;AAC9C,uBAAKX,eAAL,IAAwB,IAAxB;AACH;;AANT;AAAA;;AAAA;AAAA;AAAA;AAQQ,qBAAKA,eAAL,GAAuBtC,eAAvB;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAYA,2BAAiC;AAAA,UAAjBkD,OAAiB,uEAAP,KAAO;;AAC7B,UAAI,CAAC,KAAD,EAAQ,QAAR,EAAkB,UAAlB,EAA8B,CAA9B,EAAiCC,QAAjC,CAA0CD,OAA1C,CAAJ,EAAwD;AACpD,eAAO,KAAKtB,YAAL,GAAoBsB,OAA3B;AACH;;AAED,UAAI,CAACtC,8CAAK,CAACwC,SAAN,CAAgBF,OAAhB,CAAD,IAA6B,CAACA,OAAlC,EACI,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AAEJ,WAAKzB,YAAL,GAAoB0B,IAAI,CAACC,GAAL,CAASL,OAAT,CAApB;AACH;;;WAED,uBAAc3C,UAAd,EAA0B;AACtB,UAAI;AACA,aAAKiD,UAAL,CACI,KAAKC,OAAL,CAAaC,cAAb,CAA4BnD,UAA5B,CADJ;AAGH,OAJD,CAIE,gBAAM;AACJ,cAAM,IAAI8C,KAAJ,CAAU,8BAAV,CAAN;AACH;;AAED,WAAKxB,iBAAL,GAAyBtB,UAAzB;AACA,WAAKoD,IAAL,CAAU,mBAAV,EAA+BpD,UAA/B;AACH;;;WAED,oBAAWkD,OAAX,EAAoB;AAChB,UAAI,CAAC,KAAKG,SAAL,CAAeH,OAAf,CAAL,EACI,MAAM,IAAIJ,KAAJ,CAAU,0BAAV,CAAN;AAEJ,UAAMtB,GAAG,GAAG,KAAK0B,OAAL,CAAaI,KAAb,CAAmBJ,OAAnB,CAAZ;AACA,UAAMzB,MAAM,GAAG,KAAKyB,OAAL,CAAaK,OAAb,CAAqBL,OAArB,CAAf;AAEA,UAAI,KAAK5B,iBAAL,IAA0B,KAAK4B,OAAL,CAAaC,cAAb,CAA4B,KAAK7B,iBAAjC,MAAwDG,MAAtF,EACI,KAAKH,iBAAL,GAAyB,KAAzB;AAEJ,WAAKC,cAAL,GAAsB;AAClBC,WAAG,EAAHA,GADkB;AAElBC,cAAM,EAANA;AAFkB,OAAtB;AAKA,WAAK2B,IAAL,CAAU,gBAAV,EAA4B;AAAE5B,WAAG,EAAHA,GAAF;AAAOC,cAAM,EAANA;AAAP,OAA5B;AACH;;;WAED,2BAAkB+B,OAAlB,EAA2B;AACvB,aAAOC,8CAAM,CAACC,SAAP,CAAiB,KAAK3B,eAAtB,EAAuCyB,OAAvC,CAAP;AACH;;;WAED,yBAAgBG,QAAhB,EAA0B;AACtB,aAAOC,MAAM,CAACC,MAAP,CAActD,sDAAd,EAAyBuD,IAAzB,CAA8B,UAAAC,aAAa;AAAA,eAAIJ,QAAQ,YAAYI,aAAxB;AAAA,OAA3C,CAAP;AACH;;;WAED,qBAAY9D,QAAZ,EAAsB;AAClB,UAAII,8CAAK,CAACC,QAAN,CAAeL,QAAf,CAAJ,EACIA,QAAQ,GAAG,IAAIM,sDAAS,CAACC,YAAd,CAA2BP,QAA3B,CAAX;AAEJ,UAAI,CAAC,KAAK+D,eAAL,CAAqB/D,QAArB,CAAL,EACI,MAAM,IAAI6C,KAAJ,CAAU,4BAAV,CAAN;AAEJ,WAAK7C,QAAL,GAAgBA,QAAhB;AACA,WAAKA,QAAL,CAAcgE,aAAd,CAA4B,oBAA5B;AAEA,WAAKC,kBAAL;AACH;;;WAED,yBAAgBrE,YAAhB,EAA8B;AAC1B,UAAIQ,8CAAK,CAACC,QAAN,CAAeT,YAAf,CAAJ,EACIA,YAAY,GAAG,IAAIU,sDAAS,CAACC,YAAd,CAA2BX,YAA3B,CAAf;AAEJ,UAAI,CAAC,KAAKmE,eAAL,CAAqBnE,YAArB,CAAL,EACI,MAAM,IAAIiD,KAAJ,CAAU,gCAAV,CAAN;AAEJ,WAAKjD,YAAL,GAAoBA,YAApB;AACA,WAAKA,YAAL,CAAkBoE,aAAlB,CAAgC,4BAAhC;AACH;;;WAED,0BAA0B;AAAA;;AACtB,0BAAKxD,KAAL,EAAW0D,SAAX;AACH;;;WAED,qBAAyB;AAAA,UAAdjE,OAAc,uEAAJ,EAAI;AACrB,UAAMD,QAAQ,GAAG,IAAIM,sDAAS,CAACC,YAAd,CAA2B,KAAKP,QAAL,CAAcmE,IAAzC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,KAA7D,EAAoElE,OAApE,CAAjB;AACA,UAAML,YAAY,GAAG,IAAIU,sDAAS,CAACC,YAAd,CAA2B,KAAKX,YAAL,CAAkBuE,IAA7C,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,KAAjE,EAAwElE,OAAxE,CAArB;AACA,UAAMJ,WAAW,GAAG,IAAIS,sDAAS,CAACC,YAAd,CAA2B,KAAKV,WAAL,CAAiBsE,IAA5C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuElE,OAAvE,CAApB;AAEA,WAAKe,WAAL,CAAiBhB,QAAjB;AACA,WAAKiB,eAAL,CAAqBrB,YAArB;AACA,WAAKsB,cAAL,CAAoBrB,WAApB;AACH;;;WAED,6BAAiC;AAAA,UAAdI,OAAc,uEAAJ,EAAI;AAC7B,UAAMD,QAAQ,GAAG,IAAIM,sDAAS,CAACC,YAAd,CAA2B,KAAKP,QAAL,CAAcmE,IAAzC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,KAA7D,EAAoElE,OAApE,CAAjB;AACA,UAAML,YAAY,GAAG,IAAIU,sDAAS,CAACC,YAAd,CAA2B,KAAKX,YAAL,CAAkBuE,IAA7C,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,KAAjE,EAAwElE,OAAxE,CAArB;AAEA,WAAKe,WAAL,CAAiBhB,QAAjB;AACA,WAAKiB,eAAL,CAAqBrB,YAArB;AACH;;;WAED,0BAA8B;AAAA,UAAdK,OAAc,uEAAJ,EAAI;AAC1B,UAAMJ,WAAW,GAAG,IAAIS,sDAAS,CAACC,YAAd,CAA2B,KAAKV,WAAL,CAAiBsE,IAA5C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuElE,OAAvE,CAApB;AACA,WAAKiB,cAAL,CAAoBrB,WAApB;AACH;;;WAED,4BAAmB;AACf,aAAO;AACHG,gBAAQ,EAAE,KAAKA,QADZ;AAEHJ,oBAAY,EAAE,KAAKA,YAFhB;AAGHC,mBAAW,EAAE,KAAKA;AAHf,OAAP;AAKH;;;WAED,2BAAkB;AACd,aAAO,KAAKuE,gBAAL,EAAP;AACH;;;WAGD,0BAA0B;AAAA;;AAAA,wCAARC,MAAQ;AAARA,cAAQ;AAAA;;AAEtB,UAAI,qEAAOA,MAAM,CAAC,CAAD,CAAb,MAAqB,QAAzB,EAAmC;AAC/BA,cAAM,CAAC,CAAD,CAAN,GAAY;AACRC,wBAAc,EAAED,MAAM,CAAC,CAAD,CAAN,IAAa,CADrB;AAERE,mBAAS,EAAEF,MAAM,CAAC,CAAD,CAAN,IAAa,KAFhB;AAGRG,qBAAW,EAAEH,MAAM,CAAC,CAAD,CAAN,IAAa,KAHlB;AAIRI,cAAI,EAAEJ,MAAM,CAAC,CAAD,CAAN,IAAa,EAJX;AAKRK,cAAI,EAAEL,MAAM,CAAC,CAAD,CAAN,IAAa;AALX,SAAZ;AAOAA,cAAM,CAACM,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAR+B,CAU/B;;AACA,YAAI,CAACvE,8CAAK,CAACwE,UAAN,CAAiBP,MAAM,CAAC,CAAD,CAAvB,CAAL,EAAkC;AAE9B,cAAIjE,8CAAK,CAACwE,UAAN,CAAiBP,MAAM,CAAC,CAAD,CAAN,CAAUK,IAA3B,CAAJ,EAAsC;AAClCL,kBAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUK,IAAtB;AACAL,kBAAM,CAAC,CAAD,CAAN,CAAUK,IAAV,GAAiB,CAAjB;AACH,WAHD,MAGO,IAAItE,8CAAK,CAACwE,UAAN,CAAiBP,MAAM,CAAC,CAAD,CAAN,CAAUI,IAA3B,CAAJ,EAAsC;AACzCJ,kBAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAN,CAAUI,IAAtB;AACAJ,kBAAM,CAAC,CAAD,CAAN,CAAUI,IAAV,GAAiB,EAAjB;AACAJ,kBAAM,CAAC,CAAD,CAAN,CAAUK,IAAV,GAAiB,CAAjB;AACH;AACJ;AACJ;;AAED,aAAO,qBAAKlE,KAAL,EAAWqE,0BAAX,qBAAyCR,MAAzC,CAAP;AACH;;;WAED,mCAAmC;AAAA;;AAC/B,aAAO,qBAAK7D,KAAL,EAAWsE,wBAAX,+BAAP;AACH;;;WAED,oBAAoC;AAAA,UAA3BC,GAA2B,uEAArB,EAAqB;AAAA,UAAjB9B,OAAiB,uEAAP,KAAO;AAChC,aAAO,IAAI+B,qDAAJ,CAAa,IAAb,EAAmBD,GAAnB,EAAwB9B,OAAxB,CAAP;AACH;;;;8LAiKD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBgC,wBAAlB,8DAA6B,KAA7B;;AAAA,oBACSA,QADT;AAAA;AAAA;AAAA;;AAAA,kDAEe,KAAKjD,aAAL,CAAmB,KAAKkD,WAAxB,CAFf;;AAAA;AAAA,+BAIWD,QAJX;AAAA;AAAA,uBAKwB,KAAKjF,QAAL,CAAckF,WAAd,EALxB;;AAAA;AAAA;AAAA;AAAA,uBAM4B,KAAKtF,YAAL,CAAkBsF,WAAlB,EAN5B;;AAAA;AAAA;AAAA,+BAOqB,KAAKrF,WAP1B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAO+C,KAAKA,WAAL,CAAiBqF,WAAjB,EAP/C;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKQlF,0BALR;AAMQJ,8BANR;AAOQC,6BAPR;AAAA;AAAA,oEAIoB,IAJpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;SA/JA,eAAqB;AACjB,aAAO;AACHyD,eADG,mBACKL,OADL,EACc;AACb,cAAI,CAAC7C,8CAAK,CAAC+E,KAAN,CAAYlC,OAAZ,CAAL,EACI,OAAOA,OAAP;AAEJ,iBAAO7C,8CAAK,CAACgF,MAAN,CAAaC,qBAAb,CACHjF,8CAAK,CAACkF,IAAN,CAAWC,gBAAX,CAA4BtC,OAAO,CAACuC,OAAR,CAAgB,KAAhB,EAAuBC,6DAAvB,CAA5B,CADG,CAAP;AAGH,SARE;AASHpC,aATG,iBASGJ,OATH,EASY;AACX,cAAI7C,8CAAK,CAAC+E,KAAN,CAAYlC,OAAZ,CAAJ,EACI,OAAOA,OAAO,CAACyC,WAAR,GAAsBF,OAAtB,CAA8B,KAA9B,EAAqCC,6DAArC,CAAP;AAEJ,iBAAOrF,8CAAK,CAACkF,IAAN,CAAWK,gBAAX,CACHvF,8CAAK,CAACgF,MAAN,CAAaQ,mBAAb,CAAiC3C,OAAjC,CADG,EAELyC,WAFK,EAAP;AAGH,SAhBE;AAiBHxC,sBAjBG,0BAiBYnD,UAjBZ,EAiBwC;AAAA,cAAhB8F,MAAgB,uEAAP,KAAO;;AACvC,cAAI;AACA,mBAAOzF,8CAAK,CAACgF,MAAN,CAAaU,WAAb,CAAyB/F,UAAzB,EAAqC8F,MAArC,CAAP;AACH,WAFD,CAEE,iBAAM;AACJ,mBAAO,KAAP;AACH;AACJ;AAvBE,OAAP;AAyBH;;;WAED,cAAYE,MAAZ,EAAmC;AAAA,UAAfC,MAAe,uEAAN,IAAM;AAC/B,aAAO,CAACA,MAAM,GAAG,IAAH,GAAU,EAAjB,IAAuBC,oEAAS,CAACC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoB,OAApB,CAAD,CAAT,CAAwCK,QAAxC,GAAmDC,SAAnD,CAA6D,CAA7D,CAA9B;AACH;;;WAED,eAAaC,GAAb,EAAkB;AACd,UAAIlG,8CAAK,CAACmG,SAAN,CAAgBD,GAAhB,CAAJ,EACI,OAAO5G,OAAO,CAAC8G,WAAR,CAAoB,CAACF,GAArB,CAAP;AAEJ,UAAIlG,8CAAK,CAACqG,WAAN,CAAkBH,GAAlB,CAAJ,EACI,OAAO5G,OAAO,CAAC8G,WAAR,CAAoBF,GAApB,CAAP;AAEJ,UAAI,qEAAOA,GAAP,MAAe,QAAnB,EACI,OAAO5G,OAAO,CAACgH,QAAR,CAAiBC,IAAI,CAACC,SAAL,CAAeN,GAAf,CAAjB,CAAP;;AAEJ,UAAIlG,8CAAK,CAACC,QAAN,CAAeiG,GAAf,CAAJ,EAAyB;AACrB,YAAI,UAAUO,IAAV,CAAeP,GAAf,CAAJ,EACI,OAAOA,GAAP;AAEJ,YAAK,CAACQ,QAAQ,CAACR,GAAD,CAAV,IAAoB,QAAQO,IAAR,CAAaP,GAAb,CAAxB,EACI,OAAO5G,OAAO,CAACgH,QAAR,CAAiBJ,GAAjB,CAAP;AACP;;AAED,UAAIS,MAAM,GAAGrH,OAAO,CAAC8G,WAAR,CAAoBF,GAApB,CAAb;;AACA,UAAIS,MAAM,KAAK,OAAf,EAAwB;AACpB,cAAM,IAAIlE,KAAJ,CAAU,qDAAV,CAAN;AACH,OAFD,MAEO;AACH,eAAOkE,MAAP;AACH;AACJ;;;WAED,gBAAcxF,GAAd,EAAmB;AACf,UAAInB,8CAAK,CAAC+E,KAAN,CAAY5D,GAAZ,CAAJ,EAAsB;AAClBA,WAAG,GAAGA,GAAG,CAACiE,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN;AACA,eAAOU,MAAM,CAACC,IAAP,CAAY5E,GAAZ,EAAiB,KAAjB,EAAwB6E,QAAxB,CAAiC,MAAjC,CAAP;AACH,OAHD,MAGO;AACH,cAAM,IAAIvD,KAAJ,CAAU,4CAAV,CAAN;AACH;AACJ;;;WAED,kBAAgBkD,MAAhB,EAAwB;AACpB,UAAI,CAAC3F,8CAAK,CAACC,QAAN,CAAe0F,MAAf,CAAL,EAA6B;AACzB,cAAM,IAAIlD,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,aAAO,OAAOqD,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoB,MAApB,EAA4BK,QAA5B,CAAqC,KAArC,CAAd;AACH;;;WAED,iBAAe7E,GAAf,EAAoB;AAChB,UAAInB,8CAAK,CAAC+E,KAAN,CAAY5D,GAAZ,CAAJ,EAAsB;AAClB,YAAIyF,GAAG,GAAG,EAAV;AACA,YAAIC,CAAC,GAAG,CAAR;AAAA,YAAWC,CAAC,GAAG3F,GAAG,CAACkB,MAAnB;;AACA,YAAIlB,GAAG,CAAC8E,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA5B,EAAkC;AAC9BY,WAAC,GAAG,CAAJ;AACH;;AACD,eAAOA,CAAC,GAAGC,CAAX,EAAcD,CAAC,IAAI,CAAnB,EAAsB;AAClB,cAAI3B,IAAI,GAAG6B,QAAQ,CAAC5F,GAAG,CAAC6F,MAAJ,CAAWH,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAnB;AACAD,aAAG,IAAIK,MAAM,CAACC,YAAP,CAAoBhC,IAApB,CAAP;AACH;;AACD,eAAO0B,GAAP;AACH,OAXD,MAWO;AACH,cAAM,IAAInE,KAAJ,CAAU,4CAAV,CAAN;AACH;AACJ;;;WAED,mBAAiBkD,MAAjB,EAAyBwB,OAAzB,EAAkC;AAC9B,UAAI,CAACnH,8CAAK,CAACC,QAAN,CAAe0F,MAAf,CAAL,EAA6B;AACzB,cAAM,IAAIlD,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,aAAO,OAAOqD,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoB,OAApB,EAA6BK,QAA7B,CAAsC,KAAtC,EAA6CoB,MAA7C,CAAoDD,OAApD,EAA6D,GAA7D,CAAd;AACH;;;WAGD,mBAAiBE,KAAjB,EAAwB;AACpB,aAAO/H,OAAO,CAACgI,WAAR,CAAoBD,KAApB,EAA2BE,QAA3B,EAAP;AACH;;;WAED,qBAAmBF,KAAnB,EAA0B;AACtB,UAAMG,MAAM,GAAGlI,OAAO,CAACgI,WAAR,CAAoBD,KAApB,CAAf;AACA,UAAMV,MAAM,GAAGa,MAAM,CAACxB,QAAP,CAAgB,EAAhB,CAAf;AAEA,aAAOwB,MAAM,CAACC,UAAP,CAAkB,CAAlB,IAAuB,QAAQd,MAAM,CAACK,MAAP,CAAc,CAAd,CAA/B,GAAkD,OAAOL,MAAhE;AACH;;;WAED,iBAAee,GAAf,EAAoB;AAChB,UAAMlH,GAAG,GAAGlB,OAAO,CAACgI,WAAR,CAAoBI,GAApB,EAAyBC,GAAzB,CAA6B,OAA7B,CAAZ;AACA,aAAO3H,8CAAK,CAACqG,WAAN,CAAkBqB,GAAlB,IAAyBlH,GAAzB,GAA+BA,GAAG,CAACwF,QAAJ,CAAa,EAAb,CAAtC;AACH;;;WAED,eAAaxF,GAAb,EAAkB;AACd,UAAMkH,GAAG,GAAGpI,OAAO,CAACgI,WAAR,CAAoB9G,GAApB,EAAyBoH,KAAzB,CAA+B,OAA/B,CAAZ;AACA,aAAO5H,8CAAK,CAACqG,WAAN,CAAkB7F,GAAlB,IAAyBkH,GAAzB,GAA+BA,GAAG,CAAC1B,QAAJ,CAAa,EAAb,CAAtC;AACH;;;WAED,uBAA+B;AAAA,UAAZ6B,MAAY,uEAAH,CAAG;AAC3B,UAAI7H,8CAAK,CAACqG,WAAN,CAAkBwB,MAAlB,CAAJ,EACI,OAAOA,MAAP;AAEJ,UAAI7H,8CAAK,CAACC,QAAN,CAAe4H,MAAf,KAA0B,UAAUpB,IAAV,CAAeoB,MAAf,CAA9B,EACI,OAAO,IAAI9G,oDAAJ,CAAc8G,MAAM,CAACzC,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAd,EAAwC,EAAxC,CAAP;AAEJ,aAAO,IAAIrE,oDAAJ,CAAc8G,MAAM,CAAC7B,QAAP,CAAgB,EAAhB,CAAd,EAAmC,EAAnC,CAAP;AACH;;;WAED,qBAAkC;AAAA,UAAjBnD,OAAiB,uEAAP,KAAO;AAC9B,UAAI,CAAC7C,8CAAK,CAACC,QAAN,CAAe4C,OAAf,CAAL,EACI,OAAO,KAAP,CAF0B,CAI9B;;AACA,UAAIA,OAAO,CAACR,MAAR,KAAmB,EAAvB,EAA2B;AACvB,YAAI;AACA,iBAAO/C,OAAO,CAAC0D,SAAR,CACHhD,8CAAK,CAACgF,MAAN,CAAaC,qBAAb,CACIjF,8CAAK,CAACkF,IAAN,CAAWC,gBAAX,CAA4BtC,OAA5B,CADJ,CACyC;AADzC,WADG,CAAP;AAKH,SAND,CAME,OAAOiF,GAAP,EAAY;AACV,iBAAO,KAAP;AACH;AACJ;;AACD,UAAI;AACA,eAAO9H,8CAAK,CAACgF,MAAN,CAAa+C,cAAb,CAA4BlF,OAA5B,CAAP;AACH,OAFD,CAEE,OAAOiF,GAAP,EAAY;AACV,eAAO,KAAP;AACH;AACJ;;;;gMAED;AAAA;AAAA;AAAA;AAAA;AAAA;AACUE,uBADV,GACoBhI,8CAAK,CAACiI,QAAN,CAAeC,eAAf,EADpB;AAAA,kDAGWF,OAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EAtZiCG,qD;;6EAAhB7I,O,eACEY,sD;;6EADFZ,O,eAEEyB,oD;;6EAFFzB,O,wBAGWiB,+D;;6EAHXjB,O,SAIJmB,gD;;6EAJInB,O,cAKCsF,qD;;6EALDtF,O,YAMDqB,mD;;6EANCrB,O,WAOFe,kD;;6EAPEf,O,aAQA6D,sD;;6EARA7D,O,WASFU,8C;;;AA6ZlB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3bD;AACA;AACA;AACA;;IAEqB4E,Q;AACjB,sBAAwD;AAAA,QAA5CwD,OAA4C,uEAAlC,KAAkC;AAAA,QAA3BzD,GAA2B,uEAArB,EAAqB;AAAA,QAAjB9B,OAAiB,uEAAP,KAAO;;AAAA;;AACpD,QAAI,CAACuF,OAAD,IAAY,CAACA,OAAD,YAAoB9I,6CAApC,EACI,MAAM,IAAImD,KAAJ,CAAU,8BAAV,CAAN;AAEJ,SAAK2F,OAAL,GAAeA,OAAf;AACA,SAAKxG,aAAL,GAAqBC,oDAAa,CAAC,IAAD,CAAlC;AAEA,SAAKgB,OAAL,GAAeA,OAAf;AACA,SAAK8B,GAAL,GAAWA,GAAX;AAEA,SAAK0D,aAAL,GAAqB,KAArB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAEA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,KAAL,GAAa,EAAb;AAEA,QAAI,KAAKP,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CAAJ,EACI,KAAK0F,QAAL,GAAgB,IAAhB,CADJ,KAEK,KAAK1F,OAAL,GAAe,KAAf;AAEL,SAAK+F,OAAL,CAAajE,GAAb;AACH;;;;;4LAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBpF,uBAAjB,2DAA2B,EAA3B;AAAA;AAAA,uBACyB,KAAK6I,OAAL,CAAahI,KAAb,CAAmBqE,0BAAnB,CAA8C,KAAK5B,OAAnD,EAA4DtD,OAA5D,CADzB;;AAAA;AACUsJ,sBADV;AAAA,+BAE0BA,MAAM,CAACC,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBAAUA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAtB;AAAA,iBAAZ,CAF1B,gHAEWC,WAFX;AAGUC,yBAHV,GAGsBN,MAAM,CAACO,MAAP,CAAc,UAAChJ,KAAD,EAAQiJ,KAAR,EAAkB;AAE9C,sBAAI9J,OAAO,CAAC+J,YAAR,IAAwBlJ,KAAK,CAACkJ,YAA9B,IACA/J,OAAO,CAAC+J,YAAR,CAAqBhE,WAArB,OAAuClF,KAAK,CAACkJ,YAAN,CAAmBhE,WAAnB,EAD3C,EAC6E;AACzE,2BAAO,KAAP;AACH;;AAED,sBAAMiE,SAAS,GAAGV,MAAM,CAACW,KAAP,CAAa,CAAb,EAAgBH,KAAhB,EAAuB5F,IAAvB,CAA4B,UAAAgG,UAAU;AAAA,2BACpDlD,IAAI,CAACC,SAAL,CAAeiD,UAAf,KAA8BlD,IAAI,CAACC,SAAL,CAAepG,KAAf,CADsB;AAAA,mBAAtC,CAAlB;AAIA,sBAAImJ,SAAJ,EACI,OAAO,KAAP;AAEJ,sBAAI,CAAC,KAAI,CAACf,SAAV,EACI,OAAO,IAAP;AAEJ,yBAAOpI,KAAK,CAAC6I,KAAN,GAAc,KAAI,CAACT,SAA1B;AACH,iBAlBiB,CAHtB;AAuBI,oBAAIU,WAAJ,EACI,KAAKV,SAAL,GAAiBU,WAAW,CAACD,KAA7B;AAxBR,iDA0BWE,SA1BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qMA6BA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B5J,uBAA1B,8DAAoC,EAApC;AAAwCsF,wBAAxC;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAI,KAAK8I,aAAT,EACIqB,aAAa,CAAC,KAAKrB,aAAN,CAAb;;AAPR,oBASS,KAAKD,OAAL,CAAa3I,WATtB;AAAA;AAAA;AAAA;;AAAA,sBAUc,IAAIgD,KAAJ,CAAU,gCAAV,CAVd;;AAAA;AAAA,oBAYS,KAAKI,OAZd;AAAA;AAAA;AAAA;;AAAA,sBAac,IAAIJ,KAAJ,CAAU,4CAAV,CAbd;;AAAA;AAeI,qBAAKkH,aAAL,GAAqB9E,QAArB;AAfJ;AAAA,uBAgBU,KAAK+E,UAAL,CAAgBrK,OAAhB,CAhBV;;AAAA;AAkBI,qBAAK8I,aAAL,GAAqBwB,WAAW,CAAC,YAAM;AACnC,wBAAI,CAACD,UAAL,CAAgBrK,OAAhB,EAAyBuK,IAAzB,CAA8B,UAAAX,SAAS;AAAA,2BAAIA,SAAS,CAAC9H,OAAV,CAAkB,UAAAjB,KAAK,EAAI;AAClE,4BAAI,CAACuJ,aAAL,IAAsB,MAAI,CAACA,aAAL,CAAmBvJ,KAAnB,CAAtB;AACH,qBAF0C,CAAJ;AAAA,mBAAvC,WAEU,UAAA0H,GAAG,EAAI;AACbiC,2BAAO,CAACC,KAAR,CAAc,0BAAd,EAA0ClC,GAA1C;AACH,mBAJD;AAKH,iBAN+B,EAM7B,IAN6B,CAAhC;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WA2BA,8BAAqB;AACjB,UAAI,CAAC,KAAKO,aAAV,EACI;AAEJqB,mBAAa,CAAC,KAAKrB,aAAN,CAAb;AACA,WAAKA,aAAL,GAAqB,KAArB;AACA,WAAKsB,aAAL,GAAqB,KAArB;AACH;;;WAED,qBAAYM,QAAZ,EAAsB;AAClB,aAAO,KAAKC,cAAL,CAAoBD,QAApB,KAAiC,KAAKE,SAAL,CAAeD,cAAf,CAA8BD,QAA9B,CAAxC;AACH;;;WAED,iBAAQtF,GAAR,EAAa;AAAA;;AACT,WAAKA,GAAL,GAAWA,GAAX;AACA,WAAK8D,OAAL,GAAe,EAAf;AAEA,WAAKE,KAAL,CAAWtH,OAAX,CAAmB,UAAA+I,IAAI;AAAA,eAAI,OAAO,MAAI,CAACA,IAAD,CAAf;AAAA,OAAvB;AAEAzF,SAAG,CAACtD,OAAJ,CAAY,UAAAgJ,IAAI,EAAI;AAChB;AACA,YAAI,CAACA,IAAI,CAACC,IAAN,IAAc,eAAe7D,IAAf,CAAoB4D,IAAI,CAACC,IAAzB,CAAlB,EACI;AAEJ,YAAMC,MAAM,GAAG,IAAIC,+CAAJ,CAAW,MAAX,EAAiBH,IAAjB,CAAf;AACA,YAAMI,UAAU,GAAGF,MAAM,CAACG,QAAP,CAAgBC,IAAhB,CAAqBJ,MAArB,CAAnB;AAEA,YACIK,IADJ,GAIIL,MAJJ,CACIK,IADJ;AAAA,YAEIC,gBAFJ,GAIIN,MAJJ,CAEIM,gBAFJ;AAAA,YAGIC,SAHJ,GAIIP,MAJJ,CAGIO,SAHJ;AAMA,cAAI,CAACrC,OAAL,CAAamC,IAAb,IAAqBH,UAArB;AACA,cAAI,CAAChC,OAAL,CAAaoC,gBAAb,IAAiCJ,UAAjC;AACA,cAAI,CAAChC,OAAL,CAAaqC,SAAb,IAA0BL,UAA1B;AAEA,cAAI,CAAC/B,eAAL,CAAqBkC,IAArB,IAA6BL,MAA7B;AACA,cAAI,CAAC7B,eAAL,CAAqBmC,gBAArB,IAAyCN,MAAzC;AACA,cAAI,CAAC7B,eAAL,CAAqBoC,SAArB,IAAkCP,MAAlC;;AAEA,YAAI,CAAC,MAAI,CAACQ,WAAL,CAAiBH,IAAjB,CAAL,EAA6B;AACzB,gBAAI,CAACA,IAAD,CAAJ,GAAaH,UAAb;;AACA,gBAAI,CAAC9B,KAAL,CAAWqC,IAAX,CAAgBJ,IAAhB;AACH;;AAED,YAAI,CAAC,MAAI,CAACG,WAAL,CAAiBF,gBAAjB,CAAL,EAAyC;AACrC,gBAAI,CAACA,gBAAD,CAAJ,GAAyBJ,UAAzB;;AACA,gBAAI,CAAC9B,KAAL,CAAWqC,IAAX,CAAgBH,gBAAhB;AACH;;AAED,YAAI,CAAC,MAAI,CAACE,WAAL,CAAiBD,SAAjB,CAAL,EAAkC;AAC9B,gBAAI,CAACA,SAAD,CAAJ,GAAkBL,UAAlB;;AACA,gBAAI,CAAC9B,KAAL,CAAWqC,IAAX,CAAgBF,SAAhB;AACH;AACJ,OApCD;AAqCH;;;WAED,qBAAYG,IAAZ,EAAkB;AAEd,UAAMC,UAAU,GAAGD,IAAI,CAAChF,SAAL,CAAe,CAAf,EAAkB,CAAlB,CAAnB;AACA,UAAMkF,SAAS,GAAGF,IAAI,CAAChF,SAAL,CAAe,CAAf,CAAlB;AAEA,UAAI,CAAC,KAAKyC,eAAL,CAAqBwC,UAArB,CAAL,EACI,MAAM,IAAIzI,KAAJ,CAAU,qBAAqByI,UAArB,GAAkC,YAA5C,CAAN;AAEJ,UAAME,cAAc,GAAG,KAAK1C,eAAL,CAAqBwC,UAArB,CAAvB;AAEA,aAAO;AACHN,YAAI,EAAEQ,cAAc,CAACR,IADlB;AAEH3G,cAAM,EAAE,KAAKyE,eAAL,CAAqBwC,UAArB,EAAiCG,WAAjC,CAA6CF,SAA7C;AAFL,OAAP;AAIH;;;;sLAED,kBAAU5L,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBI,0BAAnB,8DAAgC,KAAKyI,OAAL,CAAanH,iBAA7C;AAAgE4D,wBAAhE,8DAA2E,KAA3E;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiB7E,UAAjB,CAAJ,EAAkC;AAC9BkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAKyI,OAAL,CAAanH,iBAA1B;AACH;;AAJL,oBAMS4D,QANT;AAAA;AAAA;AAAA;;AAAA,kDAOe,KAAKjD,aAAL,CAAmB,WAAnB,EAA6BrC,OAA7B,EAAsCI,UAAtC,CAPf;;AAAA;AAAA;AAUckD,uBAVd,GAUwB,KAAKuF,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCnD,UAApC,CAVxB;AAAA;AAAA,uBAWkC,KAAKyI,OAAL,CAAa9H,kBAAb,CAAgCgL,mBAAhC,CAAoD/L,OAApD,EAA6DsD,OAA7D,CAXlC;;AAAA;AAWc0I,2BAXd;AAAA;AAAA,uBAYwC,KAAKnD,OAAL,CAAa5H,GAAb,CAAiBgL,IAAjB,CAAsBD,WAAtB,EAAmC5L,UAAnC,CAZxC;;AAAA;AAYc8L,iCAZd;AAAA;AAAA,uBAa+B,KAAKrD,OAAL,CAAa5H,GAAb,CAAiBkL,kBAAjB,CAAoCD,iBAApC,CAb/B;;AAAA;AAacE,wBAbd;;AAAA,qBAeYA,QAAQ,CAACzG,IAfrB;AAAA;AAAA;AAAA;;AAAA,kDAgBmBL,QAAQ,CAAC;AACZmF,uBAAK,EAAE2B,QAAQ,CAACzG,IADJ;AAEZ0G,yBAAO,EAAE,KAAKxD,OAAL,CAAayD,MAAb,CAAoBF,QAAQ,CAACC,OAA7B;AAFG,iBAAD,CAhB3B;;AAAA;AAAA;AAAA,uBAqBc5L,6CAAK,CAAC8L,KAAN,CAAY,IAAZ,CArBd;;AAAA;AAAA,kDAsBe,KAAKC,EAAL,CAAQN,iBAAiB,CAACO,gBAA1B,EAA4CnH,QAA5C,CAtBf;;AAAA;AAAA;AAAA;AAAA,kDAwBeA,QAAQ,cAxBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;oLA4BA,kBAASoH,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BpH,wBAA1B,8DAAqC,KAArC;;AAAA,oBACSA,QADT;AAAA;AAAA;AAAA;;AAAA,kDAEe,KAAKjD,aAAL,CAAmB,KAAKmK,EAAxB,EAA4BE,eAA5B,CAFf;;AAAA;AAAA;AAAA;AAAA,uBAK+B,KAAK7D,OAAL,CAAa5H,GAAb,CAAiB0L,WAAjB,CAA6BD,eAA7B,CAL/B;;AAAA;AAKcN,wBALd;;AAAA,oBAOaA,QAAQ,CAACK,gBAPtB;AAAA;AAAA;AAAA;;AAAA,kDAQmBnH,QAAQ,CAAC,oBAAoB0B,IAAI,CAACC,SAAL,CAAemF,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAArB,CAR3B;;AAAA;AAUQ,qBAAK9I,OAAL,GAAe8I,QAAQ,CAACK,gBAAxB;AACA,qBAAK1D,QAAL,GAAgBqD,QAAQ,CAACrD,QAAzB;AACA,qBAAKC,QAAL,GAAgB,IAAhB;AAEA,qBAAKK,OAAL,CAAa+C,QAAQ,CAAChH,GAAT,GAAegH,QAAQ,CAAChH,GAAT,CAAawH,MAAb,GAAsBR,QAAQ,CAAChH,GAAT,CAAawH,MAAnC,GAA4C,EAA3D,GAAgE,EAA7E;AAdR,kDAgBetH,QAAQ,CAAC,IAAD,EAAO,IAAP,CAhBvB;;AAAA;AAAA;AAAA;;AAAA,qBAkBY,aAAGmB,QAAH,GAAczD,QAAd,CAAuB,gBAAvB,CAlBZ;AAAA;AAAA;AAAA;;AAAA,kDAmBmBsC,QAAQ,CAAC,+CAAD,CAnB3B;;AAAA;AAAA,kDAqBeA,QAAQ,cArBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAyBA,kBAAuC;AAAA,UAAhCtF,OAAgC,uEAAtB,EAAsB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACnC,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAI,CAACS,6CAAK,CAACwE,UAAN,CAAiBK,QAAjB,CAAL,EACI,MAAM,IAAIpC,KAAJ,CAAU,4BAAV,CAAN;AAEJ,UAAM2J,IAAI,GAAG,IAAb;AAEA,aAAO;AACHC,aADG,mBAC0B;AAAA,cAAvBC,aAAuB,uEAAP,KAAO;;AACzB,cAAI,CAACA,aAAL,EAAoB;AAChBF,gBAAI,CAACG,mBAAL,CAAyBhN,OAAzB,EAAkCsF,QAAlC;;AACA,mBAAO,IAAP;AACH;;AAEDuH,cAAI,CAACG,mBAAL,CAAyBhN,OAAzB,EAAkCsF,QAAlC,EAA4CiF,IAA5C,CAAiD,YAAM;AACnDwC,yBAAa;AAChB,WAFD,WAES,UAAAxE,GAAG,EAAI;AACZwE,yBAAa,CAACxE,GAAD,CAAb;AACH,WAJD;;AAMA,iBAAO,IAAP;AACH,SAdE;AAeH0E,YAfG,kBAeI;AACHJ,cAAI,CAACK,kBAAL;AACH;AAjBE,OAAP;AAmBH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrPL;AACA;AACA;AACA;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA/H,GAAG,EAAI;AAC/BA,KAAG,CAACgI,eAAJ,GAAsBhI,GAAG,CAACgI,eAAJ,GAAsBhI,GAAG,CAACgI,eAAJ,CAAoBrH,WAApB,EAAtB,GAA0D,YAAhF;AACAX,KAAG,CAAC2F,IAAJ,GAAW3F,GAAG,CAAC2F,IAAJ,GAAW3F,GAAG,CAAC2F,IAAJ,CAAShF,WAAT,EAAX,GAAoC,EAA/C;AACA,MAAGX,GAAG,CAAC2F,IAAJ,KAAa,UAAb,IAA2B3F,GAAG,CAAC2F,IAAJ,KAAa,SAA3C,EAAsD,OAAO,IAAP;AACtD,MAAIsC,KAAK,GAAG,IAAI5M,6CAAK,CAAC6M,WAAN,CAAkBC,SAAtB,CAAgC,CAACnI,GAAD,CAAhC,CAAZ;;AACA,MAAGA,GAAG,CAAC2F,IAAJ,KAAa,OAAhB,EAAyB;AACvB,WAAOsC,KAAK,CAACG,QAAN,CAAepI,GAAG,CAACiG,IAAnB,EAAyBoC,MAAzB,CAAgChN,6CAAK,CAAC6M,WAAN,CAAkBI,WAAlB,CAA8BC,OAA9D,CAAP;AACD;;AACD,SAAON,KAAK,CAACO,WAAN,CAAkBxI,GAAG,CAACiG,IAAtB,EAA4BoC,MAA5B,CAAmChN,6CAAK,CAAC6M,WAAN,CAAkBI,WAAlB,CAA8BC,OAAjE,CAAP;AACH,CATD;;AAWA,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACzI,GAAD,EAAM0I,MAAN,EAAiB;AAClC,SAAOC,qEAAmB,CAAC3I,GAAD,EAAM0I,MAAN,CAA1B;AACH,CAFD;;IAIqB7C,M;AACjB,kBAAYmB,QAAZ,EAAsBhH,GAAtB,EAA2B;AAAA;;AACvB,SAAKyD,OAAL,GAAeuD,QAAQ,CAACvD,OAAxB;AACA,SAAKuD,QAAL,GAAgBA,QAAhB;AAEA,SAAKhH,GAAL,GAAWA,GAAX;AACA,SAAKiG,IAAL,GAAYjG,GAAG,CAACiG,IAAJ,KAAajG,GAAG,CAACiG,IAAJ,GAAWjG,GAAG,CAAC2F,IAA5B,CAAZ;AAEA,SAAKiD,MAAL,GAAc5I,GAAG,CAAC4I,MAAJ,IAAc,EAA5B;AACA,SAAKC,OAAL,GAAe7I,GAAG,CAAC6I,OAAJ,IAAe,EAA9B;AAEA,SAAK3C,gBAAL,GAAwB6B,mBAAmB,CAAC/H,GAAD,CAA3C;AACA,SAAKmG,SAAL,GAAiB,KAAK1C,OAAL,CAAaqF,IAAb,CAAkB,KAAK5C,gBAAvB,EAAyC,KAAzC,EAAgDrB,KAAhD,CAAsD,CAAtD,EAAyD,CAAzD,CAAjB;AACA,SAAK5H,aAAL,GAAqBC,qDAAa,CAAC,IAAD,CAAlC;AAEA,SAAK6L,cAAL,GAAsB;AAClB/L,cAAQ,EAAE,KAAKyG,OAAL,CAAazG,QADL;AAElBgM,eAAS,EAAE,CAFO;AAGlBC,uBAAiB,EAAE,GAHD;AAIlBC,wBAAkB,EAAE,KAJF,CAIQ;;AAJR,KAAtB;AAMH;;;;WAED,qBAAY5C,IAAZ,EAAkB;AACd,aAAOmC,YAAY,CAAC,KAAKG,MAAN,EAAc,OAAOtC,IAArB,CAAnB;AACH;;;WAED,oBAAkB;AAAA;;AAChB,UAAI6C,YAAY,GAAG,EAAnB;;AACA,UAAG,KAAKnJ,GAAL,IAAY,CAAC,SAAS8B,IAAT,CAAc,KAAK9B,GAAL,CAAS2F,IAAvB,CAAhB,EAA8C;AAAA,0CAFpCyD,IAEoC;AAFpCA,cAEoC;AAAA;;AAC1CD,oBAAY,GAAGE,qEAAmB,CAAC,KAAKrJ,GAAN,EAAWoJ,IAAX,CAAlC;AACH;;AACD,aAAO;AACHE,YAAI,EAAE,gBAAoC;AAAA,cAAnC1O,OAAmC,uEAAzB,EAAyB;AAAA,cAArBsF,QAAqB,uEAAV,KAAU;;AACtC,cAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,oBAAQ,GAAGtF,OAAX;AACAA,mBAAO,GAAG,EAAV;AACH;;AACDA,iBAAO,mCACFA,OADE;AAELuO,wBAAY,EAAZA;AAFK,YAAP;AAKA,iBAAO,KAAI,CAACI,KAAL,CAAW,EAAX,EAAe,EAAf,EAAmB3O,OAAnB,EAA4BsF,QAA5B,CAAP;AACH,SAZE;AAaHsJ,YAAI,EAAE,gBAAiF;AAAA,cAAhF5O,OAAgF,uEAAtE,EAAsE;AAAA,cAAlEI,UAAkE,uEAArD,KAAI,CAACyI,OAAL,CAAanH,iBAAwC;AAAA,cAArB4D,QAAqB,uEAAV,KAAU;;AACnF,cAAI7E,6CAAK,CAACwE,UAAN,CAAiB7E,UAAjB,CAAJ,EAAkC;AAC9BkF,oBAAQ,GAAGlF,UAAX;AACAA,sBAAU,GAAG,KAAI,CAACyI,OAAL,CAAanH,iBAA1B;AACH;;AACD,cAAIjB,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC7BsF,oBAAQ,GAAGtF,OAAX;AACAA,mBAAO,GAAG,EAAV;AACD;;AACDA,iBAAO,mCACFA,OADE;AAELuO,wBAAY,EAAZA;AAFK,YAAP;AAKA,iBAAO,KAAI,CAACM,KAAL,CAAW,EAAX,EAAe,EAAf,EAAmB7O,OAAnB,EAA4BI,UAA5B,EAAwCkF,QAAxC,CAAP;AACH,SA5BE;AA6BHwJ,aAAK,EAAE;AAAA,iBAAmB,KAAI,CAACC,MAAL,YAAI,YAAvB;AAAA;AA7BJ,OAAP;AA+BD;;;;uLAED,iBAAYC,KAAZ,EAAmBR,IAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBxO,uBAAzB,2DAAmC,EAAnC;AAAuCsF,wBAAvC,2DAAkD,KAAlD;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAJL,oBAMSsF,QANT;AAAA;AAAA;AAAA;;AAAA,iDAOe,KAAKjD,aAAL,CAAmB,KAAKsM,KAAxB,EAA+BK,KAA/B,EAAsCR,IAAtC,EAA4CxO,OAA5C,CAPf;;AAAA;AAAA,sBASQgP,KAAK,CAAClM,MAAN,KAAiB0L,IAAI,CAAC1L,MAT9B;AAAA;AAAA;AAAA;;AAAA,iDAUewC,QAAQ,CAAC,iCAAD,CAVvB;;AAAA;AAAA,oBAYS,KAAK8G,QAAL,CAAc9I,OAZvB;AAAA;AAAA;AAAA;;AAAA,iDAaegC,QAAQ,CAAC,mCAAD,CAbvB;;AAAA;AAAA,oBAeS,KAAK8G,QAAL,CAAcpD,QAfvB;AAAA;AAAA;AAAA;;AAAA,iDAgBe1D,QAAQ,CAAC,iEAAD,CAhBvB;;AAAA;AAkBW8H,+BAlBX,GAkB8B,KAAKhI,GAlBnC,CAkBWgI,eAlBX;;AAAA,oBAoBS,CAAC,MAAD,EAAS,MAAT,EAAiBpK,QAAjB,CAA0BoK,eAAe,CAACrH,WAAhB,EAA1B,CApBT;AAAA;AAAA;AAAA;;AAAA,iDAqBeT,QAAQ,2CAAmC8H,eAAnC,wBArBvB;;AAAA;AAuBIpN,uBAAO,iDACA,KAAKmO,cADL;AAEH3H,sBAAI,EAAE,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC;AAF/B,mBAGA5B,OAHA;AAIHiP,6BAAW,EAAE;AAJV,kBAAP;AAOMC,0BA9BV,GA8BuBV,IAAI,CAACW,GAAL,CAAS,UAACrH,KAAD,EAAQgC,KAAR;AAAA,yBAAmB;AAC3CiB,wBAAI,EAAEiE,KAAK,CAAClF,KAAD,CADgC;AAE3ChC,yBAAK,EAALA;AAF2C,mBAAnB;AAAA,iBAAT,CA9BvB;AAmCI,qBAAKe,OAAL,CAAa9H,kBAAb,CAAgCqO,oBAAhC,CACI,KAAKhD,QAAL,CAAc9I,OADlB,EAEI,KAAKgI,gBAFT,EAGItL,OAHJ,EAIIkP,UAJJ,EAKIlP,OAAO,CAACwG,IAAR,GAAe,KAAKqC,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2B1D,OAAO,CAACwG,IAAnC,CAAf,GAA0D,KAL9D,EAMI,UAAC+B,GAAD,EAAMyD,WAAN,EAAsB;AAClB,sBAAIzD,GAAJ,EACI,OAAOjD,QAAQ,CAACiD,GAAD,CAAf;AAEJ,sBAAI,CAAC9H,6CAAK,CAAC+K,WAAN,CAAkBQ,WAAlB,EAA+B,iBAA/B,CAAL,EACI,OAAO1G,QAAQ,CAAC,mBAAD,CAAf;;AAEJ,sBAAI;AAEA,wBAAM+J,GAAG,GAAGrD,WAAW,CAACsD,eAAZ,CAA4B,CAA5B,EAA+BxM,MAA3C;;AACA,wBAAIuM,GAAG,KAAK,CAAR,IAAaA,GAAG,GAAG,EAAN,KAAa,CAA9B,EAAiC;AAC7B,0BAAIE,GAAG,GAAG,oDAAV;;AACA,0BAAIF,GAAG,KAAK,CAAZ,EAAe;AACXE,2BAAG,IAAI,kBAAP;AACA,4BAAIC,IAAI,GAAG,EAAX;AACA,4BAAIC,KAAK,GAAGzD,WAAW,CAACsD,eAAZ,CAA4B,CAA5B,EAA+B5I,SAA/B,CAAyC,CAAzC,CAAZ;;AACA,6BAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+H,GAAG,GAAG,CAA1B,EAA6B/H,CAAC,IAAI,EAAlC,EAAsC;AAClCkI,8BAAI,IAAI,MAAI,CAAC3G,OAAL,CAAayD,MAAb,CAAoBmD,KAAK,CAAC/I,SAAN,CAAgBY,CAAhB,EAAmBA,CAAC,GAAG,EAAvB,CAApB,CAAR;AACH;;AACDiI,2BAAG,IAAIC,IAAI,CAAC3J,OAAL,CAAa,sBAAb,EAAqC,GAArC,EAA0CA,OAA1C,CAAkD,KAAlD,EAAyD,GAAzD,EAA8DA,OAA9D,CAAsE,OAAtE,EAA+E,EAA/E,CAAP;AACH;;AACD,6BAAOP,QAAQ,CAACiK,GAAD,CAAf;AACH;;AAED,wBAAIzB,MAAM,GAAGD,YAAY,CAAC,MAAI,CAACzI,GAAN,EAAW,OAAO4G,WAAW,CAACsD,eAAZ,CAA4B,CAA5B,CAAlB,CAAzB;;AAEA,wBAAIxB,MAAM,CAAChL,MAAP,KAAkB,CAAlB,IAAuBkB,MAAM,CAAC0L,IAAP,CAAY5B,MAAZ,EAAoBhL,MAApB,KAA+B,CAA1D,EAA6D;AACzDgL,4BAAM,GAAGA,MAAM,CAAC,CAAD,CAAf;AACH;;AAED,2BAAOxI,QAAQ,CAAC,IAAD,EAAOwI,MAAP,CAAf;AACH,mBAxBD,CAwBE,OAAO6B,EAAP,EAAW;AACT,2BAAOrK,QAAQ,CAACqK,EAAD,CAAf;AACH;AACJ,iBAxCL;;AAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;uLA8EA,kBAAYX,KAAZ,EAAmBR,IAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBxO,uBAAzB,8DAAmC,EAAnC;AAAuCI,0BAAvC,8DAAoD,KAAKyI,OAAL,CAAanH,iBAAjE;AAAoF4D,wBAApF,8DAA+F,KAA/F;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiB7E,UAAjB,CAAJ,EAAkC;AAC9BkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAKyI,OAAL,CAAanH,iBAA1B;AACH;;AAED,oBAAIjB,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AATL,oBAWSsF,QAXT;AAAA;AAAA;AAAA;;AAAA,kDAYe,KAAKjD,aAAL,CAAmB,KAAKwM,KAAxB,EAA+BG,KAA/B,EAAsCR,IAAtC,EAA4CxO,OAA5C,EAAqDI,UAArD,CAZf;;AAAA;AAAA,sBAcQ4O,KAAK,CAAClM,MAAN,KAAiB0L,IAAI,CAAC1L,MAd9B;AAAA;AAAA;AAAA;;AAAA,sBAec,IAAII,KAAJ,CAAU,iCAAV,CAfd;;AAAA;AAAA,oBAiBS,KAAKkJ,QAAL,CAAc9I,OAjBvB;AAAA;AAAA;AAAA;;AAAA,kDAkBegC,QAAQ,CAAC,mCAAD,CAlBvB;;AAAA;AAAA,oBAoBS,KAAK8G,QAAL,CAAcpD,QApBvB;AAAA;AAAA;AAAA;;AAAA,kDAqBe1D,QAAQ,CAAC,iEAAD,CArBvB;;AAAA;AAuBW8H,+BAvBX,GAuB8B,KAAKhI,GAvBnC,CAuBWgI,eAvBX;;AAAA,qBAyBQ,CAAC,MAAD,EAAS,MAAT,EAAiBpK,QAAjB,CAA0BoK,eAAe,CAACrH,WAAhB,EAA1B,CAzBR;AAAA;AAAA;AAAA;;AAAA,kDA0BeT,QAAQ,2CAAmC8H,eAAnC,wBA1BvB;;AAAA;AA4BI;AACA,oBAAI,CAAC,CAAC,SAAD,EAAYpK,QAAZ,CAAqBoK,eAAe,CAACrH,WAAhB,EAArB,CAAL,EACI/F,OAAO,CAACoO,SAAR,GAAoB,CAApB;AAEJpO,uBAAO,mCACA,KAAKmO,cADL;AAEH3H,sBAAI,EAAE,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC;AAF/B,mBAGA5B,OAHA,CAAP;AAMMkP,0BAtCV,GAsCuBV,IAAI,CAACW,GAAL,CAAS,UAACrH,KAAD,EAAQgC,KAAR;AAAA,yBAAmB;AAC3CiB,wBAAI,EAAEiE,KAAK,CAAClF,KAAD,CADgC;AAE3ChC,yBAAK,EAALA;AAF2C,mBAAnB;AAAA,iBAAT,CAtCvB;AAAA;AA4CcxE,uBA5Cd,GA4CwBlD,UAAU,GAAG,KAAKyI,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCnD,UAApC,CAAH,GAAqD,KAAKyI,OAAL,CAAalH,cAAb,CAA4BE,MA5CnH;AAAA;AAAA,uBA6CkC,KAAKgH,OAAL,CAAa9H,kBAAb,CAAgCqO,oBAAhC,CACtB,KAAKhD,QAAL,CAAc9I,OADQ,EAEtB,KAAKgI,gBAFiB,EAGtBtL,OAHsB,EAItBkP,UAJsB,EAKtB,KAAKrG,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CALsB,CA7ClC;;AAAA;AA6Cc0I,2BA7Cd;;AAAA,sBAqDY,CAACA,WAAW,CAAC5E,MAAb,IAAuB,CAAC4E,WAAW,CAAC5E,MAAZ,CAAmBA,MArDvD;AAAA;AAAA;AAAA;;AAAA,kDAsDmB9B,QAAQ,CAAC,oBAAoB0B,IAAI,CAACC,SAAL,CAAe+E,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAArB,CAtD3B;;AAAA;AAAA;AAAA,uBAyDwC,KAAKnD,OAAL,CAAa5H,GAAb,CAAiBgL,IAAjB,CAAsBD,WAAW,CAACA,WAAlC,EAA+C5L,UAA/C,CAzDxC;;AAAA;AAyDc8L,iCAzDd;;AAAA,oBA2DaA,iBAAiB,CAACX,SA3D/B;AAAA;AAAA;AAAA;;AAAA,oBA4DiBnL,UA5DjB;AAAA;AAAA;AAAA;;AAAA,kDA6DuBkF,QAAQ,CAAC,qCAAD,CA7D/B;;AAAA;AAAA,kDA+DmBA,QAAQ,CAAC,8BAAD,CA/D3B;;AAAA;AAAA;AAAA,uBAkEgC,KAAKuD,OAAL,CAAa5H,GAAb,CAAiBkL,kBAAjB,CAAoCD,iBAApC,CAlEhC;;AAAA;AAkEc0D,yBAlEd;;AAAA,qBAoEYA,SAAS,CAACjK,IApEtB;AAAA;AAAA;AAAA;;AAqEkB4C,mBArElB,GAqEwB;AACRkC,uBAAK,EAAEmF,SAAS,CAACjK,IADT;AAER0G,yBAAO,EAAEuD,SAAS,CAACjK;AAFX,iBArExB;AAyEY,oBAAIiK,SAAS,CAACvD,OAAd,EACI9D,GAAG,CAAC8D,OAAJ,GAAc,KAAKxD,OAAL,CAAayD,MAAb,CAAoBsD,SAAS,CAACvD,OAA9B,CAAd;AA1EhB,kDA2EmB/G,QAAQ,CAACiD,GAAD,CA3E3B;;AAAA;AAAA,oBA8EavI,OAAO,CAACsO,kBA9ErB;AAAA;AAAA;AAAA;;AAAA,kDA+EmBhJ,QAAQ,CAAC,IAAD,EAAO4G,iBAAiB,CAAC2D,IAAzB,CA/E3B;;AAAA;AAiFcC,2BAjFd;AAAA,iMAiF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOhG,iCAAP,8DAAe,CAAf;;AAAA,kCACZA,KAAK,KAAK,EADE;AAAA;AAAA;AAAA;;AAAA,8DAELxE,QAAQ,CAAC;AACZmF,mCAAK,EAAE,qCADK;AAEZuB,yCAAW,EAAEE;AAFD,6BAAD,CAFH;;AAAA;AAAA;AAAA,mCAQK,MAAI,CAACrD,OAAL,CAAa5H,GAAb,CAAiB8O,kBAAjB,CAAoC7D,iBAAiB,CAAC2D,IAAtD,CARL;;AAAA;AAQV/B,kCARU;;AAAA,gCAUX9J,MAAM,CAAC0L,IAAP,CAAY5B,MAAZ,EAAoBhL,MAVT;AAAA;AAAA;AAAA;;AAAA,8DAWLkN,UAAU,CAAC,YAAM;AACpBF,yCAAW,CAAChG,KAAK,GAAG,CAAT,CAAX;AACH,6BAFgB,EAEd,IAFc,CAXL;;AAAA;AAAA,kCAgBZgE,MAAM,CAAC1G,MAAP,IAAiB0G,MAAM,CAAC1G,MAAP,KAAkB,QAhBvB;AAAA;AAAA;AAAA;;AAAA,8DAiBL9B,QAAQ,CAAC;AACZmF,mCAAK,EAAE,MAAI,CAAC5B,OAAL,CAAayD,MAAb,CAAoBwB,MAAM,CAACmC,UAA3B,CADK;AAEZjE,yCAAW,EAAEE,iBAFD;AAGZ4B,oCAAM,EAANA;AAHY,6BAAD,CAjBH;;AAAA;AAAA,gCAwBXrN,6CAAK,CAAC+K,WAAN,CAAkBsC,MAAlB,EAA0B,gBAA1B,CAxBW;AAAA;AAAA;AAAA;;AAAA,8DAyBLxI,QAAQ,CAAC;AACZmF,mCAAK,EAAE,wBAAwBzD,IAAI,CAACC,SAAL,CAAe6G,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CADnB;AAEZ9B,yCAAW,EAAEE,iBAFD;AAGZ4B,oCAAM,EAANA;AAHY,6BAAD,CAzBH;;AAAA;AAAA,iCAgCZ9N,OAAO,CAACkQ,WAhCI;AAAA;AAAA;AAAA;;AAAA,8DAiCL5K,QAAQ,CAAC,IAAD,EAAOwI,MAAP,CAjCH;;AAAA;AAmCZqC,mCAnCY,GAmCFtC,YAAY,CAAC,MAAI,CAACzI,GAAN,EAAW,OAAO0I,MAAM,CAACsC,cAAP,CAAsB,CAAtB,CAAlB,CAnCV;;AAqChB,gCAAID,OAAO,CAACrN,MAAR,KAAmB,CAAnB,IAAwBkB,MAAM,CAAC0L,IAAP,CAAYS,OAAZ,EAAqBrN,MAArB,KAAgC,CAA5D,EAA+D;AAC3DqN,qCAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AACH;;AAvCe,iCAyCZnQ,OAAO,CAACqQ,QAzCI;AAAA;AAAA;AAAA;;AAAA,8DA0CL/K,QAAQ,CAAC,IAAD,EAAO,CAAC4G,iBAAiB,CAAC2D,IAAnB,EAAyBM,OAAzB,CAAP,CA1CH;;AAAA;AAAA,8DA6CT7K,QAAQ,CAAC,IAAD,EAAO6K,OAAP,CA7CC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjF5B;;AAAA,kCAiFcL,WAjFd;AAAA;AAAA;AAAA;;AAiIQA,2BAAW;AAjInB;AAAA;;AAAA;AAAA;AAAA;AAAA,kDAmIexK,QAAQ,cAnIvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;wLAuIA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAatF,uBAAb,8DAAuB,EAAvB;AAA2BsF,wBAA3B,8DAAsC,KAAtC;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAJL,oBAMSS,6CAAK,CAACwE,UAAN,CAAiBK,QAAjB,CANT;AAAA;AAAA;AAAA;;AAAA,sBAOc,IAAIpC,KAAJ,CAAU,kCAAV,CAPd;;AAAA;AAAA,oBASS,KAAKkJ,QAAL,CAAc9I,OATvB;AAAA;AAAA;AAAA;;AAAA,kDAUegC,QAAQ,CAAC,mCAAD,CAVvB;;AAAA;AAAA,sBAYQ,CAAC,KAAKF,GAAL,CAAS2F,IAAV,IAAkB,CAAC,SAAS7D,IAAT,CAAc,KAAK9B,GAAL,CAAS2F,IAAvB,CAZ3B;AAAA;AAAA;AAAA;;AAAA,kDAaezF,QAAQ,CAAC,wCAAD,CAbvB;;AAAA;AAAA,oBAeS,KAAKuD,OAAL,CAAa3I,WAftB;AAAA;AAAA;AAAA;;AAAA,kDAgBeoF,QAAQ,CAAC,4BAAD,CAhBvB;;AAAA;AAkBQgL,wBAlBR,GAkBmB,KAlBnB;AAmBQrH,yBAnBR,GAmBoB,KAnBpB;AAoBQsH,qBApBR,GAoBgBC,IAAI,CAACC,GAAL,KAAa,IApB7B;;AAsBUC,yBAtBV;AAAA,kMAsBsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGJhM,kCAHI,GAGK;AACX6L,mCAAK,EAALA,KADW;AAEX3L,uCAAS,EAAE,MAAI,CAACyG,IAFL;AAGX9B,kCAAI,EAAE,iBAHK;AAIX1E,yCAAW,EAAE,QAJF;AAKX8L,qCAAO,EAAE3Q,OAAO,CAAC2Q;AALN,6BAHL;;AAUV,gCAAI3Q,OAAO,CAAC+J,YAAZ,EAA0B;AACtB,kCAAI,QAAQ7C,IAAR,CAAalH,OAAO,CAAC+J,YAArB,CAAJ,EACIrF,MAAM,CAACkM,eAAP,GAAyB,IAAzB,CADJ,KAGIlM,MAAM,CAACmM,aAAP,GAAuB,IAAvB;AACP;;AAfS;AAAA,mCAiBW,MAAI,CAAChI,OAAL,CAAahI,KAAb,CAAmBqE,0BAAnB,CAA8C,MAAI,CAACkH,QAAL,CAAc9I,OAA5D,EAAqEoB,MAArE,CAjBX;;AAAA;AAiBJ4E,kCAjBI;AAAA,2CAkBYA,MAAM,CAACC,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,qCAAUA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAtB;AAAA,6BAAZ,CAlBZ,gHAkBHC,WAlBG;AAmBJC,qCAnBI,GAmBQN,MAAM,CAACO,MAAP,CAAc,UAAChJ,KAAD,EAAQiJ,KAAR,EAAkB;AAE9C,kCAAI9J,OAAO,CAAC+J,YAAR,IAAwBlJ,KAAK,CAACkJ,YAA9B,IACA/J,OAAO,CAAC+J,YAAR,CAAqBhE,WAArB,OAAuClF,KAAK,CAACkJ,YAAN,CAAmBhE,WAAnB,EAD3C,EAC6E;AACzE,uCAAO,KAAP;AACH;;AAED,kCAAMiE,SAAS,GAAGV,MAAM,CAACW,KAAP,CAAa,CAAb,EAAgBH,KAAhB,EAAuB5F,IAAvB,CAA4B,UAAAgG,UAAU;AAAA,uCACpDlD,IAAI,CAACC,SAAL,CAAeiD,UAAf,KAA8BlD,IAAI,CAACC,SAAL,CAAepG,KAAf,CADsB;AAAA,+BAAtC,CAAlB;AAIA,kCAAImJ,SAAJ,EACI,OAAO,KAAP;AAEJ,kCAAI,CAACf,SAAL,EACI,OAAO,IAAP;AAEJ,qCAAOpI,KAAK,CAAC6I,KAAN,GAAcT,SAArB;AACH,6BAlBiB,CAnBR;AAuCV,gCAAIU,WAAJ,EACIV,SAAS,GAAGU,WAAW,CAACD,KAAxB;AAxCM,8DA0CHE,SA1CG;;AAAA;AAAA;AAAA;AAAA,8DA4CHkH,OAAO,CAACC,MAAR,cA5CG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAtBtB;;AAAA,kCAsBUL,SAtBV;AAAA;AAAA;AAAA;;AAuEUM,4BAvEV,GAuEyB,SAAfA,YAAe,GAAM;AACvB,sBAAIV,QAAJ,EACInG,aAAa,CAACmG,QAAD,CAAb;AAEJA,0BAAQ,GAAGhG,WAAW,CAAC,YAAM;AACzBoG,6BAAS,GAAGnG,IAAZ,CAAiB,UAAAjB,MAAM;AAAA,6BAAIA,MAAM,CAACxH,OAAP,CAAe,UAAAjB,KAAK,EAAI;AAC/CyE,gCAAQ,CAAC,IAAD,EAAO7E,6CAAK,CAACwQ,UAAN,CAAiBpQ,KAAjB,EAAwB,MAAI,CAACuE,GAA7B,CAAP,CAAR;AACH,uBAF0B,CAAJ;AAAA,qBAAvB,WAEU,UAAAmD,GAAG;AAAA,6BAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,qBAFb;AAGH,mBAJqB,EAInB,IAJmB,CAAtB;AAKH,iBAhFL;;AAAA;AAAA,uBAkFUmI,SAAS,EAlFnB;;AAAA;AAmFIM,4BAAY;AAnFhB,kDAqFW;AACHlE,uBAAK,EAAEkE,YADJ;AAEH/D,sBAAI,EAAE,gBAAM;AACR,wBAAI,CAACqD,QAAL,EACI;AAEJnG,iCAAa,CAACmG,QAAD,CAAb;AACAA,4BAAQ,GAAG,KAAX;AACH;AARE,iBArFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1SJ;AACA;AACA;AACA;AACA;;IAEqBxP,K;AAEjB,mBAA6B;AAAA,QAAjB+H,OAAiB,uEAAP,KAAO;;AAAA;;AACzB,QAAI,CAACA,OAAD,IAAY,EAAEA,OAAO,YAAY9I,6CAArB,CAAhB,EACI,MAAM,IAAImD,KAAJ,CAAU,8BAAV,CAAN;AACJ,SAAK2F,OAAL,GAAeA,OAAf;AACA,SAAKxG,aAAL,GAAqBC,oDAAa,CAAC,IAAD,CAAlC;AACH;;;;WAED,qBAA4D;AAAA;;AAAA,UAAlDpC,WAAkD,uEAApC,KAAoC;AAAA,UAA7BgR,WAA6B,uEAAf,aAAe;AACxD,UAAI,CAAChR,WAAL,EACI,OAAO,KAAK2I,OAAL,CAAa3I,WAAb,GAA2B,KAAlC;AAEJ,UAAIO,6CAAK,CAACC,QAAN,CAAeR,WAAf,CAAJ,EACIA,WAAW,GAAG,IAAIS,kDAAS,CAACC,YAAd,CAA2BV,WAA3B,CAAd;AAEJ,UAAI,CAAC,KAAK2I,OAAL,CAAazE,eAAb,CAA6BlE,WAA7B,CAAL,EACI,MAAM,IAAIgD,KAAJ,CAAU,+BAAV,CAAN;AAEJ,WAAK2F,OAAL,CAAa3I,WAAb,GAA2BA,WAA3B;;AACA,WAAK2I,OAAL,CAAa3I,WAAb,CAAyBqF,WAAzB,GAAuC;AAAA,eAAM,KAAI,CAACsD,OAAL,CAAa3I,WAAb,CAAyBiR,OAAzB,CAAiCD,WAAjC,EAA8C3G,IAA9C,CAAmD;AAAA,iBAAM,IAAN;AAAA,SAAnD,WAAqE;AAAA,iBAAM,KAAN;AAAA,SAArE,CAAN;AAAA,OAAvC;AACH;;;WAED,sCAAoF;AAAA,UAAzDmC,eAAyD,uEAAvC,KAAuC;AAAA,UAAhC1M,OAAgC,uEAAtB,EAAsB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAEhF,2BAgBItB,MAAM,CAACoN,MAAP,CAAc;AACdzM,sBAAc,EAAE,CADF;AAEdC,iBAAS,EAAE,KAFG;AAGdC,mBAAW,EAAE,KAHC;AAIdC,YAAI,EAAE,EAJQ;AAKdC,YAAI,EAAE;AALQ,OAAd,EAMD/E,OANC,CAhBJ;AAAA,UACI2E,cADJ,kBACIA,cADJ;AAAA,UAEI4L,KAFJ,kBAEIA,KAFJ;AAAA,UAGIc,aAHJ,kBAGIA,aAHJ;AAAA,UAIIzM,SAJJ,kBAIIA,SAJJ;AAAA,UAKIC,WALJ,kBAKIA,WALJ;AAAA,UAMIC,IANJ,kBAMIA,IANJ;AAAA,UAOIC,IAPJ,kBAOIA,IAPJ;AAAA,UAQI8L,aARJ,kBAQIA,aARJ;AAAA,UASID,eATJ,kBASIA,eATJ;AAAA,UAUIU,4BAVJ,kBAUIA,4BAVJ;AAAA,UAWIC,mBAXJ,kBAWIA,mBAXJ;AAAA,UAYIC,WAZJ,kBAYIA,WAZJ;AAAA,UAaItB,WAbJ,kBAaIA,WAbJ;AAAA,UAcI3G,IAdJ,kBAcIA,IAdJ;AAAA,UAeIoH,OAfJ,kBAeIA,OAfJ;;AAwBA,UAAI,CAACrL,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6C,0BAAxB,EAAoDwH,eAApD,EAAqE1M,OAArE,CAAP;AAEJqR,mBAAa,GAAGA,aAAa,IAAI1M,cAAjB,IAAmC4L,KAAnD;AAEA,UAAI,CAAC,KAAK1H,OAAL,CAAa3I,WAAlB,EACI,OAAOoF,QAAQ,CAAC,4BAAD,CAAf;AAEJ,UAAMmM,WAAW,GAAG,EAApB;AAEA,UAAI,CAAC,KAAK5I,OAAL,CAAapF,SAAb,CAAuBiJ,eAAvB,CAAL,EACI,OAAOpH,QAAQ,CAAC,mCAAD,CAAf;AAEJ,UAAIV,SAAS,IAAI,CAAC8H,eAAlB,EACI,OAAOpH,QAAQ,CAAC,2DAAD,CAAf;AAEJ,UAAI,OAAO+L,aAAP,KAAyB,WAAzB,IAAwC,CAAC5Q,6CAAK,CAACwC,SAAN,CAAgBoO,aAAhB,CAA7C,EACI,OAAO/L,QAAQ,CAAC,gCAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAACwC,SAAN,CAAgB6B,IAAhB,CAAL,EACI,OAAOQ,QAAQ,CAAC,uBAAD,CAAf;;AAEJ,UAAIR,IAAI,GAAG,GAAX,EAAgB;AACZ0F,eAAO,CAACkH,IAAR,CAAa,0CAAb;AACA5M,YAAI,GAAG,GAAP;AACH;;AAED,UAAI,CAACrE,6CAAK,CAACwC,SAAN,CAAgB8B,IAAhB,CAAL,EACI,OAAOO,QAAQ,CAAC,uBAAD,CAAf;AAEJ,UAAIT,WAAW,IAAI,CAACD,SAApB,EACI,OAAOU,QAAQ,CAAC,wDAAD,CAAf;AAEJ,UAAIoH,eAAJ,EACI+E,WAAW,CAAChG,IAAZ,CAAiB,KAAK5C,OAAL,CAAavF,OAAb,CAAqBK,OAArB,CAA6B+I,eAA7B,CAAjB;AAEJ,UAAI9H,SAAJ,EACI6M,WAAW,CAAChG,IAAZ,CAAiB7G,SAAjB;AAEJ,UAAIC,WAAJ,EACI4M,WAAW,CAAChG,IAAZ,CAAiB5G,WAAjB;AAEJ,UAAM8M,EAAE,GAAG;AACP7M,YAAI,EAAJA,IADO;AAEPC,YAAI,EAAJA;AAFO,OAAX;;AAKA,UAAI,qEAAO4L,OAAP,MAAmB,QAAnB,IAA+B3M,MAAM,CAAC0L,IAAP,CAAYiB,OAAZ,EAAqB7N,MAArB,GAA8B,CAAjE,EAAoE;AAChE6O,UAAE,CAAChB,OAAH,GAAa3J,IAAI,CAACC,SAAL,CAAe0J,OAAf,CAAb;AACH;;AAED,UAAIU,aAAJ,EAAmB;AACfM,UAAE,CAACN,aAAH,GAAmBM,EAAE,CAACpB,KAAH,GAAWc,aAA9B;AACH;;AAED,UAAIR,aAAJ,EACIc,EAAE,CAACC,cAAH,GAAoBf,aAApB;AAEJ,UAAID,eAAe,IAAI,CAACC,aAAxB,EACIc,EAAE,CAACE,gBAAH,GAAsBjB,eAAtB;AAEJ,UAAIrH,IAAJ,EACIoI,EAAE,CAACpI,IAAH,GAAUA,IAAV;AAEJiI,iBAAW,GAAGA,WAAW,IAAID,mBAAf,IAAsCD,4BAApD;AACA,UAAIE,WAAJ,EACIG,EAAE,CAACH,WAAH,GAAiBA,WAAjB;AAEJ,aAAO,KAAK3I,OAAL,CAAa3I,WAAb,CAAyBiR,OAAzB,0BAAmDM,WAAW,CAACK,IAAZ,CAAiB,GAAjB,CAAnD,cAA4EC,kDAAW,CAAC9K,SAAZ,CAAsB0K,EAAtB,CAA5E,GAAyGpH,IAAzG,CAA8G,YAAkB;AAAA,YAAjBmB,IAAiB,uEAAV,KAAU;AACnI,YAAI,CAACA,IAAL,EACI,OAAOpG,QAAQ,CAAC,wBAAD,CAAf;AAEJ,YAAI,CAAC7E,6CAAK,CAACuR,OAAN,CAActG,IAAd,CAAL,EACI,OAAOpG,QAAQ,CAACoG,IAAD,CAAf;AAEJ,eAAOpG,QAAQ,CAAC,IAAD,EACX4K,WAAW,KAAK,IAAhB,GAAuBxE,IAAvB,GAA8BA,IAAI,CAACyD,GAAL,CAAS,UAAAtO,KAAK;AAAA,iBAAIJ,6CAAK,CAACwR,QAAN,CAAepR,KAAf,CAAJ;AAAA,SAAd,CADnB,CAAf;AAGH,OAVM,WAUE,UAAA0H,GAAG;AAAA,eAAIjD,QAAQ,CAAEiD,GAAG,CAAC2J,QAAJ,IAAgB3J,GAAG,CAAC2J,QAAJ,CAAaxG,IAA9B,IAAuCnD,GAAxC,CAAZ;AAAA,OAVL,CAAP;AAWH;;;WAGD,oCAAgF;AAAA,UAAvD4J,aAAuD,uEAAvC,KAAuC;AAAA,UAAhCnS,OAAgC,uEAAtB,EAAsB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAE5E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAI,CAACsF,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK8C,wBAAxB,EAAkDgN,aAAlD,EAAiEnS,OAAjE,CAAP;AAEJ,UAAI,CAAC,KAAK6I,OAAL,CAAa3I,WAAlB,EACI,OAAOoF,QAAQ,CAAC,4BAAD,CAAf;AAEJ,aAAO,KAAKuD,OAAL,CAAa3I,WAAb,CAAyBiR,OAAzB,6BAAsDgB,aAAtD,GAAuE5H,IAAvE,CAA4E,YAAkB;AAAA,YAAjBmB,IAAiB,uEAAV,KAAU;AACjG,YAAI,CAACA,IAAL,EACI,OAAOpG,QAAQ,CAAC,wBAAD,CAAf;AAEJ,YAAI,CAAC7E,6CAAK,CAACuR,OAAN,CAActG,IAAd,CAAL,EACI,OAAOpG,QAAQ,CAACoG,IAAD,CAAf;AAEJ,eAAOpG,QAAQ,CAAC,IAAD,EACXtF,OAAO,CAACkQ,WAAR,KAAwB,IAAxB,GAA+BxE,IAA/B,GAAsCA,IAAI,CAACyD,GAAL,CAAS,UAAAtO,KAAK;AAAA,iBAAIJ,6CAAK,CAACwR,QAAN,CAAepR,KAAf,CAAJ;AAAA,SAAd,CAD3B,CAAf;AAGH,OAVM,WAUE,UAAA0H,GAAG;AAAA,eAAIjD,QAAQ,CAAEiD,GAAG,CAAC2J,QAAJ,IAAgB3J,GAAG,CAAC2J,QAAJ,CAAaxG,IAA9B,IAAuCnD,GAAxC,CAAZ;AAAA,OAVL,CAAP;AAWH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjKL;AACA;AACA;;IAEqBnH,M;AAEjB,oBAA2C;AAAA,QAA/ByH,OAA+B,uEAArB,KAAqB;AAAA,QAAd7I,OAAc,uEAAJ,EAAI;;AAAA;;AACvC,QAAI,CAAC6I,OAAD,IAAY,CAACA,OAAD,YAAoB9I,6CAApC,EACI,MAAM,IAAImD,KAAJ,CAAU,8BAAV,CAAN;AACJ,SAAK2F,OAAL,GAAeA,OAAf;AACA,SAAKuJ,gBAAL,GAAwB,CAAC,UAAD,CAAxB;AACA,SAAKC,cAAL,GAAsBrS,OAAO,CAACqS,cAA9B;AACH;;;;WAED,kBAASjR,OAAT,EAAiBpB,OAAjB,EAA0B;AACtB,UAAIsS,eAAe,GAAG;AAClBC,gBAAQ,EAAE,OADQ;AAElBC,kBAAU,EAAE;AAFM,OAAtB;AAIA,UAAIpL,MAAM,GAAG;AACTqL,YAAI,EAAE,EADG;AAETC,eAAO,EAAE,EAFA;AAGTC,eAAO,EAAE;AAHA,OAAb;;AAKA,UAAI,KAAKN,cAAT,EAAyB;AACrBjL,cAAM,CAACqD,KAAP,GAAe,gDAAf;AACA,eAAOrD,MAAP;AACH;;AACD,UAAMjG,MAAM,GAAG,IAAIC,OAAJ,CAAW,KAAKyH,OAAhB,CAAf;;AACA,UAAIpI,6CAAK,CAACwE,UAAN,CAAiB9D,MAAM,CAACmR,eAAxB,CAAJ,EAA8C;AAC1CA,uBAAe,GAAGnR,MAAM,CAACmR,eAAP,CAAuBtS,OAAvB,CAAlB;AACH;;AACD,UAAI6D,6CAAM,CAACC,SAAP,CAAiB/D,6CAAO,CAAC6D,OAAzB,EAAkC0O,eAAe,CAACC,QAAlD,CAAJ,EAAiE;AAC7D,YAAID,eAAe,CAACM,SAApB,EAA+B;AAC3B;AACA,cAAIC,SAAS,GAAG1R,MAAM,CAAC2R,WAAP,CAAmBzH,IAAnC;AACA,cAAI0H,iBAAiB,GAAGF,SAAS,CAACnM,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BX,WAA1B,KAA0C8M,SAAS,CAACnM,SAAV,CAAoB,CAApB,CAAlE;;AACA,cAAImM,SAAS,KAAKE,iBAAlB,EAAqC;AACjChT,yDAAO,CAAC8S,SAAD,CAAP,GAAqBzR,OAArB;AACA,iBAAKyH,OAAL,CAAakK,iBAAb,IAAkC5R,MAAlC;AACAiG,kBAAM,CAACqL,IAAP,CAAYhH,IAAZ,CAAiBoH,SAAjB;AACH;AACJ,SATD,MASO;AACH;AACA,eAAK,IAAIG,SAAT,IAAsBV,eAAe,CAACE,UAAtC,EAAkD;AAC9C,gBAAI,CAAC,KAAK3J,OAAL,CAAa8B,cAAb,CAA4BqI,SAA5B,CAAL,EAA6C;AACzC;AACH;;AACD,gBAAI9J,OAAO,GAAGoJ,eAAe,CAACE,UAAhB,CAA2BQ,SAA3B,CAAd;AACA,gBAAIZ,gBAAgB,GAAG,KAAKvJ,OAAL,CAAamK,SAAb,EAAwBZ,gBAAxB,IAA4C,EAAnE;;AACA,iBAAK,IAAIpH,MAAT,IAAmB9B,OAAnB,EAA4B;AACxB,kBAAI8B,MAAM,KAAK,aAAX,IAA6B,KAAKnC,OAAL,CAAamK,SAAb,EAAwBhI,MAAxB,MAC5BoH,gBAAgB,CAACpP,QAAjB,CAA0BgI,MAA1B,EAAkC;AAAlC,iBACM,KAAK9D,IAAL,CAAU8D,MAAV,CAFsB,CAA7B,CAE0B;AAF9B,gBAGG;AACC5D,sBAAM,CAACuL,OAAP,CAAelH,IAAf,CAAoBT,MAApB;AACA;AACH;;AACD,mBAAKnC,OAAL,CAAamK,SAAb,EAAwBhI,MAAxB,IAAkC9B,OAAO,CAAC8B,MAAD,CAAP,CAAgBI,IAAhB,CAAqB,KAAKvC,OAAL,CAAamK,SAAb,CAArB,CAAlC;AACA5L,oBAAM,CAACsL,OAAP,CAAejH,IAAf,CAAoBT,MAApB;AACH;AACJ;AACJ;AACJ,OA/BD,MA+BO;AACH,cAAM,IAAI9H,KAAJ,CAAU,2DAAV,CAAN;AACH;;AACD,aAAOkE,MAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEL;AACA;;IAEqBxG,Y;AACjB,wBAAY4D,IAAZ,EAAmG;AAAA,QAAjFyO,OAAiF,uEAAvE,KAAuE;AAAA,QAAhEC,IAAgE,uEAAzD,KAAyD;AAAA,QAAlDC,QAAkD,uEAAvC,KAAuC;AAAA,QAAhC7S,OAAgC,uEAAtB,EAAsB;AAAA,QAAlB8S,UAAkB,uEAAL,GAAK;;AAAA;;AAC/F,QAAI,CAAC3S,6CAAK,CAAC4S,UAAN,CAAiB7O,IAAjB,CAAL,EACI,MAAM,IAAItB,KAAJ,CAAU,sCAAV,CAAN;AAEJ,QAAIoQ,KAAK,CAACL,OAAD,CAAL,IAAkBA,OAAO,GAAG,CAAhC,EACI,MAAM,IAAI/P,KAAJ,CAAU,mCAAV,CAAN;AAEJ,QAAI,CAACzC,6CAAK,CAAC8S,QAAN,CAAejT,OAAf,CAAL,EACI,MAAM,IAAI4C,KAAJ,CAAU,iCAAV,CAAN;AAEJsB,QAAI,GAAGA,IAAI,CAACqB,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AAEA,SAAKrB,IAAL,GAAYA,IAAZ;AACA,SAAKyO,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAK7S,OAAL,GAAeA,OAAf;AACA,SAAK8S,UAAL,GAAkBA,UAAlB;AAEA,SAAKI,QAAL,GAAgBC,4CAAK,CAACC,MAAN,CAAa;AACzBC,aAAO,EAAEnP,IADgB;AAEzByO,aAAO,EAAEA,OAFgB;AAGzB3S,aAAO,EAAEA,OAHgB;AAIzBsT,UAAI,EAAEV,IAAI,IAAI;AACVA,YAAI,EAAJA,IADU;AAEVC,gBAAQ,EAARA;AAFU;AAJW,KAAb,CAAhB;AASH;;;;WAED,yBAAgC;AAAA,UAAlBC,UAAkB,uEAAL,GAAK;AAC5B,WAAKA,UAAL,GAAkBA,UAAlB;AACH;;;;6LAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBA,0BAAlB,2DAA+B,KAAKA,UAApC;AAAA,iDACW,KAAKjC,OAAL,CAAaiC,UAAb,EAAyB7I,IAAzB,CAA8B,UAAAmB,IAAI,EAAI;AACzC,yBAAOjL,6CAAK,CAACoT,aAAN,CAAoBnI,IAApB,EAA0B,SAA1B,EAAqC,cAArC,CAAP;AACH,iBAFM,WAEE;AAAA,yBAAM,KAAN;AAAA,iBAFF,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAMA,iBAAQoI,GAAR,EAA2C;AAAA,UAA9BC,OAA8B,uEAApB,EAAoB;AAAA,UAAhB/I,MAAgB,uEAAP,KAAO;AACvCA,YAAM,GAAGA,MAAM,CAACjF,WAAP,EAAT;AAEA,aAAO,KAAKyN,QAAL,CAAcrC,OAAd,CAAsB;AACzBzF,YAAI,EAAEV,MAAM,IAAI,MAAV,IAAoBhH,MAAM,CAAC0L,IAAP,CAAYqE,OAAZ,EAAqBjR,MAAzC,GAAkDiR,OAAlD,GAA4D,IADzC;AAEzBrP,cAAM,EAAEsG,MAAM,IAAI,KAAV,IAAmB+I,OAFF;AAGzBD,WAAG,EAAHA,GAHyB;AAIzB9I,cAAM,EAANA;AAJyB,OAAtB,EAKJT,IALI,CAKC;AAAA,YAAEmB,IAAF,QAAEA,IAAF;AAAA,eAAYA,IAAZ;AAAA,OALD,CAAP;AAMH;;;;;;;AACJ,C;;;;;;;;;;;;;;;;;ACtDD;AAEe;AACX9K,cAAY,EAAZA,qDAAYA;AADD,CAAf,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;;IAEqBqB,S;AACjB,qBAAY9B,WAAZ,EAAiF;AAAA,QAAxDJ,OAAwD,uEAA9C,KAA8C;AAAA,QAAvCiU,SAAuC,uEAA3B,KAA2B;AAAA,QAApB5T,UAAoB,uEAAP,KAAO;;AAAA;;AAC7E,SAAK4T,SAAL,GAAiBA,SAAjB;AACA,QAAQxT,QAAR,GAA+GL,WAA/G,CAAQK,QAAR;AAAA,QAAkBH,QAAlB,GAA+GF,WAA/G,CAAkBE,QAAlB;AAAA,QAA4BJ,YAA5B,GAA+GE,WAA/G,CAA4BF,YAA5B;AAAA,QAA0CC,WAA1C,GAA+GC,WAA/G,CAA0CD,WAA1C;AAAA,QAAuD+T,kBAAvD,GAA+G9T,WAA/G,CAAuD8T,kBAAvD;AAAA,QAA2EC,kBAA3E,GAA+G/T,WAA/G,CAA2E+T,kBAA3E;AAAA,QAA+FC,WAA/F,GAA+GhU,WAA/G,CAA+FgU,WAA/F;AACA,SAAKnS,SAAL,GAAiB,IAAIjC,OAAJ,CAAYS,QAAQ,IAAIH,QAAxB,EAAkCG,QAAQ,IAAIP,YAA9C,EAA4DO,QAAQ,IAAIN,WAAxE,EAAqFE,UAArF,CAAjB;AACA,SAAKqD,SAAL,GAAiB,KAAKuQ,SAAL,CAAevQ,SAAhC;AACA,SAAKhD,KAAL,GAAa,KAAKuT,SAAL,CAAevT,KAA5B;AACA,SAAK2T,qBAAL,CAA2BH,kBAA3B;AACA,SAAKI,qBAAL,CAA2BH,kBAA3B;AACA,SAAKI,UAAL,CAAgBH,WAAhB;AACA,SAAK9R,aAAL,GAAqBC,oDAAa,CAAC,IAAD,CAAlC;AACA,SAAKiS,SAAL,GAAiB,IAAIC,sDAAJ,CAAc,KAAKxS,SAAnB,CAAjB;AAEA,QAAM6K,IAAI,GAAG,IAAb;;AACA,SAAK7K,SAAL,CAAef,GAAf,CAAmBgL,IAAnB,GAA0B,YAAa;AACnC,aAAOY,IAAI,CAACZ,IAAL,OAAAY,IAAI,YAAX;AACH,KAFD;;AAGA,SAAK7K,SAAL,CAAef,GAAf,CAAmBwT,SAAnB,GAA+B,YAAa;AACxC,aAAO5H,IAAI,CAAC4H,SAAL,OAAA5H,IAAI,YAAX;AACH,KAFD;AAGH;;;;WACD,+BAAsBoH,kBAAtB,EAA0C;AACtC,UAAI,CAAC,KAAKxQ,SAAL,CAAewQ,kBAAf,CAAL,EACI,MAAM,IAAI/Q,KAAJ,CAAU,uCAAV,CAAN;AACJ,WAAK+Q,kBAAL,GAA0BA,kBAA1B;AACH;;;WAED,+BAAsBC,kBAAtB,EAA0C;AACtC,UAAI,CAAC,KAAKzQ,SAAL,CAAeyQ,kBAAf,CAAL,EACI,MAAM,IAAIhR,KAAJ,CAAU,uCAAV,CAAN;AACJ,WAAKgR,kBAAL,GAA0BA,kBAA1B;AACH;;;WAED,oBAAWC,WAAX,EAAwB;AACpB,UAAI,CAAC,KAAK1T,KAAL,CAAWC,QAAX,CAAoByT,WAApB,CAAD,IAAqC,CAACA,WAA1C,EACI,MAAM,IAAIjR,KAAJ,CAAU,+BAAV,CAAN;AACJ,WAAKwR,OAAL,GAAeP,WAAf;AACH;;;WAED,yBAAgBQ,WAAhB,EAA6B3I,WAA7B,EAA0C;AACtC,UAAI,OAAO2I,WAAP,KAAuB,QAA3B,EAAqC;AACjCA,mBAAW,GAAG,KAAKlU,KAAL,CAAWkF,IAAX,CAAgBC,gBAAhB,CAAiC+O,WAAjC,CAAd;AACH;;AACD,UAAIC,cAAc,GAAG,KAAKnU,KAAL,CAAWkF,IAAX,CAAgBC,gBAAhB,CAAiC,KAAK8O,OAAtC,CAArB;AAEA,UAAIG,OAAO,GAAG,KAAKpU,KAAL,CAAWkF,IAAX,CAAgBC,gBAAhB,CAAiCoG,WAAW,CAAC6D,IAA7C,EAAmDiF,MAAnD,CAA0DF,cAA1D,CAAd;AACA,UAAIG,WAAW,GAAG,KAAK/S,SAAL,CAAevB,KAAf,CAAqB6M,WAArB,CAAiC0H,MAAjC,CAAwCH,OAAxC,CAAlB;AAEA,UAAMtJ,SAAS,GAAG,KAAK9K,KAAL,CAAWgF,MAAX,CAAkBwP,SAAlB,CAA4B,KAAKxU,KAAL,CAAWkF,IAAX,CAAgBC,gBAAhB,CAAiCmP,WAAW,CAAClP,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAjC,CAA5B,EAA8F8O,WAA9F,CAAlB;;AAEA,UAAIO,KAAK,CAAClD,OAAN,CAAchG,WAAW,CAACT,SAA1B,CAAJ,EAA0C;AACtC,YAAI,CAACS,WAAW,CAACT,SAAZ,CAAsBvI,QAAtB,CAA+BuI,SAA/B,CAAL,EACIS,WAAW,CAACT,SAAZ,CAAsBE,IAAtB,CAA2BF,SAA3B;AACP,OAHD,MAIIS,WAAW,CAACT,SAAZ,GAAwB,CAACA,SAAD,CAAxB;;AACJ,aAAOS,WAAP;AACH;;;;2LAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBA,2BAAhB,2DAA8B,KAA9B;AAAqC5L,0BAArC,2DAAkD,KAAK4B,SAAL,CAAeN,iBAAjE;AAAoFyT,4BAApF,2DAAmG,KAAnG;AAA0G7P,wBAA1G,2DAAqH,KAArH;;AACI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsBkQ,YAAtB,CAAJ,EAAyC;AACrC7P,0BAAQ,GAAG6P,YAAX;AACAA,8BAAY,GAAG,CAAf;AACH;;AAED,oBAAI,KAAK1U,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACAyT,8BAAY,GAAG,CAAf;AACH;;AAVL,oBAYS7P,QAZT;AAAA;AAAA;AAAA;;AAAA,iDAY0B,KAAKjD,aAAL,CAAmB,KAAKoS,SAAxB,EAAmCzI,WAAnC,EAAgD5L,UAAhD,EAA4D+U,YAA5D,CAZ1B;;AAAA;AAAA,sBAcQ,CAAC,KAAK1U,KAAL,CAAW8S,QAAX,CAAoBvH,WAApB,CAAD,IAAqC,CAACA,WAAW,CAACoJ,QAAlD,IAA8D,CAACpJ,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAd5F;AAAA;AAAA;AAAA;;AAAA,iDAc6G9G,QAAQ,CAAC,8BAAD,CAdrH;;AAAA;AAAA,sBAgBQ,CAAC0G,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAlC,IAAmDF,YAAY,GAAG,CAhB1E;AAAA;AAAA;AAAA;;AAiBQ;AACAnJ,2BAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAjC,GAAiDF,YAAjD,CAlBR,CAoBQ;;AACM7R,uBArBd,GAqBwB,KAAKtB,SAAL,CAAesB,OAAf,CAAuBI,KAAvB,CAA6B,KAAK1B,SAAL,CAAesB,OAAf,CAAuBC,cAAvB,CAAsCnD,UAAtC,CAA7B,EAAgF2F,WAAhF,EArBxB;AAAA;AAAA,uBAsBiC,KAAK/D,SAAL,CAAef,GAAf,CAAmBqU,aAAnB,CAAiCtJ,WAAjC,EAA8CmJ,YAA9C,CAtBjC;;AAAA;AAsBcI,0BAtBd;;AAAA,sBAwBYA,UAAU,CAACnO,MAAX,CAAkBzB,IAAlB,KAA2B,kBAxBvC;AAAA;AAAA;AAAA;;AAAA,iDAyBmBL,QAAQ,CAACiQ,UAAU,CAACnO,MAAX,CAAkBiF,OAAnB,CAzB3B;;AAAA;AA4BYmJ,wBA5BZ,GA4BuB,KA5BvB;AA6BQD,0BAAU,CAACE,UAAX,CAAsB/F,IAAtB,CAA2BP,GAA3B,CAA+B,UAAApN,GAAG,EAAI;AAClC,sBAAIA,GAAG,CAACuB,OAAJ,KAAgBA,OAApB,EAA6BkS,QAAQ,GAAG,IAAX;AAChC,iBAFD;;AA7BR,oBAiCaA,QAjCb;AAAA;AAAA;AAAA;;AAAA,iDAiC8BlQ,QAAQ,CAAClF,UAAU,GAAG,4BAAd,CAjCtC;;AAAA;AAAA,sBAmCYmV,UAAU,CAACG,aAAX,IAA4BH,UAAU,CAACG,aAAX,CAAyBC,OAAzB,CAAiCrS,OAAjC,KAA6C,CAAC,CAnCtF;AAAA;AAAA;AAAA;;AAAA,iDAoCmBgC,QAAQ,CAAClF,UAAU,GAAG,2BAAd,CApC3B;;AAAA;AAAA,sBAwCYmV,UAAU,CAACvJ,WAAX,IAA0BuJ,UAAU,CAACvJ,WAAX,CAAuBA,WAxC7D;AAAA;AAAA;AAAA;;AAyCYA,2BAAW,GAAGuJ,UAAU,CAACvJ,WAAX,CAAuBA,WAArC;AACAA,2BAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAjC,GAAiDF,YAAjD;AA1CZ;AAAA;;AAAA;AAAA,iDA4CmB7P,QAAQ,CAAC,8BAAD,CA5C3B;;AAAA;AAAA;AAAA,iDAiDeA,QAAQ,CAAC,IAAD,EAAO,KAAKsQ,eAAL,CAAqBxV,UAArB,EAAiC4L,WAAjC,CAAP,CAjDvB;;AAAA;AAAA;AAAA;AAmDQ1G,wBAAQ,aAAR;;AAnDR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;sLAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAW0G,2BAAX,8DAAyB,KAAzB;AAAgC5L,0BAAhC,8DAA6C,KAAK4B,SAAL,CAAeN,iBAA5D;AAA+EmU,6BAA/E,8DAA+F,IAA/F;AAAqGC,wBAArG,8DAAgH,KAAhH;AAAuHxQ,wBAAvH,8DAAkI,KAAlI;;AACI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB6Q,QAAtB,CAAJ,EAAqC;AACjCxQ,0BAAQ,GAAGwQ,QAAX;AACAA,0BAAQ,GAAG,KAAX;AACH;;AAED,oBAAI,KAAKrV,KAAL,CAAWwE,UAAX,CAAsB4Q,aAAtB,CAAJ,EAA0C;AACtCvQ,0BAAQ,GAAGuQ,aAAX;AACAA,+BAAa,GAAG,IAAhB;AACAC,0BAAQ,GAAG,KAAX;AACH;;AAED,oBAAI,KAAKrV,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4B,SAAL,CAAeN,iBAA5B;AACAmU,+BAAa,GAAG,IAAhB;AACAC,0BAAQ,GAAG,KAAX;AACH;;AAjBL,oBAmBSxQ,QAnBT;AAAA;AAAA;AAAA;;AAAA,kDAoBe,KAAKjD,aAAL,CAAmB,KAAK4J,IAAxB,EAA8BD,WAA9B,EAA2C5L,UAA3C,EAAuDyV,aAAvD,EAAsEC,QAAtE,CApBf;;AAAA;AAAA,qBAuBQ,KAAKrV,KAAL,CAAWC,QAAX,CAAoBsL,WAApB,CAvBR;AAAA;AAAA;AAAA;;AAAA,oBAyBa,KAAKvL,KAAL,CAAW+E,KAAX,CAAiBwG,WAAjB,CAzBb;AAAA;AAAA;AAAA;;AAAA,kDA0BmB1G,QAAQ,CAAC,4BAAD,CA1B3B;;AAAA;AAAA;AA6BkByQ,4BA7BlB,GA6BiC,KAAK/T,SAAL,CAAef,GAAf,CAAmB+U,UAAnB,CAA8BhK,WAA9B,EAA2C5L,UAA3C,EAAuDyV,aAAvD,CA7BjC;AAAA,kDA8BmBvQ,QAAQ,CAAC,IAAD,EAAOyQ,YAAP,CA9B3B;;AAAA;AAAA;AAAA;AAgCYzQ,wBAAQ,cAAR;;AAhCZ;AAAA,oBAoCS,KAAK7E,KAAL,CAAW8S,QAAX,CAAoBvH,WAApB,CApCT;AAAA;AAAA;AAAA;;AAAA,kDAqCe1G,QAAQ,CAAC,8BAAD,CArCvB;;AAAA;AAAA,sBAuCQ,CAACwQ,QAAD,IAAa9J,WAAW,CAACT,SAvCjC;AAAA;AAAA;AAAA;;AAAA,kDAwCejG,QAAQ,CAAC,+BAAD,CAxCvB;;AAAA;AAAA;;AAAA,oBA2CawQ,QA3Cb;AAAA;AAAA;AAAA;;AA4CkBxS,uBA5ClB,GA4C4B,KAAKtB,SAAL,CAAesB,OAAf,CAAuBI,KAAvB,CACZ,KAAK1B,SAAL,CAAesB,OAAf,CAAuBC,cAAvB,CAAsCnD,UAAtC,CADY,EAEd2F,WAFc,EA5C5B;;AAAA,sBA+CgBzC,OAAO,KAAK,KAAKtB,SAAL,CAAesB,OAAf,CAAuBI,KAAvB,CAA6BsI,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiC6J,SAAjC,CAA2CnO,KAA3C,CAAiDoO,aAA9E,CA/C5B;AAAA;AAAA;AAAA;;AAAA,kDAgDuB5Q,QAAQ,CAAC,mDAAD,CAhD/B;;AAAA;AAAA,kDAkDeA,QAAQ,CAAC,IAAD,EACX,KAAKsQ,eAAL,CAAqBxV,UAArB,EAAiC4L,WAAjC,CADW,CAlDvB;;AAAA;AAAA;AAAA;AAsDQ1G,wBAAQ,cAAR;;AAtDR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AA0DA;AACJ;AACA;;;;;4LACI,kBACI8I,SADJ,EAEI+H,UAFJ,EAGI/T,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,8DAIc,EAJd;AAKII,0BALJ,8DAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,8DAMe,KANf;;AAQI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAfL,oBAgBSsF,QAhBT;AAAA;AAAA;AAAA;;AAAA,kDAiBe,KAAKjD,aAAL,CAAmB,KAAK+T,UAAxB,EAAoChI,SAApC,EAA+C+H,UAA/C,EAA2D/T,QAA3D,EAAqEpC,OAArE,EAA8EI,UAA9E,CAjBf;;AAAA;AAAA,qBAmBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,WADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEsG,SAHX;AAIIkI,qBAAG,EAAE;AAJT,iBADwB,EAOxB;AACIjL,sBAAI,EAAE,YADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEqO,UAHX;AAIIG,qBAAG,EAAE;AAJT,iBAPwB,EAaxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAbwB,CAAxB,EAmBDhR,QAnBC,CAnBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyCItF,uBAAO;AACHoO,2BAAS,EAAEmI,MAAM,CAACnI,SAAD,CAAN,GAAoBmI,MAAM,CAACJ,UAAD,CADlC;AAEH/T,0BAAQ,EAARA;AAFG,mBAGApC,OAHA,CAAP;AAzCJ;AAAA;AAAA,uBA+CuC,KAAKgU,SAAL,CAAe5H,QAAf,GAA0BI,EAA1B,CAA6B,KAAKyH,kBAAlC,CA/CvC;;AAAA;AA+CcuC,gCA/Cd;AAAA;AAAA,uBAgD6BA,gBAAgB,CAACC,UAAjB,GAA8B7H,IAA9B,CAAmC5O,OAAnC,EAA4CI,UAA5C,CAhD7B;;AAAA;AAgDcgH,sBAhDd;AAAA,kDAiDe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAjDvB;;AAAA;AAAA;AAAA;AAAA,kDAmDe9B,QAAQ,cAnDvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4LAuDA,kBACIoR,OADJ,EAEIC,UAFJ,EAGIR,UAHJ,EAII/T,QAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKIpC,uBALJ,8DAKc,EALd;AAMII,0BANJ,8DAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ,8DAOe,KAPf;;AAQI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAfL,oBAgBSsF,QAhBT;AAAA;AAAA;AAAA;;AAAA,kDAiBe,KAAKjD,aAAL,CAAmB,KAAKuU,YAAxB,EAAsCF,OAAtC,EAA+CC,UAA/C,EAA2DR,UAA3D,EAAuE/T,QAAvE,EAAiFpC,OAAjF,EAA0FI,UAA1F,CAjBf;;AAAA;AAAA,qBAmBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,YADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE6O,UAHX;AAIIL,qBAAG,EAAE;AAJT,iBADwB,EAOxB;AACIjL,sBAAI,EAAE,YADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEqO,UAHX;AAIIG,qBAAG,EAAE;AAJT,iBAPwB,EAaxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAbwB,EAmBxB;AACIjL,sBAAI,EAAE,SADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE4O,OAHX;AAIIJ,qBAAG,EAAE;AAJT,iBAnBwB,CAAxB,EAyBDhR,QAzBC,CAnBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA+CItF,uBAAO;AACH0W,yBAAO,EAAPA,OADG;AAEHC,4BAAU,EAAVA,UAFG;AAGHvU,0BAAQ,EAARA;AAHG,mBAIApC,OAJA;AAKHoO,2BAAS,EAAE+H;AALR,kBAAP;AA/CJ;AAAA;AAAA,uBAuDuC,KAAKnC,SAAL,CAAe5H,QAAf,GAA0BI,EAA1B,CAA6B,KAAKyH,kBAAlC,CAvDvC;;AAAA;AAuDcuC,gCAvDd;AAAA;AAAA,uBAwD6BA,gBAAgB,CAACK,YAAjB,CAA8BH,OAA9B,EAAuCC,UAAvC,EAAmD/H,IAAnD,CAAwD5O,OAAxD,EAAiEI,UAAjE,CAxD7B;;AAAA;AAwDcgH,sBAxDd;AAyDQ9B,wBAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AAzDR;AAAA;;AAAA;AAAA;AAAA;AAAA,kDA2De9B,QAAQ,cA3DvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LA+DA,kBACIgG,gBADJ,EAEIwL,GAFJ,EAGIC,GAHJ,EAII3U,QAJJ,EAKIsK,eALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMI1M,uBANJ,8DAMc,EANd;AAOII,0BAPJ,8DAOiB,KAAK4T,SAAL,CAAetS,iBAPhC;AAQI4D,wBARJ,8DAQe,KARf;;AAUI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAjBL,oBAkBSsF,QAlBT;AAAA;AAAA;AAAA;;AAAA,kDAmBe,KAAKjD,aAAL,CAAmB,KAAK2U,UAAxB,EAAoC1L,gBAApC,EAAsDwL,GAAtD,EAA2DC,GAA3D,EAAgE3U,QAAhE,EAA0EsK,eAA1E,EAA2F1M,OAA3F,EAAoGI,UAApG,CAnBf;;AAAA;AAAA,qBAqBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,kBADV;AAEIN,sBAAI,EAAE,kBAFV;AAGIjD,uBAAK,EAAEwD;AAHX,iBADwB,EAMxB;AACID,sBAAI,EAAE,KADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEgP,GAHX;AAIIR,qBAAG,EAAE;AAJT,iBANwB,EAYxB;AACIjL,sBAAI,EAAE,KADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEiP,GAHX;AAIIT,qBAAG,EAAE;AAJT,iBAZwB,EAkBxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAlBwB,EAwBxB;AACIjL,sBAAI,EAAE,iBADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE4E;AAHX,iBAxBwB,CAAxB,EA6BDpH,QA7BC,CArBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAqDItF,uBAAO;AACHoC,0BAAQ,EAARA;AADG,mBAEApC,OAFA;AAGHoO,2BAAS,EAAE2I,GAHR;AAIHL,yBAAO,EAAE,EAJN;AAKHC,4BAAU,EAAE;AALT,kBAAP;AArDJ;AA6DYvP,sBA7DZ,GA6DqB,IA7DrB;;AAAA,sBA8DYkE,gBAAgB,KAAK,SA9DjC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA+D0C,KAAK0I,SAAL,CAAe5H,QAAf,GAA0BI,EAA1B,CAA6BE,eAA7B,CA/D1C;;AAAA;AA+DkBuK,+BA/DlB;AAAA;AAAA,uBAgE2BA,eAAe,CAACC,OAAhB,CAAwB,KAAKjD,kBAA7B,EAAiD6C,GAAjD,EAAsDlI,IAAtD,CAA2D5O,OAA3D,EAAoEI,UAApE,CAhE3B;;AAAA;AAgEYgH,sBAhEZ;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAkE2C,KAAK4M,SAAL,CAAe5H,QAAf,GAA0BI,EAA1B,CAA6B,KAAKyH,kBAAlC,CAlE3C;;AAAA;AAkEkBuC,gCAlElB;AAAA,+BAmEoBlL,gBAnEpB;AAAA,kDAoEqB,cApErB,yBAuEqB,eAvErB,yBA0EqB,cA1ErB,yBA6EqB,cA7ErB;AAAA;;AAAA;AAAA;AAAA,uBAqEmCkL,gBAAgB,CAACW,YAAjB,CAA8BzK,eAA9B,EAA+CoK,GAA/C,EAAoDlI,IAApD,CAAyD5O,OAAzD,EAAkEI,UAAlE,CArEnC;;AAAA;AAqEoBgH,sBArEpB;AAAA;;AAAA;AAAA;AAAA,uBAwEmCoP,gBAAgB,CAACY,aAAjB,CAA+B1K,eAA/B,EAAgDoK,GAAhD,EAAqDlI,IAArD,CAA0D5O,OAA1D,EAAmEI,UAAnE,CAxEnC;;AAAA;AAwEoBgH,sBAxEpB;AAAA;;AAAA;AAAA;AAAA,uBA2EmCoP,gBAAgB,CAACa,YAAjB,CAA8BP,GAA9B,EAAmClI,IAAnC,CAAwC5O,OAAxC,EAAiDI,UAAjD,CA3EnC;;AAAA;AA2EoBgH,sBA3EpB;AAAA;;AAAA;AAAA;AAAA,uBA8EmCoP,gBAAgB,CAACc,YAAjB,CAA8BR,GAA9B,EAAmClI,IAAnC,CAAwC5O,OAAxC,EAAiDI,UAAjD,CA9EnC;;AAAA;AA8EoBgH,sBA9EpB;AAAA;;AAAA;AAAA;;AAAA;AAoFQ9B,wBAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AApFR;AAAA;;AAAA;AAAA;AAAA;AAAA,kDAsFe9B,QAAQ,cAtFvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4LA0FA,kBACIwR,GADJ,EAEI1U,QAFJ,EAGIsK,eAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII1M,uBAJJ,8DAIc,EAJd;AAKII,0BALJ,8DAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,8DAMe,KANf;AAQUgG,gCARV,GAQ6B,SAR7B;AAAA,kDASW,KAAK0L,UAAL,CACH1L,gBADG,EAEHwL,GAFG,EAGH,CAHG,EAIH1U,QAJG,EAKHsK,eALG,EAMH1M,OANG,EAOHI,UAPG,EAQHkF,QARG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LAqBA,kBACIiS,EADJ,EAEInV,QAFJ,EAGIsK,eAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAII1M,uBAJJ,8DAIc,EAJd;AAKII,0BALJ,8DAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,8DAMe,KANf;AAQUgG,gCARV,GAQ6B,SAR7B;AAAA,kDASW,KAAK0L,UAAL,CACH1L,gBADG,EAEHiM,EAFG,EAGH,CAHG,EAIHnV,QAJG,EAKHsK,eALG,EAMH1M,OANG,EAOHI,UAPG,EAQHkF,QARG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LAqBA,kBACIwR,GADJ,EAEIX,UAFJ,EAGI/T,QAHJ,EAIIsK,eAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI1M,uBALJ,8DAKc,EALd;AAMII,0BANJ,8DAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ,8DAOe,KAPf;AASUgG,gCATV,GAS6B,cAT7B;AAAA,kDAUW,KAAK0L,UAAL,CACH1L,gBADG,EAEHwL,GAFG,EAGHX,UAHG,EAIH/T,QAJG,EAKHsK,eALG,EAMH1M,OANG,EAOHI,UAPG,EAQHkF,QARG,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LAsBA,kBACIiS,EADJ,EAEIpB,UAFJ,EAGI/T,QAHJ,EAIIsK,eAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI1M,uBALJ,8DAKc,EALd;AAMII,0BANJ,8DAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ,8DAOe,KAPf;AASUgG,gCATV,GAS6B,eAT7B;AAAA,kDAUW,KAAK0L,UAAL,CACH1L,gBADG,EAEHiM,EAFG,EAGHpB,UAHG,EAIH/T,QAJG,EAKHsK,eALG,EAMH1M,OANG,EAOHI,UAPG,EAQHkF,QARG,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAsBA;AACJ;AACA;;;;;4LACI,mBACIkS,OADJ,EAEIC,UAFJ,EAGIrV,QAHJ,EAIIkJ,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKItL,uBALJ,iEAKc,EALd;AAMII,0BANJ,iEAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ;;AASI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAhBL,oBAiBSsF,QAjBT;AAAA;AAAA;AAAA;;AAAA,mDAkBe,KAAKjD,aAAL,CAAmB,KAAKqV,UAAxB,EAAoCF,OAApC,EAA6CC,UAA7C,EAAyDrV,QAAzD,EAAmEkJ,gBAAnE,EAAqFtL,OAArF,EAA8FI,UAA9F,CAlBf;;AAAA;AAAA,qBAoBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,SADV;AAEIN,sBAAI,EAAE,kBAFV;AAGIjD,uBAAK,EAAE0P;AAHX,iBADwB,EAMxB;AACInM,sBAAI,EAAE,YADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE2P,UAHX;AAIInB,qBAAG,EAAE;AAJT,iBANwB,EAYxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAZwB,CAAxB,EAkBDhR,QAlBC,CApBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyCIkS,uBAAO,GAAGA,OAAO,CAACG,UAAR,CAAmB,IAAnB,IAA2BH,OAA3B,GAAsC,OAAOA,OAAvD;AACAxX,uBAAO;AACHoC,0BAAQ,EAARA;AADG,mBAEApC,OAFA;AAGHoO,2BAAS,EAAEqJ;AAHR,kBAAP;AA1CJ;AAAA;AAAA,uBAgDuC,KAAKzD,SAAL,CAAe5H,QAAf,GAA0BI,EAA1B,CAA6B,KAAKyH,kBAAlC,CAhDvC;;AAAA;AAgDcuC,gCAhDd;AAiDYpP,sBAjDZ,GAiDqB,IAjDrB;;AAAA,sBAkDYkE,gBAAgB,KAAK,cAlDjC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAmD2BkL,gBAAgB,CAACoB,YAAjB,CAA8BJ,OAA9B,EAAuC5I,IAAvC,CAA4C5O,OAA5C,EAAqDI,UAArD,CAnD3B;;AAAA;AAmDYgH,sBAnDZ;AAAA;AAAA;;AAAA;AAAA,sBAoDmBkE,gBAAgB,KAAK,eApDxC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqD2BkL,gBAAgB,CAACqB,aAAjB,CAA+BL,OAA/B,EAAwC5I,IAAxC,CAA6C5O,OAA7C,EAAsDI,UAAtD,CArD3B;;AAAA;AAqDYgH,sBArDZ;AAAA;AAAA;;AAAA;AAuDY9B,wBAAQ,CAAC,IAAIpC,KAAJ,CAAU,8BAAV,CAAD,CAAR;;AAvDZ;AAyDQoC,wBAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AAzDR;AAAA;;AAAA;AAAA;AAAA;AAAA,mDA2De9B,QAAQ,eA3DvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LA+DA,mBACIkS,OADJ,EAEIC,UAFJ,EAGIrV,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,iEAIc,EAJd;AAKII,0BALJ,iEAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,iEAMe,KANf;AAQUgG,gCARV,GAQ6B,cAR7B;AAAA,mDASW,KAAKoM,UAAL,CACHF,OADG,EAEHC,UAFG,EAGHrV,QAHG,EAIHkJ,gBAJG,EAKHtL,OALG,EAMHI,UANG,EAOHkF,QAPG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LAmBA,mBACIkS,OADJ,EAEIC,UAFJ,EAGIrV,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,iEAIc,EAJd;AAKII,0BALJ,iEAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,iEAMe,KANf;AAQUgG,gCARV,GAQ6B,eAR7B;AAAA,mDASW,KAAKoM,UAAL,CACHF,OADG,EAEHC,UAFG,EAGHrV,QAHG,EAIHkJ,gBAJG,EAKHtL,OALG,EAMHI,UANG,EAOHkF,QAPG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAmBA;AACJ;AACA;;;;;6LACI,mBACI8I,SADJ,EAEI0J,WAFJ,EAGI1V,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,iEAIc,EAJd;AAKII,0BALJ,iEAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,iEAMe,KANf;;AAQI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAfL,oBAgBSsF,QAhBT;AAAA;AAAA;AAAA;;AAAA,mDAiBe,KAAKjD,aAAL,CAAmB,KAAK0V,WAAxB,EAAqC3J,SAArC,EAAgD0J,WAAhD,EAA6D1V,QAA7D,EAAuEpC,OAAvE,EAAgFI,UAAhF,CAjBf;;AAAA;AAAA,qBAmBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,WADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEsG,SAHX;AAIIkI,qBAAG,EAAE;AAJT,iBADwB,EAOxB;AACIjL,sBAAI,EAAE,aADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEgQ,WAHX;AAIIxB,qBAAG,EAAE;AAJT,iBAPwB,EAaxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAbwB,CAAxB,EAmBDhR,QAnBC,CAnBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyCItF,uBAAO;AACHoO,2BAAS,EAAEmI,MAAM,CAACnI,SAAD,CAAN,GAAoBmI,MAAM,CAACuB,WAAD,CADlC;AAEH1V,0BAAQ,EAARA;AAFG,mBAGApC,OAHA,CAAP;AAzCJ;AAAA;AAAA,uBA+CuC,KAAKgC,SAAL,CAAeoK,QAAf,GAA0BI,EAA1B,CAA6B,KAAK0H,kBAAlC,CA/CvC;;AAAA;AA+CcsC,gCA/Cd;AAAA;AAAA,uBAgD6BA,gBAAgB,CAACwB,WAAjB,GAA+BpJ,IAA/B,CAAoC5O,OAApC,EAA6CI,UAA7C,CAhD7B;;AAAA;AAgDcgH,sBAhDd;AAAA,mDAiDe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAjDvB;;AAAA;AAAA;AAAA;AAAA,mDAmDe9B,QAAQ,eAnDvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6LAuDA,mBACIoR,OADJ,EAEIC,UAFJ,EAGImB,WAHJ,EAII1V,QAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKIpC,uBALJ,iEAKc,EALd;AAMII,0BANJ,iEAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ,iEAOe,KAPf;;AASI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAhBL,oBAiBSsF,QAjBT;AAAA;AAAA;AAAA;;AAAA,mDAkBe,KAAKjD,aAAL,CAAmB,KAAK4V,aAAxB,EAAuCvB,OAAvC,EAAgDC,UAAhD,EAA4DmB,WAA5D,EAAyE1V,QAAzE,EAAmFpC,OAAnF,EAA4FI,UAA5F,CAlBf;;AAAA;AAAA,qBAoBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,SADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE4O,OAHX;AAIIJ,qBAAG,EAAE;AAJT,iBADwB,EAOxB;AACIjL,sBAAI,EAAE,YADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE6O,UAHX;AAIIL,qBAAG,EAAE;AAJT,iBAPwB,EAaxB;AACIjL,sBAAI,EAAE,aADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEgQ,WAHX;AAIIxB,qBAAG,EAAE;AAJT,iBAbwB,EAmBxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAnBwB,CAAxB,EAyBDhR,QAzBC,CApBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgDItF,uBAAO;AACH2W,4BAAU,EAAVA,UADG;AAEHD,yBAAO,EAAPA,OAFG;AAGHtI,2BAAS,EAAE0J,WAHR;AAIH1V,0BAAQ,EAARA;AAJG,mBAKApC,OALA,CAAP;AAhDJ;AAAA;AAAA,uBAwDuC,KAAKgC,SAAL,CAAeoK,QAAf,GAA0BI,EAA1B,CAA6B,KAAK0H,kBAAlC,CAxDvC;;AAAA;AAwDcsC,gCAxDd;AAAA;AAAA,uBAyD6BA,gBAAgB,CAAC0B,aAAjB,CAA+BxB,OAA/B,EAAwCC,UAAxC,EAAoD/H,IAApD,CAAyD5O,OAAzD,EAAkEI,UAAlE,CAzD7B;;AAAA;AAyDcgH,sBAzDd;AAAA,mDA0De9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CA1DvB;;AAAA;AAAA;AAAA;AAAA,mDA4De9B,QAAQ,eA5DvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8LAgEA,mBACIgG,gBADJ,EAEI6M,OAFJ,EAGIL,WAHJ,EAII1V,QAJJ,EAKIsK,eALJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMI1M,uBANJ,iEAMc,EANd;AAOII,0BAPJ,iEAOiB,KAAK4T,SAAL,CAAetS,iBAPhC;AAQI4D,wBARJ,iEAQe,KARf;;AAUI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AACD,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAjBL,oBAkBSsF,QAlBT;AAAA;AAAA;AAAA;;AAAA,mDAmBe,KAAKjD,aAAL,CAAmB,KAAK+V,WAAxB,EAAqC9M,gBAArC,EAAuD6M,OAAvD,EAAgEL,WAAhE,EAA6E1V,QAA7E,EAAuFsK,eAAvF,EAAwG1M,OAAxG,EAAiHI,UAAjH,CAnBf;;AAAA;AAAA,qBAqBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,kBADV;AAEIN,sBAAI,EAAE,kBAFV;AAGIjD,uBAAK,EAAEwD;AAHX,iBADwB,EAMxB;AACID,sBAAI,EAAE,SADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEqQ,OAHX;AAII7B,qBAAG,EAAE;AAJT,iBANwB,EAYxB;AACIjL,sBAAI,EAAE,aADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEgQ,WAHX;AAIIxB,qBAAG,EAAE;AAJT,iBAZwB,EAkBxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAlBwB,EAwBxB;AACIjL,sBAAI,EAAE,iBADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE4E;AAHX,iBAxBwB,CAAxB,EA6BDpH,QA7BC,CArBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAqDItF,uBAAO;AACHoC,0BAAQ,EAARA;AADG,mBAEApC,OAFA;AAGHoO,2BAAS,EAAE0J;AAHR,kBAAP;AAKM5I,0BA1DV,GA0DuB,CACf;AACInE,sBAAI,EAAE,SADV;AAEIjD,uBAAK,EAAEqQ;AAFX,iBADe,CA1DvB;AAAA;AAkEc7U,uBAlEd,GAkEwBlD,UAAU,GAAG,KAAK4B,SAAL,CAAesB,OAAf,CAAuBC,cAAvB,CAAsCnD,UAAtC,CAAH,GAAuD,KAAK4B,SAAL,CAAeL,cAAf,CAA8BE,MAlEvH;AAAA;AAAA,uBAmEkC,KAAKG,SAAL,CAAejB,kBAAf,CAAkCqO,oBAAlC,CACtB1C,eADsB,EAEtBpB,gBAFsB,EAGtBtL,OAHsB,EAItBkP,UAJsB,EAKtB,KAAKlN,SAAL,CAAesB,OAAf,CAAuBI,KAAvB,CAA6BJ,OAA7B,CALsB,CAnElC;;AAAA;AAmEc0I,2BAnEd;;AAAA,sBA0EY,CAACA,WAAW,CAAC5E,MAAb,IAAuB,CAAC4E,WAAW,CAAC5E,MAAZ,CAAmBA,MA1EvD;AAAA;AAAA;AAAA;;AAAA,mDA2EmB9B,QAAQ,CAAC,oBAAoB0B,IAAI,CAACC,SAAL,CAAe+E,WAAW,CAACA,WAA3B,EAAwC,IAAxC,EAA8C,CAA9C,CAArB,CA3E3B;;AAAA;AAAA;AAAA,uBA8EwC,KAAKhK,SAAL,CAAef,GAAf,CAAmBgL,IAAnB,CAAwBD,WAAW,CAACA,WAApC,EAAiD5L,UAAjD,CA9ExC;;AAAA;AA8Ec8L,iCA9Ed;;AAAA,oBAgFaA,iBAAiB,CAACX,SAhF/B;AAAA;AAAA;AAAA;;AAAA,oBAiFiBnL,UAjFjB;AAAA;AAAA;AAAA;;AAAA,mDAkFuBkF,QAAQ,CAAC,qCAAD,CAlF/B;;AAAA;AAAA,mDAoFmBA,QAAQ,CAAC,8BAAD,CApF3B;;AAAA;AAAA;AAAA,uBAuFgC,KAAKtD,SAAL,CAAef,GAAf,CAAmBkL,kBAAnB,CAAsCD,iBAAtC,CAvFhC;;AAAA;AAuFc0D,yBAvFd;;AAAA,qBAwFYA,SAAS,CAACjK,IAxFtB;AAAA;AAAA;AAAA;;AAyFkB4C,mBAzFlB,GAyFwB;AACRkC,uBAAK,EAAEmF,SAAS,CAACjK,IADT;AAER0G,yBAAO,EAAEuD,SAAS,CAACjK;AAFX,iBAzFxB;AA6FY,oBAAIiK,SAAS,CAACvD,OAAd,EACI9D,GAAG,CAAC8D,OAAJ,GAAc,KAAKrK,SAAL,CAAesK,MAAf,CAAsBsD,SAAS,CAACvD,OAAhC,CAAd;AA9FhB,mDA+FmB/G,QAAQ,CAACiD,GAAD,CA/F3B;;AAAA;AAAA,oBAkGavI,OAAO,CAACsO,kBAlGrB;AAAA;AAAA;AAAA;;AAAA,mDAmGmBhJ,QAAQ,CAAC,IAAD,EAAO4G,iBAAiB,CAAC2D,IAAzB,CAnG3B;;AAAA;AAqGcC,2BArGd;AAAA,iMAqG4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOhG,iCAAP,iEAAe,CAAf;;AAAA,kCACZA,KAAK,IAAI,EADG;AAAA;AAAA;AAAA;;AAAA,+DAELxE,QAAQ,CAAC;AACZmF,mCAAK,EAAE,qCADK;AAEZuB,yCAAW,EAAEE;AAFD,6BAAD,CAFH;;AAAA;AAAA;AAAA,mCAQK,KAAI,CAAClK,SAAL,CAAef,GAAf,CAAmB8O,kBAAnB,CAAsC7D,iBAAiB,CAAC2D,IAAxD,CARL;;AAAA;AAQV/B,kCARU;;AAAA,gCAUX9J,MAAM,CAAC0L,IAAP,CAAY5B,MAAZ,EAAoBhL,MAVT;AAAA;AAAA;AAAA;;AAAA,+DAWLkN,UAAU,CAAC,YAAM;AACpBF,yCAAW,CAAChG,KAAK,GAAG,CAAT,CAAX;AACH,6BAFgB,EAEd,IAFc,CAXL;;AAAA;AAAA,kCAgBZgE,MAAM,CAAC1G,MAAP,IAAiB0G,MAAM,CAAC1G,MAAP,IAAiB,QAhBtB;AAAA;AAAA;AAAA;;AAAA,+DAiBL9B,QAAQ,CAAC;AACZmF,mCAAK,EAAE,KAAI,CAACzI,SAAL,CAAesK,MAAf,CAAsBwB,MAAM,CAACmC,UAA7B,CADK;AAEZjE,yCAAW,EAAEE,iBAFD;AAGZ4B,oCAAM,EAANA;AAHY,6BAAD,CAjBH;;AAAA;AAAA,gCAwBX,KAAI,CAACrN,KAAL,CAAW+K,WAAX,CAAuBsC,MAAvB,EAA+B,gBAA/B,CAxBW;AAAA;AAAA;AAAA;;AAAA,+DAyBLxI,QAAQ,CAAC;AACZmF,mCAAK,EAAE,wBAAwBzD,IAAI,CAACC,SAAL,CAAe6G,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CADnB;AAEZ9B,yCAAW,EAAEE,iBAFD;AAGZ4B,oCAAM,EAANA;AAHY,6BAAD,CAzBH;;AAAA;AAAA,iCAgCZ9N,OAAO,CAACkQ,WAhCI;AAAA;AAAA;AAAA;;AAAA,+DAiCL5K,QAAQ,CAAC,IAAD,EAAOwI,MAAP,CAjCH;;AAAA;AAmCZqC,mCAnCY,GAmCFtC,YAAY,CAAC,KAAI,CAACI,OAAN,EAAe,OAAOH,MAAM,CAACsC,cAAP,CAAsB,CAAtB,CAAtB,CAnCV;AAqChB,gCAAID,OAAO,CAACrN,MAAR,KAAmB,CAAvB,EACIqN,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AAtCY,+DAwCT7K,QAAQ,CAAC,IAAD,EAAO6K,OAAP,CAxCC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBArG5B;;AAAA,kCAqGcL,WArGd;AAAA;AAAA;AAAA;;AAgJQA,2BAAW;AAhJnB;AAAA;;AAAA;AAAA;AAAA;AAAA,mDAkJexK,QAAQ,eAlJvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8LAsJA,mBACIwR,GADJ,EAEIgB,WAFJ,EAGI1V,QAHJ,EAIIsK,eAJJ,EAKI1M,OALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMII,0BANJ,iEAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ,iEAOe,KAPf;AASUgG,gCATV,GAS6B,qBAT7B;AAAA,mDAUW,KAAK8M,WAAL,CACH9M,gBADG,EAEHwL,GAFG,EAGHgB,WAHG,EAIH1V,QAJG,EAKHsK,eALG,EAMH1M,OANG,EAOHI,UAPG,EAQHkF,QARG,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8LAqBA,mBACIiS,EADJ,EAEIO,WAFJ,EAGI1V,QAHJ,EAIIsK,eAJJ,EAKI1M,OALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMII,0BANJ,iEAMiB,KAAK4T,SAAL,CAAetS,iBANhC;AAOI4D,wBAPJ,iEAOe,KAPf;AASUgG,gCATV,GAS6B,qBAT7B;AAAA,mDAUW,KAAK8M,WAAL,CACH9M,gBADG,EAEHiM,EAFG,EAGHO,WAHG,EAIH1V,QAJG,EAKHsK,eALG,EAMH1M,OANG,EAOHI,UAPG,EAQHkF,QARG,CAVX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4LAsBA,mBACIwR,GADJ,EAEI1U,QAFJ,EAGIpC,OAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIII,0BAJJ,iEAIiB,KAAK4T,SAAL,CAAetS,iBAJhC;AAKI4D,wBALJ,iEAKe,KALf;;AAOI,oBAAI,KAAK7E,KAAL,CAAWwE,UAAX,CAAsB7E,UAAtB,CAAJ,EAAuC;AACnCkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAK4T,SAAL,CAAetS,iBAA5B;AACH;;AAED,oBAAI,KAAKjB,KAAL,CAAWwE,UAAX,CAAsBjF,OAAtB,CAAJ,EAAoC;AAChCsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAfL,oBAgBSsF,QAhBT;AAAA;AAAA;AAAA;;AAAA,mDAiBe,KAAKjD,aAAL,CAAmB,KAAKgW,UAAxB,EAAoCvB,GAApC,EAAyC1U,QAAzC,EAAmDpC,OAAnD,EAA4DI,UAA5D,CAjBf;;AAAA;AAAA,qBAmBQ,KAAKmU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,KADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAEgP,GAHX;AAIIR,qBAAG,EAAE;AAJT,iBADwB,EAOxB;AACIjL,sBAAI,EAAE,UADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAE1F,QAHX;AAIIkU,qBAAG,EAAE;AAJT,iBAPwB,CAAxB,EAaDhR,QAbC,CAnBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAqCchC,uBArCd,GAqCwB,KAAKtB,SAAL,CAAesB,OAAf,CAAuBC,cAAvB,CAAsCnD,UAAtC,CArCxB;AAsCckY,0BAtCd,GAsC2B,KAAKtW,SAAL,CAAesB,OAAf,CAAuBI,KAAvB,CAA6BJ,OAA7B,CAtC3B;AAAA;AAAA,uBAuCkC,KAAKtB,SAAL,CAAe3B,QAAf,CAAwB8Q,OAAxB,CAAgC,oBAAhC,EAAsD;AAC5E+E,+BAAa,EAAEoC,UAD6D;AAE5EhQ,wBAAM,EAAEwO;AAFoE,iBAAtD,EAGvB,MAHuB,CAvClC;;AAAA;AAuCc9K,2BAvCd;AAAA;AAAA,uBA4CwC,KAAKhK,SAAL,CAAef,GAAf,CAAmBgL,IAAnB,CAAwBD,WAAxB,EAAqC5L,UAArC,CA5CxC;;AAAA;AA4Cc8L,iCA5Cd;;AAAA,oBA8CaA,iBAAiB,CAACX,SA9C/B;AAAA;AAAA;AAAA;;AAAA,oBA+CiBnL,UA/CjB;AAAA;AAAA;AAAA;;AAAA,mDAgDuBkF,QAAQ,CAAC,qCAAD,CAhD/B;;AAAA;AAAA,mDAkDmBA,QAAQ,CAAC,8BAAD,CAlD3B;;AAAA;AAAA;AAAA,uBAqDgC,KAAKtD,SAAL,CAAef,GAAf,CAAmBkL,kBAAnB,CAAsCD,iBAAtC,CArDhC;;AAAA;AAqDc0D,yBArDd;;AAAA,qBAsDYA,SAAS,CAACjK,IAtDtB;AAAA;AAAA;AAAA;;AAuDkB4C,mBAvDlB,GAuDwB;AACRkC,uBAAK,EAAEmF,SAAS,CAACjK,IADT;AAER0G,yBAAO,EAAEuD,SAAS,CAACjK;AAFX,iBAvDxB;AA2DY,oBAAIiK,SAAS,CAACvD,OAAd,EACI9D,GAAG,CAAC8D,OAAJ,GAAc,KAAK2H,SAAL,CAAe1H,MAAf,CAAsBsD,SAAS,CAACvD,OAAhC,CAAd;AA5DhB,mDA6DmB/G,QAAQ,CAACiD,GAAD,CA7D3B;;AAAA;AAAA,mDA+DejD,QAAQ,CAAC,IAAD,EAAO4G,iBAAiB,CAAC2D,IAAzB,CA/DvB;;AAAA;AAAA;AAAA;AAAA,mDAiEevK,QAAQ,eAjEvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+LAqEA,mBACIiT,KADJ,EAEIC,gBAFJ,EAGIpW,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,iEAIc,EAJd;AAKII,0BALJ,iEAKiB,KAAK4B,SAAL,CAAeN,iBALhC;AAMI4D,wBANJ,iEAMe,KANf;AAQUgG,gCARV,GAQ6B,wBAR7B;AAAA,mDASW,KAAK8M,WAAL,CACH9M,gBADG,EAEHiN,KAFG,EAGHC,gBAHG,EAIHpW,QAJG,EAKH,KAAK8R,kBALF,EAMHlU,OANG,EAOHI,UAPG,EAQHkF,QARG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8LAqBA,mBACIiT,KADJ,EAEIE,eAFJ,EAGIrW,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,iEAIc,EAJd;AAKII,0BALJ,iEAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,iEAMe,KANf;AAQUgG,gCARV,GAQ6B,cAR7B;AAAA,mDASW,KAAK0L,UAAL,CACH1L,gBADG,EAEHiN,KAFG,EAGHE,eAHG,EAIHrW,QAJG,EAKH,KAAK6R,kBALF,EAMHjU,OANG,EAOHI,UAPG,EAQHkF,QARG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8LAqBA,mBACIiT,KADJ,EAEIG,eAFJ,EAGItW,QAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIIpC,uBAJJ,iEAIc,EAJd;AAKII,0BALJ,iEAKiB,KAAK4T,SAAL,CAAetS,iBALhC;AAMI4D,wBANJ,iEAMe,KANf;AAQUgG,gCARV,GAQ6B,cAR7B;AAAA,mDASW,KAAK0L,UAAL,CACH1L,gBADG,EAEHiN,KAFG,EAGHG,eAHG,EAIHtW,QAJG,EAKH,KAAK6R,kBALF,EAMHjU,OANG,EAOHI,UAPG,EAQHkF,QARG,CATX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACz+BJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIuH,IAAJ,C,CAEA;;AAEA,SAASnJ,KAAT,CAAeoE,KAAf,EAAsB;AAClB,SAAO/H,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsBoE,KAAtB,CAAP;AACH;;AAED,SAASf,QAAT,CAAkBe,KAAlB,EAAyB;AACrB,SAAO+E,IAAI,CAAChE,OAAL,CAAa9B,QAAb,CAAsBe,KAAtB,CAAP;AACH;;AAED,SAAS6Q,aAAT,CAAuB3M,WAAvB,EAAoC1G,QAApC,EAA8C;AAC1C,MAAI0G,WAAW,CAAC9I,KAAhB,EACI,OAAOoC,QAAQ,CAAC0G,WAAW,CAAC9I,KAAb,CAAf;;AAEJ,MAAI8I,WAAW,CAAC5E,MAAZ,IAAsB4E,WAAW,CAAC5E,MAAZ,CAAmBiF,OAA7C,EAAsD;AAClD,WAAO/G,QAAQ,CACXuH,IAAI,CAAChE,OAAL,CAAayD,MAAb,CAAoBN,WAAW,CAAC5E,MAAZ,CAAmBiF,OAAvC,CADW,CAAf;AAGH;;AAED,SAAO/G,QAAQ,CAAC,IAAD,EAAO0G,WAAP,CAAf;AACH;;IAGoBhL,kB;AACjB,gCAA6B;AAAA,QAAjB6H,OAAiB,uEAAP,KAAO;;AAAA;;AACzB,QAAI,CAACA,OAAD,IAAY,CAACA,OAAD,YAAoB9I,6CAApC,EACI,MAAM,IAAImD,KAAJ,CAAU,8BAAV,CAAN;AACJ2J,QAAI,GAAG,IAAP;AACA,SAAKhE,OAAL,GAAeA,OAAf;AACA,SAAKxG,aAAL,GAAqBC,qDAAa,CAAC,IAAD,CAAlC;AACA,SAAKiS,SAAL,GAAiB,IAAIC,uDAAJ,CAAc3L,OAAd,CAAjB;AACH;;;;WAED,mBAAmG;AAAA,UAA3F+P,EAA2F,uEAAtF,KAAsF;AAAA,UAA/EtQ,MAA+E,uEAAtE,CAAsE;AAAA,UAAnE9B,IAAmE,uEAA5D,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC/F,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBuB,IAAjB,CAAJ,EAA4B;AACxBlB,gBAAQ,GAAGkB,IAAX;AACAA,YAAI,GAAG,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC,GAAnC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe/M,IAAf,CAAJ,EAA0B;AAC7BxG,eAAO,GAAGwG,IAAV;AACAA,YAAI,GAAG,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC,GAAnC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKwW,OAAxB,EAAiCD,EAAjC,EAAqCtQ,MAArC,EAA6C9B,IAA7C,EAAmDxG,OAAnD,CAAP,CAf2F,CAiB/F;;AACAsI,YAAM,GAAGd,QAAQ,CAACc,MAAD,CAAjB;AAEA,UAAI,KAAKiM,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE8Q;AAHX,OADwB,EAMxB;AACIvN,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEtB;AAHX,OANwB,EAWxB;AACIsS,aAAK,EAAE,CAAC,WAAD,EAAc,QAAd,CADX;AAEI/N,YAAI,EAAE,UAFV;AAGIwE,WAAG,EAAE;AAHT,OAXwB,EAgBxB;AACIlE,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIgO,UAAE,EAAE,CAHR;AAIIjR,aAAK,EAAEQ;AAJX,OAhBwB,CAAxB,EAsBDhD,QAtBC,CAAJ,EAuBI;AAEJ,UAAMoG,IAAI,GAAG;AACTsN,kBAAU,EAAEtV,KAAK,CAACkV,EAAD,CADR;AAET1C,qBAAa,EAAExS,KAAK,CAAC8C,IAAD,CAFX;AAGT8B,cAAM,EAAEA;AAHC,OAAb;;AAMA,UAAItI,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,0BAA9B,EAA0DzF,IAA1D,EAAgE,MAAhE,EAAwEnB,IAAxE,CAA6E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAxF,WAAwI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA3I;AACH;;;WAED,qBAAsH;AAAA,UAA5GqQ,EAA4G,uEAAvG,KAAuG;AAAA,UAAhGtQ,MAAgG,uEAAvF,CAAuF;AAAA,UAApF2Q,OAAoF,uEAA1E,KAA0E;AAAA,UAAnEzS,IAAmE,uEAA5D,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAClH,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBuB,IAAjB,CAAJ,EAA4B;AACxBlB,gBAAQ,GAAGkB,IAAX;AACAA,YAAI,GAAG,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC,GAAnC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe/M,IAAf,CAAJ,EAA0B;AAC7BxG,eAAO,GAAGwG,IAAV;AACAA,YAAI,GAAG,KAAKqC,OAAL,CAAalH,cAAb,CAA4BC,GAAnC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6W,SAAxB,EAAmCN,EAAnC,EAAuCtQ,MAAvC,EAA+C2Q,OAA/C,EAAwDzS,IAAxD,EAA8DxG,OAA9D,CAAP;AAEJsI,YAAM,GAAGd,QAAQ,CAACc,MAAD,CAAjB;AACA,UAAI,KAAKiM,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE8Q;AAHX,OADwB,EAMxB;AACIvN,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEtB;AAHX,OANwB,EAWxB;AACIsS,aAAK,EAAE,CAAC,WAAD,EAAc,QAAd,CADX;AAEI/N,YAAI,EAAE,UAFV;AAGIwE,WAAG,EAAE;AAHT,OAXwB,EAgBxB;AACIlE,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIgO,UAAE,EAAE,CAHR;AAIIjR,aAAK,EAAEQ;AAJX,OAhBwB,EAsBxB;AACI+C,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEmR;AAHX,OAtBwB,CAAxB,EA2BD3T,QA3BC,CAAJ,EA4BI;AAEJ,UAAMoG,IAAI,GAAG;AACTsN,kBAAU,EAAEtV,KAAK,CAACkV,EAAD,CADR;AAET1C,qBAAa,EAAExS,KAAK,CAAC8C,IAAD,CAFX;AAGT2S,kBAAU,EAAEpS,QAAQ,CAACkS,OAAD,CAHX;AAIT3Q,cAAM,EAAEd,QAAQ,CAACc,MAAD;AAJP,OAAb;;AAOA,UAAItI,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsDzF,IAAtD,EAA4D,MAA5D,EAAoEnB,IAApE,CAAyE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAApF,WAAoI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAvI;AACH;;;WAED,yBAAsI;AAAA,UAAxH6Q,aAAwH,uEAAxG,KAAwG;AAAA,UAAjGH,OAAiG,uEAAvF,KAAuF;AAAA,UAAhF3Q,MAAgF,uEAAvE,CAAuE;AAAA,UAApE+Q,KAAoE,uEAA5D,KAAKxQ,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAClI,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBoU,KAAjB,CAAJ,EAA6B;AACzB/T,gBAAQ,GAAG+T,KAAX;AACAA,aAAK,GAAG,KAAKxQ,OAAL,CAAalH,cAAb,CAA4BC,GAApC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe8F,KAAf,CAAJ,EAA2B;AAC9BrZ,eAAO,GAAGqZ,KAAV;AACAA,aAAK,GAAG,KAAKxQ,OAAL,CAAalH,cAAb,CAA4BC,GAApC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKiX,aAAxB,EAAuCF,aAAvC,EAAsDH,OAAtD,EAA+D3Q,MAA/D,EAAuE+Q,KAAvE,EAA8ErZ,OAA9E,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEuR;AAHX,OADwB,EAMxB;AACIhO,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR;AAHX,OANwB,EAWxB;AACIN,aAAK,EAAE,CAAC,OAAD,EAAU,QAAV,CADX;AAEI/N,YAAI,EAAE,UAFV;AAGIwE,WAAG,EAAE;AAHT,OAXwB,EAgBxB;AACIlE,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIgO,UAAE,EAAE,CAHR;AAIIjR,aAAK,EAAEQ;AAJX,OAhBwB,EAsBxB;AACI+C,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEmR;AAHX,OAtBwB,CAAxB,EA2BD3T,QA3BC,CAAJ,EA4BI;AAEJ,UAAMoG,IAAI,GAAG;AACTsN,kBAAU,EAAEtV,KAAK,CAAC0V,aAAD,CADR;AAETlD,qBAAa,EAAExS,KAAK,CAAC2V,KAAD,CAFX;AAGTF,kBAAU,EAAEpS,QAAQ,CAACkS,OAAD,CAHX;AAIT3Q,cAAM,EAAEd,QAAQ,CAACc,MAAD;AAJP,OAAb;;AAOA,UAAItI,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,8BAA9B,EAA8DzF,IAA9D,EAAoE,MAApE,EAA4EnB,IAA5E,CAAiF,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAA5F,WAA4I,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA/I;AACH;;;WAED,yBAAmK;AAAA,UAArJD,MAAqJ,uEAA5I,CAA4I;AAAA,UAAzIiR,QAAyI,uEAA9H,CAA8H;AAAA,UAA3HC,QAA2H,uEAAhH,WAAgH;AAAA,UAAnGlW,OAAmG,uEAAzF,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAA6D;AAAA,UAAxD6X,eAAwD,uEAAtCC,SAAsC;AAAA,UAA3B1Z,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC/J,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBwU,eAAjB,CAAJ,EAAuC;AACnCnU,gBAAQ,GAAGmU,eAAX;AACAA,uBAAe,GAAGC,SAAlB;AACH,OAHD,MAGO,IAAIjZ,6CAAK,CAAC8S,QAAN,CAAekG,eAAf,CAAJ,EAAqC;AACxCzZ,eAAO,GAAGyZ,eAAV;AACAA,uBAAe,GAAGC,SAAlB;AACH;;AAED,UAAIjZ,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAejQ,OAAf,CAAJ,EAA6B;AAChCtD,eAAO,GAAGsD,OAAV;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAInB,6CAAK,CAACwE,UAAN,CAAiBsU,QAAjB,CAAJ,EAAgC;AAC5BjU,gBAAQ,GAAGiU,QAAX;AACAA,gBAAQ,GAAG,CAAX;AACH;;AAED,UAAI9Y,6CAAK,CAACwE,UAAN,CAAiBuU,QAAjB,CAAJ,EAAgC;AAC5BlU,gBAAQ,GAAGkU,QAAX;AACAA,gBAAQ,GAAG,WAAX;AACH;;AAED,UAAI,CAAClU,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKsX,aAAxB,EAAuCrR,MAAvC,EAA+CiR,QAA/C,EAAyDC,QAAzD,EAAmElW,OAAnE,EAA4EmW,eAA5E,EAA6FzZ,OAA7F,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAExE;AAHX,OADwB,EAMxB;AACI+H,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE2R,eAHX;AAIIG,gBAAQ,EAAE;AAJd,OANwB,EAYxB;AACIvO,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIgO,UAAE,EAAE,CAHR;AAIIjR,aAAK,EAAEQ;AAJX,OAZwB,EAkBxB;AACI+C,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIuL,WAAG,EAAE,CAHT;AAIIxO,aAAK,EAAEyR;AAJX,OAlBwB,EAwBxB;AACIlO,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,UAFV;AAGIjD,aAAK,EAAE0R,QAHX;AAIIjK,WAAG,EAAE;AAJT,OAxBwB,CAAxB,EA8BDjK,QA9BC,CAAJ,EA+BI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAACJ,OAAD,CADX;AAETuW,sBAAc,EAAErS,QAAQ,CAACc,MAAD,CAFf;AAGTwR,uBAAe,EAAEtS,QAAQ,CAAC+R,QAAD,CAHhB;AAITC,gBAAQ,EAAEA;AAJD,OAAb;;AAOA,UAAI/Y,6CAAK,CAACsZ,oBAAN,CAA2BN,eAA3B,KAA+C/V,KAAK,CAAC+V,eAAD,CAAL,KAA2B/V,KAAK,CAACJ,OAAD,CAAnF,EAA8F;AAC1FoI,YAAI,CAACsO,gBAAL,GAAwBtW,KAAK,CAAC+V,eAAD,CAA7B;AACH;;AAED,UAAIzZ,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsDzF,IAAtD,EAA4D,MAA5D,EAAoEnB,IAApE,CAAyE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAApF,WAAoI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAvI;AACH;;;WAED,2BAA2I;AAAA,UAA3HiR,QAA2H,uEAAhH,WAAgH;AAAA,UAAnGlW,OAAmG,uEAAzF,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAA6D;AAAA,UAAxD6X,eAAwD,uEAAtCC,SAAsC;AAAA,UAA3B1Z,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACvI,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBwU,eAAjB,CAAJ,EAAuC;AACnCnU,gBAAQ,GAAGmU,eAAX;AACAA,uBAAe,GAAGC,SAAlB;AACH,OAHD,MAGO,IAAIjZ,6CAAK,CAAC8S,QAAN,CAAekG,eAAf,CAAJ,EAAqC;AACxCzZ,eAAO,GAAGyZ,eAAV;AACAA,uBAAe,GAAGC,SAAlB;AACH;;AAED,UAAIjZ,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAejQ,OAAf,CAAJ,EAA6B;AAChCtD,eAAO,GAAGsD,OAAV;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAInB,6CAAK,CAACwE,UAAN,CAAiBuU,QAAjB,CAAJ,EAAgC;AAC5BlU,gBAAQ,GAAGkU,QAAX;AACAA,gBAAQ,GAAG,WAAX;AACH;;AAED,UAAI,CAAClU,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK4X,eAAxB,EAAyCT,QAAzC,EAAmDlW,OAAnD,EAA4DmW,eAA5D,EAA6EzZ,OAA7E,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAExE;AAHX,OADwB,EAMxB;AACI+H,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE2R,eAHX;AAIIG,gBAAQ,EAAE;AAJd,OANwB,EAYxB;AACIvO,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,UAFV;AAGIjD,aAAK,EAAE0R,QAHX;AAIIjK,WAAG,EAAE;AAJT,OAZwB,CAAxB,EAkBDjK,QAlBC,CAAJ,EAmBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAACJ,OAAD,CADX;AAETkW,gBAAQ,EAAEA;AAFD,OAAb;;AAKA,UAAI/Y,6CAAK,CAACsZ,oBAAN,CAA2BN,eAA3B,KAA+C/V,KAAK,CAAC+V,eAAD,CAAL,KAA2B/V,KAAK,CAACJ,OAAD,CAAnF,EAA8F;AAC1FoI,YAAI,CAACsO,gBAAL,GAAwBtW,KAAK,CAAC+V,eAAD,CAA7B;AACH;;AAED,UAAIzZ,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,wBAA9B,EAAwDzF,IAAxD,EAA8D,MAA9D,EAAsEnB,IAAtE,CAA2E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAtF,WAAsI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAzI;AACH;;;WAED,gCAA2F;AAAA,UAAtEjF,OAAsE,uEAA5D,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACvF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAejQ,OAAf,CAAJ,EAA6B;AAChCtD,eAAO,GAAGsD,OAAV;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6X,oBAAxB,EAA8C5W,OAA9C,EAAuDtD,OAAvD,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAExE;AAHX,OADwB,CAAxB,EAMDgC,QANC,CAAJ,EAOI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAACJ,OAAD;AADX,OAAb;;AAIA,UAAItD,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,wBAA9B,EAAwDzF,IAAxD,EAA8D,MAA9D,EAAsEnB,IAAtE,CAA2E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAtF,WAAsI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAzI;AACH;;;WAED,sBAKE;AAAA,UAJEjF,OAIF,uEAJY,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAIxC;AAAA,UAHEkS,GAGF,uEAHQ,KAGR;AAAA,UAFE9T,OAEF;AAAA,UADEsF,QACF,uEADa,KACb;;AACE,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AACD,UAAIS,6CAAK,CAAC8S,QAAN,CAAeO,GAAf,KAAuBrT,6CAAK,CAAC4S,UAAN,CAAiB/P,OAAjB,CAA3B,EAAsD;AAClDtD,eAAO,GAAG8T,GAAV;AACAA,WAAG,GAAGxQ,OAAN;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK8X,UAAxB,EAAoC7W,OAApC,EAA6CwQ,GAA7C,EAAkD9T,OAAlD,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAExE;AAHX,OADwB,EAMxB;AACI+H,YAAI,EAAE,KADV;AAEIN,YAAI,EAAE,KAFV;AAGIjD,aAAK,EAAEgM,GAHX;AAIIvE,WAAG,EAAE;AAJT,OANwB,CAAxB,EAYDjK,QAZC,CAAJ,EAaI;AAGJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAACJ,OAAD,CADX;AAETwQ,WAAG,EAAE/M,QAAQ,CAAC+M,GAAD;AAFJ,OAAb;;AAKA,UAAI9T,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsDzF,IAAtD,EAA4D,MAA5D,EAAoEnB,IAApE,CAAyE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAApF,WAAoI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAvI;AACH;;;WAED,gBAA4F;AAAA;;AAAA,UAAvF6R,KAAuF,uEAA/E,EAA+E;AAAA,UAA3EC,YAA2E,uEAA5D,KAAKxR,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACxF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBoV,YAAjB,CAAJ,EAAoC;AAChC/U,gBAAQ,GAAG+U,YAAX;AACAA,oBAAY,GAAG,KAAKxR,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe8G,YAAf,CAAJ,EAAkC;AACrCra,eAAO,GAAGqa,YAAV;AACAA,oBAAY,GAAG,KAAKxR,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKiY,IAAxB,EAA8BF,KAA9B,EAAqCC,YAArC,EAAmDra,OAAnD,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEuS;AAHX,OADwB,EAMxB;AACIhP,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,gBAFV;AAGIjD,aAAK,EAAEsS;AAHX,OANwB,CAAxB,EAWD9U,QAXC,CAAJ,EAYI;AAEJ,UAAIiV,OAAO,GAAG,KAAd;AAEAH,WAAK,GAAGpW,MAAM,CAACwW,OAAP,CAAeJ,KAAf,EAAsBjL,GAAtB,CAA0B,gBAA4B;AAAA;AAAA,YAA1BsL,SAA0B;AAAA,YAAfC,SAAe;;AAC1D,YAAIH,OAAJ,EACI;AAEJ,YAAI,KAAI,CAAChG,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,cAAI,EAAE,IADV;AAEIN,cAAI,EAAE,SAFV;AAGIjD,eAAK,EAAE2S;AAHX,SADwB,EAMxB;AACIpP,cAAI,EAAE,YADV;AAEIN,cAAI,EAAE,SAFV;AAGIgO,YAAE,EAAE,CAHR;AAIIjR,eAAK,EAAE4S,SAJX;AAKInL,aAAG,EAAE,yCAAyCkL;AALlD,SANwB,CAAxB,CAAJ,EAcI,OAAOF,OAAO,GAAG,IAAjB;AAEJ,eAAO;AACHI,sBAAY,EAAEjX,KAAK,CAAC+W,SAAD,CADhB;AAEHG,oBAAU,EAAEpT,QAAQ,CAACkT,SAAD;AAFjB,SAAP;AAIH,OAxBO,CAAR;AA0BA,UAAIH,OAAJ,EACI;AAEJ,UAAM7O,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC2W,YAAD,CADX;AAETD,aAAK,EAALA;AAFS,OAAb;;AAKA,UAAIpa,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,2BAA9B,EAA2DzF,IAA3D,EAAiE,MAAjE,EAAyEnB,IAAzE,CAA8E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAzF,WAAyI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA5I;AACH;;;WAED,+BAAqG;AAAA,UAAjFvI,OAAiF,uEAAvE,EAAuE;AAAA,UAAnEoZ,aAAmE,uEAAnD,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACjG,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBmU,aAAjB,CAAJ,EAAqC;AACjC9T,gBAAQ,GAAG8T,aAAX;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK0J,mBAAxB,EAA6C/L,OAA7C,EAAsDoZ,aAAtD,CAAP;AAEJ,UAAMhX,QAAQ,GAAGpC,OAAO,CAACoC,QAAR,IAAoB,KAAKyG,OAAL,CAAazG,QAAlD;AACA,UAAIiM,iBAAiB,GAAGrO,OAAO,CAACqO,iBAAhC;;AACA,UAAI,OAAOA,iBAAP,KAA6B,QAA7B,IAAyC,CAACA,iBAA9C,EAAiE;AAC7DA,yBAAiB,GAAG,GAApB;AACH;;AACD,UAAMwM,iBAAiB,GAAG7a,OAAO,CAAC6a,iBAAR,IAA6B,QAAvD;AACA,UAAMzM,SAAS,GAAGpO,OAAO,CAACoO,SAAR,IAAqB,CAAvC;AACA,UAAMuI,UAAU,GAAG3W,OAAO,CAAC2W,UAA3B;AACA,UAAMD,OAAO,GAAG1W,OAAO,CAAC0W,OAAR,IAAmB1W,OAAO,CAAC8a,QAA3C;AAEA,yBAKI9a,OALJ,CACIoF,GADJ;AAAA,UACIA,GADJ,6BACU,KADV;AAAA,8BAKIpF,OALJ,CAEI+I,QAFJ;AAAA,UAEIA,QAFJ,kCAEe,KAFf;AAAA,gCAKI/I,OALJ,CAGIkP,UAHJ;AAAA,UAGIA,UAHJ,oCAGiB,EAHjB;AAAA,0BAKIlP,OALJ,CAIIqL,IAJJ;AAAA,UAIIA,IAJJ,8BAIW,EAJX;;AAOA,UAAIjG,GAAG,IAAI3E,6CAAK,CAACC,QAAN,CAAe0E,GAAf,CAAX,EAAgC;AAC5B,YAAI;AACAA,aAAG,GAAG4B,IAAI,CAAC+T,KAAL,CAAW3V,GAAX,CAAN;AACH,SAFD,CAEE,gBAAM;AACJ,iBAAOE,QAAQ,CAAC,8BAAD,CAAf;AACH;AACJ;;AAED,UAAIF,GAAG,CAACwH,MAAR,EACIxH,GAAG,GAAGA,GAAG,CAACwH,MAAV;AAEJ,UAAI,CAACnM,6CAAK,CAACuR,OAAN,CAAc5M,GAAd,CAAL,EACI,OAAOE,QAAQ,CAAC,8BAAD,CAAf;AAGJ,UAAM0V,OAAO,GAAG5V,GAAG,CAAClB,IAAJ,CAAS,UAAA4G,IAAI,EAAI;AAC7B,eAAOA,IAAI,CAACC,IAAL,KAAc,aAAd,IAA+B,cAAcD,IAAI,CAACsC,eAAL,CAAqBrH,WAArB,EAApD;AACH,OAFe,CAAhB;AAIA,UAAI,KAAKwO,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,KAFV;AAGIjD,aAAK,EAAEiB;AAHX,OADwB,EAMxB;AACIsC,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE1F,QAHX;AAII2W,UAAE,EAAE;AAJR,OANwB,EAYxB;AACI1N,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsG,SAHX;AAIIkI,WAAG,EAAE;AAJT,OAZwB,EAkBxB;AACIjL,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEuG,iBAHX;AAIIiI,WAAG,EAAE,CAJT;AAKI2E,WAAG,EAAE;AALT,OAlBwB,EAyBxB;AACI5P,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE+S,iBAHX;AAIIvE,WAAG,EAAE,CAJT;AAKI2E,WAAG,EAAE;AALT,OAzBwB,EAgCxB;AACI5P,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,OAFV;AAGIjD,aAAK,EAAEoH;AAHX,OAhCwB,EAqCxB;AACI7D,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR;AAHX,OArCwB,EA0CxB;AACI/N,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE6O,UAHX;AAIIL,WAAG,EAAE,CAJT;AAKIsD,gBAAQ,EAAE;AALd,OA1CwB,EAiDxB;AACIvO,YAAI,EAAE,SADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE4O,OAHX;AAIIJ,WAAG,EAAE,CAJT;AAKIsD,gBAAQ,EAAE;AALd,OAjDwB,CAAxB,EAwDDtU,QAxDC,CAAJ,EAyDI;AAEJ,UAAI0V,OAAO,IAAI5M,SAAS,IAAI,CAAxB,IAA6BuI,UAAU,IAAI,CAA/C,EACI,OAAOrR,QAAQ,CAAC,8FAAD,CAAf;AAEJ,UAAI,CAAC0V,OAAD,KAAa5M,SAAS,GAAG,CAAZ,IAAiBuI,UAAU,GAAG,CAA3C,CAAJ,EACI,OAAOrR,QAAQ,CAAC,kFAAD,CAAf;;AAGJ,UAAItF,OAAO,CAACuO,YAAR,IAAwB9N,6CAAK,CAACC,QAAN,CAAeV,OAAO,CAACuO,YAAvB,CAA5B,EAAkE;AAC9DW,kBAAU,GAAGlP,OAAO,CAACuO,YAAR,CAAqB1I,OAArB,CAA6B,OAA7B,EAAsC,EAAtC,CAAb;AACH,OAFD,MAEO,IAAI7F,OAAO,CAACkb,SAAZ,EAAuB;AAC1BhM,kBAAU,GAAGT,sEAAmB,CAACzO,OAAO,CAACkb,SAAT,EAAoBlb,OAAO,CAACmb,YAA5B,CAAnB,CAA6DtV,OAA7D,CAAqE,OAArE,EAA8E,EAA9E,CAAb;AACH,OAFM,MAEA;AACH,YAAIuV,iBAAiB,GAAGhW,GAAG,CAACiW,IAAJ,CACpB,UAACC,EAAD,EAAQ;AACJ,iBAAOA,EAAE,CAACvQ,IAAH,KAAY,aAAnB;AACH,SAHmB,CAAxB;;AAMA,YAAI,OAAOqQ,iBAAP,KAA6B,WAA7B,IAA4CA,iBAAhD,EAAmE;AAC/D,cAAMG,QAAQ,GAAG,IAAIC,0DAAJ,EAAjB;AACA,cAAMxM,KAAK,GAAG,EAAd;AACA,cAAM/K,MAAM,GAAG,EAAf;AACAmX,2BAAiB,GAAGA,iBAAiB,CAACpN,MAAtC;AAEA,cAAIkB,UAAU,CAACpM,MAAX,IAAqBsY,iBAAiB,CAACtY,MAA3C,EACI,OAAOwC,QAAQ,6BAAsB8V,iBAAiB,CAACtY,MAAxC,kBAAsDoM,UAAU,CAACpM,MAAjE,eAAf;;AAEJ,eAAK,IAAIwE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4H,UAAU,CAACpM,MAA/B,EAAuCwE,CAAC,EAAxC,EAA4C;AACxC,gBAAIyD,IAAI,GAAGqQ,iBAAiB,CAAC9T,CAAD,CAAjB,CAAqByD,IAAhC;AACA,gBAAIjD,KAAK,GAAGoH,UAAU,CAAC5H,CAAD,CAAtB;AAEA,gBAAI,CAACyD,IAAD,IAAS,CAACtK,6CAAK,CAACC,QAAN,CAAeqK,IAAf,CAAV,IAAkC,CAACA,IAAI,CAACjI,MAA5C,EACI,OAAOwC,QAAQ,CAAC,sCAAsCyF,IAAvC,CAAf;AAEJ,gBAAIA,IAAI,KAAK,SAAb,EACIjD,KAAK,GAAGpE,KAAK,CAACoE,KAAD,CAAL,CAAajC,OAAb,CAAqB4V,mEAArB,EAA2C,IAA3C,CAAR,CADJ,KAEK,IAAI1Q,IAAI,CAAC2Q,KAAL,CAAW,qBAAX,EAAkC,CAAlC,MAAyC,UAA7C,EACD5T,KAAK,GAAGA,KAAK,CAACqH,GAAN,CAAU,UAAAwM,CAAC;AAAA,qBAAIjY,KAAK,CAACiY,CAAD,CAAL,CAAS9V,OAAT,CAAiB4V,mEAAjB,EAAuC,IAAvC,CAAJ;AAAA,aAAX,CAAR,CADC,KAEA,IAAI,WAAWvU,IAAX,CAAgB6D,IAAhB,CAAJ,EAA2B;AAC5BA,kBAAI,GAAGA,IAAI,CAAClF,OAAL,CAAa,UAAb,EAAyB,SAAzB,CAAP;AACH;AAEDmJ,iBAAK,CAACvD,IAAN,CAAWV,IAAX;AACA9G,kBAAM,CAACwH,IAAP,CAAY3D,KAAZ;AACH;;AAED,cAAI;AACAoH,sBAAU,GAAGqM,QAAQ,CAACK,MAAT,CAAgB5M,KAAhB,EAAuB/K,MAAvB,EAA+B4B,OAA/B,CAAuC,OAAvC,EAAgD,EAAhD,CAAb;AACH,WAFD,CAEE,OAAO8J,EAAP,EAAW;AACT,mBAAOrK,QAAQ,CAACqK,EAAD,CAAf;AACH;AACJ,SAjCD,MAiCOT,UAAU,GAAG,EAAb;AACV;;AAED,UAAMV,IAAI,GAAG;AACT0H,qBAAa,EAAExS,KAAK,CAAC0V,aAAD,CADX;AAETyC,iBAAS,EAAErU,QAAQ,CAACpF,QAAD,CAFV;AAGT0Z,kBAAU,EAAEtU,QAAQ,CAAC4G,SAAD,CAHX;AAIT2N,qCAA6B,EAAE1N,iBAJtB;AAKT2N,2BAAmB,EAAEnB,iBALZ;AAMTzV,WAAG,EAAE4B,IAAI,CAACC,SAAL,CAAe7B,GAAf,CANI;AAOT2D,gBAAQ,EAARA,QAPS;AAQTkN,iBAAS,EAAE/G,UARF;AAST7D,YAAI,EAAJA;AATS,OAAb,CA9JiG,CA0KjG;;AACA,UAAI5K,6CAAK,CAACsZ,oBAAN,CAA2BpD,UAA3B,CAAJ,EACInI,IAAI,CAACyN,gBAAL,GAAwBzU,QAAQ,CAACmP,UAAD,CAAhC;AACJ,UAAIlW,6CAAK,CAACsZ,oBAAN,CAA2BrD,OAA3B,CAAJ,EACIlI,IAAI,CAACsM,QAAL,GAAgBtT,QAAQ,CAACkP,OAAD,CAAxB;AACJ,UAAI1W,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EACI3G,IAAI,CAAC6G,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AAEJ,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,uBAA9B,EAAuD3C,IAAvD,EAA6D,MAA7D,EAAqEjE,IAArE,CAA0E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAArF,WAAqI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAxI;AACH;;;WAED,gCAAgC;AAAA,wCAAR7D,MAAQ;AAARA,cAAQ;AAAA;;AAC5B,UAAI,qEAAOA,MAAM,CAAC,CAAD,CAAb,MAAqB,QAAzB,EAAmC;AAC/BA,cAAM,CAAC,CAAD,CAAN,GAAY;AACRtC,kBAAQ,EAAEsC,MAAM,CAAC,CAAD,CADR;AAER0J,mBAAS,EAAE1J,MAAM,CAAC,CAAD;AAFT,SAAZ;AAIAA,cAAM,CAACM,MAAP,CAAc,CAAd,EAAiB,CAAjB;AACH;;AACD,aAAO,KAAKkX,qBAAL,aAA8BxX,MAA9B,CAAP;AACH;;;WAED,mCAAmC;AAAA,yCAARA,MAAQ;AAARA,cAAQ;AAAA;;AAC/BA,YAAM,CAAC,CAAD,CAAN,CAAUuK,WAAV,GAAwB,IAAxB;AACA,aAAO,KAAKG,oBAAL,aAA6B1K,MAA7B,CAAP;AACH;;;WAED,4CAA4C;AAAA,yCAARA,MAAQ;AAARA,cAAQ;AAAA;;AACxCA,YAAM,CAAC,CAAD,CAAN,CAAUuK,WAAV,GAAwB,IAAxB;AACAvK,YAAM,CAAC,CAAD,CAAN,CAAUyX,SAAV,GAAsB,IAAtB;AACA,aAAO,KAAK/M,oBAAL,aAA6B1K,MAA7B,CAAP;AACH;;;WAED,+BACIgI,eADJ,EAEIpB,gBAFJ,EAOE;AAAA,UAJEtL,OAIF,uEAJY,EAIZ;AAAA,UAHEkP,UAGF,uEAHe,EAGf;AAAA,UAFEkK,aAEF,uEAFkB,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAE9C;AAAA,UADE0D,QACF,uEADa,KACb;;AAEE,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBmU,aAAjB,CAAJ,EAAqC;AACjC9T,gBAAQ,GAAG8T,aAAX;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH;;AAED,UAAInB,6CAAK,CAACwE,UAAN,CAAiBiK,UAAjB,CAAJ,EAAkC;AAC9B5J,gBAAQ,GAAG4J,UAAX;AACAA,kBAAU,GAAG,EAAb;AACH;;AAED,UAAI,CAAC5J,QAAL,EAAe;AACX,eAAO,KAAKjD,aAAL,CACH,KAAK6Z,qBADF,EAEHxP,eAFG,EAGHpB,gBAHG,EAIHtL,OAJG,EAKHkP,UALG,EAMHkK,aANG,CAAP;AAQH;;AAED,2BAKIpV,MAAM,CAACoN,MAAP,CAAc;AACdhD,iBAAS,EAAE,CADG;AAEdhM,gBAAQ,EAAE,KAAKyG,OAAL,CAAazG;AAFT,OAAd,EAGDpC,OAHC,CALJ;AAAA,UACI2W,UADJ,kBACIA,UADJ;AAAA,UAEID,OAFJ,kBAEIA,OAFJ;AAAA,UAGItI,SAHJ,kBAGIA,SAHJ;AAAA,UAIIhM,QAJJ,kBAIIA,QAJJ;;AAUA,UAAI,KAAKmS,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE1F,QAHX;AAII2W,UAAE,EAAE;AAJR,OADwB,EAOxB;AACI1N,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsG,SAHX;AAIIkI,WAAG,EAAE;AAJT,OAPwB,EAaxB;AACIjL,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,OAFV;AAGIjD,aAAK,EAAEoH;AAHX,OAbwB,EAkBxB;AACI7D,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE4E;AAHX,OAlBwB,EAuBxB;AACIrB,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR,aAHX;AAIIQ,gBAAQ,EAAE;AAJd,OAvBwB,EA6BxB;AACIvO,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE6O,UAHX;AAIIL,WAAG,EAAE,CAJT;AAKIsD,gBAAQ,EAAE;AALd,OA7BwB,EAoCxB;AACIvO,YAAI,EAAE,SADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE4O,OAHX;AAIIJ,WAAG,EAAE,CAJT;AAKIsD,gBAAQ,EAAE;AALd,OApCwB,CAAxB,EA2CDtU,QA3CC,CAAJ,EA4CI;AAEJ,UAAMkJ,IAAI,GAAG;AACT/B,wBAAgB,EAAE/I,KAAK,CAACgJ,eAAD,CADd;AAETwJ,qBAAa,EAAExS,KAAK,CAAC0V,aAAD;AAFX,OAAb;;AAMA,UAAI9N,gBAAgB,IAAI7K,6CAAK,CAACC,QAAN,CAAe4K,gBAAf,CAAxB,EAA0D;AACtDA,wBAAgB,GAAGA,gBAAgB,CAACzF,OAAjB,CAAyB,QAAzB,EAAmC,EAAnC,CAAnB;;AACA,YAAIqJ,UAAU,CAACpM,MAAf,EAAuB;AACnB,cAAMyY,QAAQ,GAAG,IAAIC,0DAAJ,EAAjB;AACA,cAAIxM,KAAK,GAAG,EAAZ;AACA,cAAM/K,MAAM,GAAG,EAAf;;AAEA,eAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4H,UAAU,CAACpM,MAA/B,EAAuCwE,CAAC,EAAxC,EAA4C;AACxC,gCAAoB4H,UAAU,CAAC5H,CAAD,CAA9B;AAAA,gBAAKyD,IAAL,iBAAKA,IAAL;AAAA,gBAAWjD,KAAX,iBAAWA,KAAX;AAEA,gBAAI,CAACiD,IAAD,IAAS,CAACtK,6CAAK,CAACC,QAAN,CAAeqK,IAAf,CAAV,IAAkC,CAACA,IAAI,CAACjI,MAA5C,EACI,OAAOwC,QAAQ,CAAC,sCAAsCyF,IAAvC,CAAf;AAEJ,gBAAIA,IAAI,KAAK,SAAb,EACIjD,KAAK,GAAGpE,KAAK,CAACoE,KAAD,CAAL,CAAajC,OAAb,CAAqB4V,mEAArB,EAA2C,IAA3C,CAAR,CADJ,KAEK,IAAI1Q,IAAI,CAAC2Q,KAAL,CAAW,qBAAX,EAAkC,CAAlC,MAAyC,UAA7C,EACD5T,KAAK,GAAGA,KAAK,CAACqH,GAAN,CAAU,UAAAwM,CAAC;AAAA,qBAAIjY,KAAK,CAACiY,CAAD,CAAL,CAAS9V,OAAT,CAAiB4V,mEAAjB,EAAuC,IAAvC,CAAJ;AAAA,aAAX,CAAR;AAEJzM,iBAAK,CAACvD,IAAN,CAAWV,IAAX;AACA9G,kBAAM,CAACwH,IAAP,CAAY3D,KAAZ;AACH;;AAED,cAAI;AACA;AACAkH,iBAAK,GAAGA,KAAK,CAACG,GAAN,CAAU,UAAApE,IAAI,EAAI;AACtB,kBAAI,WAAW7D,IAAX,CAAgB6D,IAAhB,CAAJ,EAA2B;AACvBA,oBAAI,GAAGA,IAAI,CAAClF,OAAL,CAAa,UAAb,EAAyB,SAAzB,CAAP;AACH;;AACD,qBAAOkF,IAAP;AACH,aALO,CAAR;AAOAmE,sBAAU,GAAGqM,QAAQ,CAACK,MAAT,CAAgB5M,KAAhB,EAAuB/K,MAAvB,EAA+B4B,OAA/B,CAAuC,OAAvC,EAAgD,EAAhD,CAAb;AAEH,WAXD,CAWE,OAAO8J,EAAP,EAAW;AACT,mBAAOrK,QAAQ,CAACqK,EAAD,CAAf;AACH;AACJ,SAlCD,MAkCOT,UAAU,GAAG,EAAb,CApC+C,CAsCtD;;;AACA,YAAIlP,OAAO,CAACkb,SAAZ,EAAuB;AACnBhM,oBAAU,GAAGT,sEAAmB,CAACzO,OAAO,CAACkb,SAAT,EAAoBlb,OAAO,CAACmb,YAA5B,CAAnB,CAA6DtV,OAA7D,CAAqE,OAArE,EAA8E,EAA9E,CAAb;AACH;;AAED,YAAI7F,OAAO,CAACoc,iBAAR,IAA6B3b,6CAAK,CAACC,QAAN,CAAeV,OAAO,CAACoc,iBAAvB,CAAjC,EAA4E;AACxElN,oBAAU,GAAGlP,OAAO,CAACoc,iBAAR,CAA0BvW,OAA1B,CAAkC,OAAlC,EAA2C,EAA3C,CAAb;AACH;;AAED,YAAI7F,OAAO,CAACuO,YAAR,IAAwB9N,6CAAK,CAACC,QAAN,CAAeV,OAAO,CAACuO,YAAvB,CAA5B,EAAkE;AAC9DW,oBAAU,GAAGlP,OAAO,CAACuO,YAAR,CAAqB1I,OAArB,CAA6B,OAA7B,EAAsC,EAAtC,CAAb;AACH;;AAED2I,YAAI,CAAC6N,iBAAL,GAAyB/Q,gBAAzB;AACAkD,YAAI,CAACyH,SAAL,GAAiB/G,UAAjB;AACH;;AAEDV,UAAI,CAACsN,UAAL,GAAkBtU,QAAQ,CAAC4G,SAAD,CAA1B;AACA,UAAI3N,6CAAK,CAACsZ,oBAAN,CAA2BpD,UAA3B,CAAJ,EACInI,IAAI,CAACyN,gBAAL,GAAwBzU,QAAQ,CAACmP,UAAD,CAAhC;AACJ,UAAIlW,6CAAK,CAACsZ,oBAAN,CAA2BrD,OAA3B,CAAJ,EACIlI,IAAI,CAACsM,QAAL,GAAgBtT,QAAQ,CAACkP,OAAD,CAAxB;;AAEJ,UAAI,CAAC1W,OAAO,CAACiP,WAAb,EAA0B;AACtBT,YAAI,CAACqN,SAAL,GAAiBrU,QAAQ,CAACpF,QAAD,CAAzB;AACH;;AAED,UAAIpC,OAAO,CAACmV,YAAZ,EAA0B;AACtB3G,YAAI,CAAC6G,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAa7I,OAAO,CAACmc,SAAR,GAAoB,cAApB,GAAqC,UAAlD,EAA8DhL,OAA9D,iBAA+EnR,OAAO,CAACmc,SAAR,GAAoB,UAApB,GAAiC,EAAhH,qBAA6Hnc,OAAO,CAACiP,WAAR,GAAsB,UAAtB,GAAmC,OAAhK,eAAmLT,IAAnL,EAAyL,MAAzL,EAAiMjE,IAAjM,CAAsM,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAjN,WAAiQ,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAApQ;AACH;;;WAED,kBAASmE,eAAT,EAA4F;AAAA,UAAlE4P,YAAkE,uEAAnD,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;AACxF,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKka,QAAxB,EAAkC7P,eAAlC,EAAmD4P,YAAnD,CAAP;AAEJ,UAAI,CAAC,KAAKzT,OAAL,CAAapF,SAAb,CAAuBiJ,eAAvB,CAAL,EACI,OAAOpH,QAAQ,CAAC,mCAAD,CAAf;AAEJ,UAAI,CAAC,KAAKuD,OAAL,CAAapF,SAAb,CAAuB6Y,YAAvB,CAAL,EACI,OAAOhX,QAAQ,CAAC,gCAAD,CAAf;AAEJ,UAAMoG,IAAI,GAAG;AACTe,wBAAgB,EAAE/I,KAAK,CAACgJ,eAAD,CADd;AAETwJ,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD;AAFX,OAAb;;AAKA,UAAI,KAAKzT,OAAL,CAAa5H,GAAb,CAAiBub,KAAjB,CAAuBC,SAAvB,CAAiC/P,eAAjC,CAAJ,EAAuD;AACnD,eAAO,KAAK7D,OAAL,CAAa5H,GAAb,CAAiBub,KAAjB,CAAuBC,SAAvB,CAAiC/P,eAAjC,CAAP;AACH;;AACD,WAAK7D,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,iBAA9B,EAAiDzF,IAAjD,EAAuD,MAAvD,EAA+DnB,IAA/D,CAAoE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAA/E,WAA+H,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAlI;AAEH;;;WAED,yBAAgBmU,SAAhB,EAA6F;AAAA,UAAlEJ,YAAkE,uEAAnD,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;AACzF,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKsa,eAAxB,EAAyCD,SAAzC,EAAoDJ,YAApD,CAAP;AAEJ,UAAI,CAAC7b,6CAAK,CAACsZ,oBAAN,CAA2B2C,SAA3B,CAAL,EACI,OAAOpX,QAAQ,CAAC,4BAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAACwC,SAAN,CAAgByZ,SAAhB,CAAD,IAA+BA,SAAS,GAAG,CAA3C,IAAgDA,SAAS,GAAG,GAAhE,EACI,OAAOpX,QAAQ,CAAC,gDAAD,CAAf;AAEJ,UAAI,CAAC,KAAKuD,OAAL,CAAapF,SAAb,CAAuB6Y,YAAvB,CAAL,EACI,OAAOhX,QAAQ,CAAC,gCAAD,CAAf;AAEJ,UAAMoG,IAAI,GAAG;AACTgR,iBAAS,EAAElV,QAAQ,CAACkV,SAAD,CADV;AAETxG,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD;AAFX,OAAb;AAKA,WAAKzT,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,wBAA9B,EAAwDzF,IAAxD,EAA8D,MAA9D,EAAsEnB,IAAtE,CAA2E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAtF,WAAsI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAzI;AAEH;;;WAED,uBAA6F;AAAA,UAAjFvI,OAAiF,uEAAvE,EAAuE;AAAA,UAAnEoZ,aAAmE,uEAAnD,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACzF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBmU,aAAjB,CAAJ,EAAqC;AACjC9T,gBAAQ,GAAG8T,aAAX;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKua,WAAxB,EAAqC5c,OAArC,EAA8CoZ,aAA9C,CAAP;AAEJ,2BAiBIpZ,OAjBJ,CACIqL,IADJ;AAAA,UACIA,IADJ,+BACW,KADX;AAAA,kCAiBIrL,OAjBJ,CAEI6c,YAFJ;AAAA,UAEIA,YAFJ,sCAEmB,KAFnB;AAAA,iCAiBI7c,OAjBJ,CAGI8c,WAHJ;AAAA,UAGIA,WAHJ,qCAGkB,KAHlB;AAAA,yBAiBI9c,OAjBJ,CAII8T,GAJJ;AAAA,UAIIA,GAJJ,6BAIU,KAJV;AAAA,iCAiBI9T,OAjBJ,CAKI+c,WALJ;AAAA,UAKIA,WALJ,qCAKkB,CALlB;AAAA,8BAiBI/c,OAjBJ,CAMIgd,QANJ;AAAA,UAMIA,QANJ,kCAMe,CANf;AAAA,gCAiBIhd,OAjBJ,CAOIid,UAPJ;AAAA,UAOIA,UAPJ,oCAOiB,CAPjB;AAAA,+BAiBIjd,OAjBJ,CAQIkd,SARJ;AAAA,UAQIA,SARJ,mCAQgB1M,IAAI,CAACC,GAAL,EARhB;AAAA,6BAiBIzQ,OAjBJ,CASImd,OATJ;AAAA,UASIA,OATJ,iCASc,KATd;AAAA,kCAiBInd,OAjBJ,CAUIod,aAVJ;AAAA,UAUIA,aAVJ,sCAUoB,CAVpB;AAAA,mCAiBIpd,OAjBJ,CAWIqd,kBAXJ;AAAA,UAWIA,kBAXJ,uCAWyB,CAXzB;AAAA,kCAiBIrd,OAjBJ,CAYIsd,YAZJ;AAAA,UAYIA,YAZJ,sCAYmB,CAZnB;AAAA,kCAiBItd,OAjBJ,CAaIud,cAbJ;AAAA,UAaIA,cAbJ,sCAaqB,CAbrB;AAAA,UAeIC,SAfJ,GAiBIxd,OAjBJ,CAeIwd,SAfJ;AAAA,UAgBIC,SAhBJ,GAiBIzd,OAjBJ,CAgBIyd,SAhBJ;AAmBA,UAAI,KAAKlJ,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,eADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEiV;AAHX,OADwB,EAMxB;AACI1R,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEkV;AAHX,OANwB,EAWxB;AACI3R,YAAI,EAAE,aADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEmV;AAHX,OAXwB,EAgBxB;AACI5R,YAAI,EAAE,oBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAE+U;AAHX,OAhBwB,EAqBxB;AACIxR,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuD;AAHX,OArBwB,EA0BxB;AACIA,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEgV;AAHX,OA1BwB,EA+BxB;AACIzR,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,KAFV;AAGIjD,aAAK,EAAEgM;AAHX,OA/BwB,EAoCxB;AACIzI,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR;AAHX,OApCwB,EAyCxB;AACI/N,YAAI,EAAE,sBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEoV,SAHX;AAII5G,WAAG,EAAE9F,IAAI,CAACC,GAAL;AAJT,OAzCwB,EA+CxB;AACIpF,YAAI,EAAE,oBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEqV,OAHX;AAIIpE,UAAE,EAAEmE;AAJR,OA/CwB,EAqDxB;AACI7R,YAAI,EAAE,uBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsV,aAHX;AAII9G,WAAG,EAAE;AAJT,OArDwB,EA2DxB;AACIjL,YAAI,EAAE,sBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEuV,kBAHX;AAII/G,WAAG,EAAE;AAJT,OA3DwB,EAiExB;AACIjL,YAAI,EAAE,eADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwV,YAHX;AAIIhH,WAAG,EAAE;AAJT,OAjEwB,EAuExB;AACIjL,YAAI,EAAE,iBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEyV,cAHX;AAIIjH,WAAG,EAAE;AAJT,OAvEwB,CAAxB,EA6EDhR,QA7EC,CAAJ,EA8EI;AAEJ,UAAI7E,6CAAK,CAACsZ,oBAAN,CAA2ByD,SAA3B,MAA0C,CAAC/c,6CAAK,CAACwC,SAAN,CAAgBua,SAAhB,CAAD,IAA+BA,SAAS,IAAI,CAAtF,CAAJ,EACI,OAAOlY,QAAQ,CAAC,qDAAD,CAAf;AAEJ,UAAI7E,6CAAK,CAACsZ,oBAAN,CAA2B0D,SAA3B,MAA0C,CAAChd,6CAAK,CAACwC,SAAN,CAAgBwa,SAAhB,CAAD,IAA+BA,SAAS,GAAG,CAA3C,IAAgDA,SAAS,GAAG,CAAtG,CAAJ,EACI,OAAOnY,QAAQ,CAAC,oDAAD,CAAf;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC0V,aAAD,CADX;AAET/N,YAAI,EAAEtE,QAAQ,CAACsE,IAAD,CAFL;AAGTqS,YAAI,EAAE3W,QAAQ,CAAC8V,YAAD,CAHL;AAITC,mBAAW,EAAE/V,QAAQ,CAAC+V,WAAD,CAJZ;AAKThJ,WAAG,EAAE/M,QAAQ,CAAC+M,GAAD,CALJ;AAMT6J,oBAAY,EAAEnW,QAAQ,CAACuV,WAAD,CANb;AAOTa,eAAO,EAAEpW,QAAQ,CAACwV,QAAD,CAPR;AAQTlG,WAAG,EAAEtP,QAAQ,CAACyV,UAAD,CARJ;AASTY,kBAAU,EAAErW,QAAQ,CAAC0V,SAAD,CATX;AAUTY,gBAAQ,EAAEtW,QAAQ,CAAC2V,OAAD,CAVT;AAWTY,4BAAoB,EAAEvW,QAAQ,CAAC4V,aAAD,CAXrB;AAYTY,mCAA2B,EAAExW,QAAQ,CAAC6V,kBAAD,CAZ5B;AAaTY,qBAAa,EAAE;AACXC,uBAAa,EAAE1W,QAAQ,CAAC8V,YAAD,CADZ;AAEXa,qBAAW,EAAE3W,QAAQ,CAAC+V,cAAD;AAFV;AAbN,OAAb;;AAkBA,UAAI,EAAE/V,QAAQ,CAAC8V,YAAD,CAAR,GAAyB,CAA3B,CAAJ,EAAmC;AAC/B,eAAO5R,IAAI,CAACuS,aAAZ;AACH;;AACD,UAAIR,SAAS,IAAI,CAACnK,KAAK,CAAC9L,QAAQ,CAACiW,SAAD,CAAT,CAAvB,EAA8C;AAC1C/R,YAAI,CAAC+R,SAAL,GAAiBjW,QAAQ,CAACiW,SAAD,CAAzB;AACH;;AACD,UAAID,SAAS,IAAI,CAAClK,KAAK,CAAC9L,QAAQ,CAACgW,SAAD,CAAT,CAAvB,EAA8C;AAC1C9R,YAAI,CAAC0S,UAAL,GAAkB5W,QAAQ,CAACgW,SAAD,CAA1B;AACH;;AACD,UAAIxd,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,yBAA9B,EAAyDzF,IAAzD,EAA+D,MAA/D,EAAuEnB,IAAvE,CAA4E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAvF,WAAuI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA1I;AACH;;;WAED,yBAAyG;AAAA,UAA3F8V,WAA2F,uEAA7E,KAA6E;AAAA,UAAtE/a,OAAsE,uEAA5D,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACrG,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAejQ,OAAf,CAAJ,EAA6B;AAChCtD,eAAO,GAAGsD,OAAV;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EAAe;AACX,eAAO,KAAKjD,aAAL,CAAmB,KAAKic,aAAxB,EAAuCD,WAAvC,EAAoD/a,OAApD,EAA6DtD,OAA7D,CAAP;AACH;;AAED,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,MADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuW;AAHX,OADwB,EAMxB;AACIhT,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAExE;AAHX,OANwB,CAAxB,EAWDgC,QAXC,CAAJ,EAYI;AAEJ,UAAMoG,IAAI,GAAG;AACT6S,oBAAY,EAAExX,QAAQ,CAACsX,WAAD,CADb;AAETnI,qBAAa,EAAExS,KAAK,CAACJ,OAAD;AAFX,OAAb;;AAKA,UAAItD,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsDzF,IAAtD,EAA4D,MAA5D,EAAoEnB,IAApE,CAAyE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAApF,WAAoI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAvI;AACH;;;WAED,sBAAaiW,SAAb,EAAqF;AAAA,UAA7Dlb,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACjF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EAAe;AACX,eAAO,KAAKjD,aAAL,CAAmB,KAAKoc,YAAxB,EAAsCD,SAAtC,EAAiDlb,OAAjD,CAAP;AACH;;AAED,UAAIkb,SAAS,IAAI/d,6CAAK,CAACC,QAAN,CAAe8d,SAAf,CAAb,IAA0CA,SAAS,CAAC7G,UAAV,CAAqB,IAArB,CAA9C,EAA0E;AACtE6G,iBAAS,GAAGA,SAAS,CAACvU,KAAV,CAAgB,CAAhB,CAAZ;AACH;;AAED,UAAI,KAAKsK,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,KAFV;AAGIjD,aAAK,EAAE0W;AAHX,OADwB,EAMxB;AACInT,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,QAFV;AAGIkQ,WAAG,EAAE,EAHT;AAII3E,WAAG,EAAE,CAJT;AAKIxO,aAAK,EAAE0W;AALX,OANwB,EAaxB;AACInT,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAExE;AAHX,OAbwB,CAAxB,EAkBDgC,QAlBC,CAAJ,EAmBI;AAGJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,qBAA9B,EAAqD;AACjDuN,kBAAU,EAAEF,SADqC;AAEjDtI,qBAAa,EAAExS,KAAK,CAACJ,OAAD;AAF6B,OAArD,EAGG,MAHH,EAGWiH,IAHX,CAGgB,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAH3B,WAG2E,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAH9E;AAIH;;;WAED,uBAA6F;AAAA,UAAjFvI,OAAiF,uEAAvE,EAAuE;AAAA,UAAnEoZ,aAAmE,uEAAnD,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACzF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBmU,aAAjB,CAAJ,EAAqC;AACjC9T,gBAAQ,GAAG8T,aAAX;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe6F,aAAf,CAAJ,EAAmC;AACtCpZ,eAAO,GAAGoZ,aAAV;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKsc,WAAxB,EAAqC3e,OAArC,EAA8CoZ,aAA9C,CAAP;AAEJ,qBAKIpZ,OALJ;AAAA,2CACI8c,WADJ;AAAA,UACIA,WADJ,sCACkB,KADlB;AAAA,mCAEIhJ,GAFJ;AAAA,UAEIA,GAFJ,8BAEU,KAFV;AAAA,4CAGIsJ,aAHJ;AAAA,UAGIA,aAHJ,uCAGoB,CAHpB;AAAA,4CAIIC,kBAJJ;AAAA,UAIIA,kBAJJ,uCAIyB,CAJzB;AAQA,UAAI,KAAK9I,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEgV;AAHX,OADwB,EAMxB;AACIzR,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,KAFV;AAGIjD,aAAK,EAAEgM;AAHX,OANwB,EAWxB;AACIzI,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR;AAHX,OAXwB,EAgBxB;AACI/N,YAAI,EAAE,uBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEsV;AAHX,OAhBwB,EAqBxB;AACI/R,YAAI,EAAE,sBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuV;AAHX,OArBwB,CAAxB,EA0BD/X,QA1BC,CAAJ,EA2BI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC0V,aAAD,CADX;AAET0D,mBAAW,EAAE/V,QAAQ,CAAC+V,WAAD,CAFZ;AAGThJ,WAAG,EAAE/M,QAAQ,CAAC+M,GAAD,CAHJ;AAIT8K,iBAAS,EAAEpX,QAAQ,CAAC4V,aAAD,CAJV;AAKTyB,wBAAgB,EAAErX,QAAQ,CAAC6V,kBAAD;AALjB,OAAb;;AAQA,UAAIrd,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,oBAA9B,EAAoDzF,IAApD,EAA0D,MAA1D,EAAkEnB,IAAlE,CAAuE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAlF,WAAkI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAArI;AACH;;;WAED,qBAAmB;AACf,aAAO,KAAK2Q,SAAL,uBAAP;AACH;;;WAED,yBAAuB;AACnB,aAAO,KAAKI,aAAL,uBAAP;AACH;;;WAED,uBAAqB;AACjB,aAAO,KAAKsD,WAAL,uBAAP;AACH;;;WAED,uBAAqB;AACjB,aAAO,KAAK+B,WAAL,uBAAP;AACH;AAED;AACJ;AACA;AACA;;;;WACI,0BAA+G;AAAA,UAAhGzP,UAAgG,uEAAnF,KAAmF;AAAA,UAA5EkK,aAA4E,uEAA5D,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC3G,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBmU,aAAjB,CAAJ,EAAqC;AACjC9T,gBAAQ,GAAG8T,aAAX;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe6F,aAAf,CAAJ,EAAmC;AACtCpZ,eAAO,GAAGoZ,aAAV;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKyc,cAAxB,EAAwC5P,UAAxC,EAAoDkK,aAApD,EAAmEpZ,OAAnE,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR;AAHX,OADwB,CAAxB,EAMD9T,QANC,CAAJ,EAOI;AAEJ,UAAMiV,OAAO,GAAG,sCAAhB;AAEA,UAAI,CAACrL,UAAL,EACI,OAAO5J,QAAQ,CAACiV,OAAD,CAAf;AAEJ,UAAI,CAAC9Z,6CAAK,CAACuR,OAAN,CAAc9C,UAAd,CAAL,EACIA,UAAU,GAAG,CAACA,UAAD,CAAb;;AAhCuG,iDAkCrFA,UAlCqF;AAAA;;AAAA;AAkC3G,4DAAkC;AAAA,cAAzB+G,SAAyB;AAC9B,cAAI,CAACxV,6CAAK,CAAC8S,QAAN,CAAe0C,SAAf,CAAL,EACI,OAAO3Q,QAAQ,CAACiV,OAAD,CAAf;AACP;AArC0G;AAAA;AAAA;AAAA;AAAA;;AAuC3G,UAAM7O,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC0V,aAAD,CADX;AAETlK,kBAAU,EAAEA;AAFH,OAAb;;AAKA,UAAIlP,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,uBAA9B,EAAuDzF,IAAvD,EAA6D,MAA7D,EAAqEnB,IAArE,CAA0E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAArF,WAAqI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAxI;AACH;AAED;AACJ;AACA;AACA;;;;WACI,0BAA+G;AAAA,UAAhGwW,UAAgG,uEAAnF,KAAmF;AAAA,UAA5E3F,aAA4E,uEAA5D,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC3G,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBmU,aAAjB,CAAJ,EAAqC;AACjC9T,gBAAQ,GAAG8T,aAAX;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe6F,aAAf,CAAJ,EAAmC;AACtCpZ,eAAO,GAAGoZ,aAAV;AACAA,qBAAa,GAAG,KAAKvQ,OAAL,CAAalH,cAAb,CAA4BC,GAA5C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK2c,cAAxB,EAAwCD,UAAxC,EAAoD3F,aAApD,EAAmEpZ,OAAnE,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,QADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsR;AAHX,OADwB,EAMxB;AACI/N,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEiX,UAHX;AAIIzI,WAAG,EAAE;AAJT,OANwB,CAAxB,EAYDhR,QAZC,CAAJ,EAaI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC0V,aAAD,CADX;AAET6F,mBAAW,EAAEzX,QAAQ,CAACuX,UAAD;AAFZ,OAAb;;AAKA,UAAI/e,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,uBAA9B,EAAuDzF,IAAvD,EAA6D,MAA7D,EAAqEnB,IAArE,CAA0E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAArF,WAAqI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAxI;AACH;AAED;AACJ;AACA;AACA;;;;WACI,wBAAgI;AAAA,UAAnHwW,UAAmH,uEAAtG,KAAsG;AAAA,UAA/FG,UAA+F,uEAAlF,KAAkF;AAAA,UAA3E7E,YAA2E,uEAA5D,KAAKxR,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC5H,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBoV,YAAjB,CAAJ,EAAoC;AAChC/U,gBAAQ,GAAG+U,YAAX;AACAA,oBAAY,GAAG,KAAKxR,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe8G,YAAf,CAAJ,EAAkC;AACrCra,eAAO,GAAGqa,YAAV;AACAA,oBAAY,GAAG,KAAKxR,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK8c,YAAxB,EAAsCJ,UAAtC,EAAkDG,UAAlD,EAA8D7E,YAA9D,EAA4Era,OAA5E,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEuS;AAHX,OADwB,EAMxB;AACIhP,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEiX,UAHX;AAIIzI,WAAG,EAAE;AAJT,OANwB,EAYxB;AACIjL,YAAI,EAAE,cADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEoX;AAHX,OAZwB,CAAxB,EAiBD5Z,QAjBC,CAAJ,EAkBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC2W,YAAD,CADX;AAET4E,mBAAW,EAAEzX,QAAQ,CAACuX,UAAD,CAFZ;AAGTK,uBAAe,EAAEF;AAHR,OAAb;;AAMA,UAAIlf,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,wBAA9B,EAAwDzF,IAAxD,EAA8D,MAA9D,EAAsEnB,IAAtE,CAA2E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAtF,WAAsI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAzI;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkB8W,SAAlB,EAA6BC,YAA7B,EAA2CC,UAA3C,EAAkI;AAAA,UAA3EjD,YAA2E,uEAA5D,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC9H,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKmd,iBAAxB,EAA2CH,SAA3C,EAAsDC,YAAtD,EAAoEC,UAApE,EAAgFjD,YAAhF,EAA8Ftc,OAA9F,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuX;AAHX,OANwB,EAWxB;AACIhU,YAAI,EAAE,eADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEwX;AAHX,OAXwB,EAgBxB;AACIjU,YAAI,EAAE,aADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEyX;AAHX,OAhBwB,CAAxB,EAqBDja,QArBC,CAAJ,EAsBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAETmD,sBAAc,EAAE1Y,QAAQ,CAACsY,SAAD,CAFf;AAGTK,2BAAmB,EAAEJ,YAHZ;AAITK,uBAAe,EAAE,IAJR;AAIc;AACvBC,4BAAoB,EAAEL;AALb,OAAb;;AAQA,UAAIvf,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,uBAA9B,EAAuDzF,IAAvD,EAA6D,MAA7D,EAAqEnB,IAArE,CAA0E,UAAAsV,SAAS,EAAI;AACnFva,gBAAQ,CAAC,IAAD,EAAOua,SAAP,CAAR;AACH,OAFD,WAES,UAAAtX,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,6BAAoBuX,cAApB,EAAoCC,iBAApC,EAAuDC,eAAvD,EAAwEC,kBAAxE,EAAuK;AAAA,UAA3E3D,YAA2E,uEAA5D,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACnK,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6d,mBAAxB,EAA6CJ,cAA7C,EAA6DC,iBAA7D,EAAgFC,eAAhF,EAAiGC,kBAAjG,EAAqH3D,YAArH,EAAmItc,OAAnI,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,kBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEgY;AAHX,OANwB,EAWxB;AACIzU,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEkY;AAHX,OAXwB,EAgBxB;AACI3U,YAAI,EAAE,qBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEiY;AAHX,OAhBwB,EAqBxB;AACI1U,YAAI,EAAE,sBADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEmY;AAHX,OArBwB,CAAxB,EA0BD3a,QA1BC,CAAJ,EA2BI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAETmD,sBAAc,EAAE1Y,QAAQ,CAAC+Y,cAAD,CAFf;AAGTJ,2BAAmB,EAAEK,iBAHZ;AAITJ,uBAAe,EAAE5Y,QAAQ,CAACiZ,eAAD,CAJhB;AAKTJ,4BAAoB,EAAEK;AALb,OAAb;;AAQA,UAAIjgB,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,uBAA9B,EAAuDzF,IAAvD,EAA6D,MAA7D,EAAqEnB,IAArE,CAA0E,UAAAsV,SAAS,EAAI;AACnFva,gBAAQ,CAAC,IAAD,EAAOua,SAAP,CAAR;AACH,OAFD,WAES,UAAAtX,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,gCAAwJ;AAAA,UAAnI4X,UAAmI,uEAAtH,KAAsH;AAAA,UAA/Gd,SAA+G,uEAAnG,KAAmG;AAAA,UAA5Fe,WAA4F,uEAA9E,CAA8E;AAAA,UAA3E9D,YAA2E,uEAA5D,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACpJ,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKge,oBAAxB,EAA8CF,UAA9C,EAA0Dd,SAA1D,EAAqEe,WAArE,EAAkF9D,YAAlF,EAAgGtc,OAAhG,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuX;AAHX,OANwB,EAWxB;AACIhU,YAAI,EAAE,cADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsY,WAHX;AAII9J,WAAG,EAAE;AAJT,OAXwB,EAiBxB;AACIjL,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEqY,UAHX;AAII7J,WAAG,EAAE;AAJT,OAjBwB,CAAxB,EAuBDhR,QAvBC,CAAJ,EAwBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAETgE,mBAAW,EAAE9Y,QAAQ,CAAC2Y,UAAD,CAFZ;AAGTrF,gBAAQ,EAAE/T,QAAQ,CAACsY,SAAD,CAHT;AAITkB,aAAK,EAAE/Y,QAAQ,CAAC4Y,WAAD;AAJN,OAAb;;AAOA,UAAIpgB,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,uBAA9B,EAAuDzF,IAAvD,EAA6D,MAA7D,EAAqEnB,IAArE,CAA0E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAArF,WAAqI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAxI;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,kCAA0J;AAAA,UAAnI4X,UAAmI,uEAAtH,KAAsH;AAAA,UAA/Gd,SAA+G,uEAAnG,KAAmG;AAAA,UAA5Fe,WAA4F,uEAA9E,CAA8E;AAAA,UAA3E9D,YAA2E,uEAA5D,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAAgC;AAAA,UAA3B5B,OAA2B;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AACtJ,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKme,sBAAxB,EAAgDL,UAAhD,EAA4Dd,SAA5D,EAAuEe,WAAvE,EAAoF9D,YAApF,EAAkGtc,OAAlG,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuX;AAHX,OANwB,EAWxB;AACIhU,YAAI,EAAE,cADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEsY,WAHX;AAII9J,WAAG,EAAE;AAJT,OAXwB,EAiBxB;AACIjL,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEqY,UAHX;AAII7J,WAAG,EAAE;AAJT,OAjBwB,CAAxB,EAuBDhR,QAvBC,CAAJ,EAwBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAETgE,mBAAW,EAAE9Y,QAAQ,CAAC2Y,UAAD,CAFZ;AAGTrF,gBAAQ,EAAE/T,QAAQ,CAACsY,SAAD,CAHT;AAITkB,aAAK,EAAE/Y,QAAQ,CAAC4Y,WAAD;AAJN,OAAb;;AAOA,UAAIpgB,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,yBAA9B,EAAyDzF,IAAzD,EAA+D,MAA/D,EAAuEnB,IAAvE,CAA4E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAvF,WAAuI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA1I;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,+BAMsC;AAAA,UANlB4X,UAMkB,uEANL,KAMK;AAAA,UALlBd,SAKkB,uEALN,KAKM;AAAA,UAJlBoB,eAIkB,uEAJA,CAIA;AAAA,UAHlBC,mBAGkB,uEAHI,CAGJ;AAAA,UAFlBpE,YAEkB,uEAFH,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAEzB;AAAA,UADlB5B,OACkB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAClC,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKse,mBAAxB,EAA6CR,UAA7C,EAAyDd,SAAzD,EAAoEoB,eAApE,EAAqFC,mBAArF,EAA0GpE,YAA1G,EAAwHtc,OAAxH,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,kBAFV;AAGIjD,aAAK,EAAEuX;AAHX,OANwB,EAWxB;AACIhU,YAAI,EAAE,iBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE2Y,eAHX;AAIInK,WAAG,EAAE;AAJT,OAXwB,EAiBxB;AACIjL,YAAI,EAAE,qBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE4Y,mBAHX;AAIIpK,WAAG,EAAE;AAJT,OAjBwB,EAuBxB;AACIjL,YAAI,EAAE,YADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEqY,UAHX;AAII7J,WAAG,EAAE;AAJT,OAvBwB,CAAxB,EA6BDhR,QA7BC,CAAJ,EA8BI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAETgE,mBAAW,EAAE9Y,QAAQ,CAAC2Y,UAAD,CAFZ;AAGTrF,gBAAQ,EAAE,KAAKjS,OAAL,CAAa+X,SAAb,CAAuBvB,SAAvB,CAHD;AAITkB,aAAK,EAAE/Y,QAAQ,CAACiZ,eAAD,CAJN;AAKTI,gBAAQ,EAAErZ,QAAQ,CAACkZ,mBAAD;AALT,OAAb;;AAQA,UAAI1gB,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,4BAA9B,EAA4DzF,IAA5D,EAAkE,MAAlE,EAA0EnB,IAA1E,CAA+E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAA1F,WAA0I,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA7I;AACH;AAED;AACJ;AACA;;;;WACI,yBAIgC;AAAA,UAJlBmE,eAIkB,uEAJA,KAIA;AAAA,UAHlB2B,iBAGkB,uEAHE,KAGF;AAAA,UAFlBiO,YAEkB,uEAFH,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAEzB;AAAA,UADlB5B,OACkB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC5B,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKye,aAAxB,EAAuCpU,eAAvC,EAAwD2B,iBAAxD,EAA2EiO,YAA3E,EAAyFtc,OAAzF,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE4E;AAHX,OANwB,EAWxB;AACIrB,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEuG,iBAHX;AAIIiI,WAAG,EAAE,CAJT;AAKI2E,WAAG,EAAE;AALT,OAXwB,CAAxB,EAkBD3V,QAlBC,CAAJ,EAmBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAET7P,wBAAgB,EAAE/I,KAAK,CAACgJ,eAAD,CAFd;AAGTqP,qCAA6B,EAAE1N;AAHtB,OAAb;;AAMA,UAAIrO,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsDzF,IAAtD,EAA4D,MAA5D,EAAoEnB,IAApE,CAAyE,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAApF,WAAoI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAvI;AACH;AAED;AACJ;AACA;;;;WACI,6BAIoC;AAAA,UAJlBmE,eAIkB,uEAJA,KAIA;AAAA,UAHlBmO,iBAGkB,uEAHE,KAGF;AAAA,UAFlByB,YAEkB,uEAFH,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAEzB;AAAA,UADlB5B,OACkB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAEhC,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAIS,6CAAK,CAACwE,UAAN,CAAiBqX,YAAjB,CAAJ,EAAoC;AAChChX,gBAAQ,GAAGgX,YAAX;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH,OAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAe+I,YAAf,CAAJ,EAAkC;AACrCtc,eAAO,GAAGsc,YAAV;AACAA,oBAAY,GAAG,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAA3C;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK0e,iBAAxB,EAA2CrU,eAA3C,EAA4DmO,iBAA5D,EAA+EyB,YAA/E,EAA6Ftc,OAA7F,CAAP;AAEJ,UAAI,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,OADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAEwU;AAHX,OADwB,EAMxB;AACIjR,YAAI,EAAE,UADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE4E;AAHX,OANwB,EAWxB;AACIrB,YAAI,EAAE,mBADV;AAEIN,YAAI,EAAE,SAFV;AAGIjD,aAAK,EAAE+S,iBAHX;AAIIvE,WAAG,EAAE,CAJT;AAKI2E,WAAG,EAAE;AALT,OAXwB,CAAxB,EAkBD3V,QAlBC,CAAJ,EAmBI;AAEJ,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAExS,KAAK,CAAC4Y,YAAD,CADX;AAET7P,wBAAgB,EAAE/I,KAAK,CAACgJ,eAAD,CAFd;AAGTsP,2BAAmB,EAAEnB;AAHZ,OAAb;;AAMA,UAAI7a,OAAO,IAAIA,OAAO,CAACmV,YAAvB,EAAqC;AACjCzJ,YAAI,CAAC2J,aAAL,GAAqBrV,OAAO,CAACmV,YAA7B;AACH;;AAED,WAAKtM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,0BAA9B,EAA0DzF,IAA1D,EAAgE,MAAhE,EAAwEnB,IAAxE,CAA6E,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAAxF,WAAwI,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAA3I;AACH;;;WAED,0BAAiByY,WAAjB,EAA8BjW,IAA9B,EAAoC;AAChC,UAAIiW,WAAJ,EAAiB;AACb,YAAIA,WAAW,CAACjW,IAAZ,KAAqBA,IAArB,IACG,CAACiW,WAAW,CAACC,eADhB,IAEG,CAACxgB,6CAAK,CAACC,QAAN,CAAesgB,WAAW,CAACC,eAA3B,CAFJ,IAGG,CAACxgB,6CAAK,CAACwC,SAAN,CAAgB+d,WAAW,CAACE,SAA5B,CAHJ,IAIGF,WAAW,CAACE,SAAZ,GAAwB,CAJ3B,IAKG,CAACF,WAAW,CAACtR,IALpB,EAME;AACE,iBAAO,KAAP;AACH;;AATY,oDAUGsR,WAAW,CAACtR,IAVf;AAAA;;AAAA;AAUb,iEAAkC;AAAA,gBAAzB3N,GAAyB;;AAC9B,gBAAI,CAAC,KAAK8G,OAAL,CAAapF,SAAb,CAAuB1B,GAAG,CAACuB,OAA3B,CAAD,IACG,CAAC7C,6CAAK,CAACwC,SAAN,CAAgBlB,GAAG,CAACof,MAApB,CADJ,IAEGpf,GAAG,CAACof,MAAJ,GAAaH,WAAW,CAACE,SAF5B,IAGGnf,GAAG,CAACof,MAAJ,GAAa,CAHhB,IAIIpW,IAAI,KAAK,CAAT,IAAc,CAACiW,WAAW,CAACI,UAJnC,EAKE;AACE,qBAAO,KAAP;AACH;AACJ;AAnBY;AAAA;AAAA;AAAA;AAAA;AAoBhB;;AACD,aAAO,IAAP;AACH;;;WAED,oCAI2C;AAAA,UAJlB9E,YAIkB,uEAJH,KAAKzT,OAAL,CAAalH,cAAb,CAA4BC,GAIzB;AAAA,UAHlByf,gBAGkB,uEAHC,KAGD;AAAA,UAFlBC,kBAEkB,uEAFG,KAEH;AAAA,UADlBC,kBACkB,uEADG,KACH;AAAA,UAAlBjc,QAAkB,uEAAP,KAAO;;AAEvC,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBsc,kBAAjB,CAAJ,EAA0C;AACtCjc,gBAAQ,GAAGic,kBAAX;AACAA,0BAAkB,GAAG,KAArB;AACH;;AAED,UAAI9gB,6CAAK,CAACwE,UAAN,CAAiBqc,kBAAjB,CAAJ,EAA0C;AACtChc,gBAAQ,GAAGgc,kBAAX;AACAA,0BAAkB,GAAGC,kBAAkB,GAAG,KAA1C;AACH;;AAED,UAAI9gB,6CAAK,CAACwE,UAAN,CAAiBoc,gBAAjB,CAAJ,EAAwC;AACpC/b,gBAAQ,GAAG+b,gBAAX;AACAA,wBAAgB,GAAGC,kBAAkB,GAAGC,kBAAkB,GAAG,KAA7D;AACH;;AAED,UAAI,CAACjc,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKmf,wBAAxB,EAAkDlF,YAAlD,EAAgE+E,gBAAhE,EAAkFC,kBAAlF,EAAsGC,kBAAtG,CAAP;AAEJ,UAAI,CAAC,KAAK1Y,OAAL,CAAapF,SAAb,CAAuB6Y,YAAvB,CAAL,EACI,OAAOhX,QAAQ,CAAC,+BAAD,CAAf;;AAEJ,UAAI,CAAC,KAAKmc,gBAAL,CAAsBJ,gBAAtB,EAAwC,CAAxC,CAAL,EAAiD;AAC7C,eAAO/b,QAAQ,CAAC,mCAAD,CAAf;AACH;;AAED,UAAI,CAAC,KAAKmc,gBAAL,CAAsBH,kBAAtB,EAA0C,CAA1C,CAAL,EAAmD;AAC/C,eAAOhc,QAAQ,CAAC,qCAAD,CAAf;AACH;;AAED,UAAI,CAAC4P,KAAK,CAAClD,OAAN,CAAcuP,kBAAd,CAAL,EAAwC;AACpCA,0BAAkB,GAAG,CAACA,kBAAD,CAArB;AACH;;AAjCsC,kDAmCTA,kBAnCS;AAAA;;AAAA;AAmCvC,+DAAkD;AAAA,cAAzCG,iBAAyC;;AAC9C,cAAI,CAAC,KAAKD,gBAAL,CAAsBC,iBAAtB,EAAyC,CAAzC,CAAL,EAAkD;AAC9C,mBAAOpc,QAAQ,CAAC,qCAAD,CAAf;AACH;AACJ;AAvCsC;AAAA;AAAA;AAAA;AAAA;;AAyCvC,UAAMoG,IAAI,GAAG;AACTwK,qBAAa,EAAEoG;AADN,OAAb;;AAGA,UAAI+E,gBAAJ,EAAsB;AAClB3V,YAAI,CAACiW,KAAL,GAAaN,gBAAb;AACH;;AACD,UAAIC,kBAAJ,EAAwB;AACpB5V,YAAI,CAACkW,OAAL,GAAeN,kBAAf;AACH;;AACD,UAAIC,kBAAJ,EAAwB;AACpB7V,YAAI,CAACmW,OAAL,GAAeN,kBAAkB,CAACze,MAAnB,KAA8B,CAA9B,GAAkCye,kBAAkB,CAAC,CAAD,CAApD,GAA0DA,kBAAzE;AACH;;AAED,WAAK1Y,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,gCAA9B,EAAgEzF,IAAhE,EAAsE,MAAtE,EAA8EnB,IAA9E,CAAmF,UAAAyB,WAAW;AAAA,eAAI2M,aAAa,CAAC3M,WAAD,EAAc1G,QAAd,CAAjB;AAAA,OAA9F,WAA8I,UAAAiD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAAjJ;AACH;;;;yLAED,iBAAcyD,WAAd,EAA2B1G,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,oBAESA,QAFT;AAAA;AAAA;AAAA;;AAAA,iDAGe,KAAKjD,aAAL,CAAmB,KAAKyf,OAAxB,EAAiC9V,WAAjC,CAHf;;AAAA;AAKI,qBAAKnD,OAAL,CAAaxI,QAAb,CACK8Q,OADL,CAEQ,sBAFR,EAGQnF,WAHR,EAIQ,MAJR,EAMKzB,IANL,CAMU,UAAAwX,cAAc,EAAI;AACpBA,gCAAc,GAAGA,cAAc,CAAC/V,WAAf,CAA2BA,WAA5C;;AACA,sBAAI,OAAOA,WAAW,CAACgW,OAAnB,KAA+B,SAAnC,EAA8C;AAC1CD,kCAAc,CAACC,OAAf,GAAyBhW,WAAW,CAACgW,OAArC;AACH;;AACD1c,0BAAQ,CAAC,IAAD,EAAOyc,cAAP,CAAR;AACH,iBAZL,WAaW,UAAAxZ,GAAG;AAAA,yBAAIjD,QAAQ,CAAC,wCAAD,CAAZ;AAAA,iBAbd;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kMAqBA,kBAAuB0G,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoChM,uBAApC,8DAA8C,EAA9C;AAAkDsF,wBAAlD,8DAA6D,KAA7D;;AAAA,oBACSA,QADT;AAAA;AAAA;AAAA;;AAAA,kDAEe,KAAKjD,aAAL,CAAmB,KAAK4f,gBAAxB,EAA0CjW,WAA1C,EAAuDhM,OAAvD,CAFf;;AAAA;AAAA,qBAIQgM,WAAW,CAACT,SAJpB;AAAA;AAAA;AAAA;;AAAA,kDAKejG,QAAQ,CAAC,4DAAD,CALvB;;AAAA;AAAA,qBAOQtF,OAAO,CAAC0L,IAPhB;AAAA;AAAA;AAAA;;AAQQ,oBAAI1L,OAAO,CAACkiB,UAAR,KAAuB,KAA3B,EACIliB,OAAO,CAAC0L,IAAR,GAAe,KAAK7C,OAAL,CAAanF,KAAb,CAAmB1D,OAAO,CAAC0L,IAA3B,CAAf;AACJ1L,uBAAO,CAAC0L,IAAR,GAAe1L,OAAO,CAAC0L,IAAR,CAAa7F,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAAf;;AAVR,sBAWY7F,OAAO,CAAC0L,IAAR,CAAa5I,MAAb,KAAwB,CAXpC;AAAA;AAAA;AAAA;;AAAA,kDAYmBwC,QAAQ,CAAC,uBAAD,CAZ3B;;AAAA;AAaQ0G,2BAAW,CAACoJ,QAAZ,CAAqB1J,IAArB,GAA4B1L,OAAO,CAAC0L,IAApC;;AAbR;AAAA,qBAgBQ1L,OAAO,CAACmiB,SAhBhB;AAAA;AAAA;AAAA;;AAiBQniB,uBAAO,CAACmiB,SAAR,GAAoB3a,QAAQ,CAACxH,OAAO,CAACmiB,SAAR,GAAoB,IAArB,CAA5B;;AAjBR,sBAkBY7O,KAAK,CAACtT,OAAO,CAACmiB,SAAT,CAAL,IAA4BnW,WAAW,CAACoJ,QAAZ,CAAqBgN,UAArB,GAAkCpiB,OAAO,CAACmiB,SAA1C,IAAuD3R,IAAI,CAACC,GAAL,KAAa,IAlB5G;AAAA;AAAA;AAAA;;AAAA,kDAmBmBnL,QAAQ,CAAC,4BAAD,CAnB3B;;AAAA;AAoBQ0G,2BAAW,CAACoJ,QAAZ,CAAqBgN,UAArB,IAAmCpiB,OAAO,CAACmiB,SAA3C;;AApBR;AAuBI,qBAAKL,OAAL,CAAa9V,WAAb,EAA0B1G,QAA1B;;AAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kMA0BA,kBAAuB0G,WAAvB,EAAoCmW,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C7c,wBAA/C,8DAA0D,KAA1D;;AAAA,oBACSA,QADT;AAAA;AAAA;AAAA;;AAAA,kDAEe,KAAKjD,aAAL,CAAmB,KAAKggB,gBAAxB,EAA0CrW,WAA1C,EAAuDmW,SAAvD,CAFf;;AAAA;AAII,qBAAKF,gBAAL,CAAsBjW,WAAtB,EAAmC;AAACmW,2BAAS,EAATA;AAAD,iBAAnC,EAAgD7c,QAAhD;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+LAOA,kBAAoB0G,WAApB,EAAiCN,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCwW,0BAAvC,8DAAoD,MAApD;AAA4D5c,wBAA5D,8DAAuE,KAAvE;;AAEI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBid,UAAjB,CAAJ,EAAkC;AAC9B5c,0BAAQ,GAAG4c,UAAX;AACAA,4BAAU,GAAG,MAAb;AACH;;AALL,oBAOS5c,QAPT;AAAA;AAAA;AAAA;;AAAA,kDAQe,KAAKjD,aAAL,CAAmB,KAAKigB,aAAxB,EAAuCtW,WAAvC,EAAoDN,IAApD,EAA0DwW,UAA1D,CARf;;AAAA;AAUI,qBAAKD,gBAAL,CAAsBjW,WAAtB,EAAmC;AAACN,sBAAI,EAAJA,IAAD;AAAOwW,4BAAU,EAAVA;AAAP,iBAAnC,EAAuD5c,QAAvD;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACt9DJ;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMid,kBAAkB,GAAG,8BAA3B,C,CACA;;AACA,IAAMC,kBAAkB,GAAG,kCAA3B;;AAEA,SAAS9e,KAAT,CAAeoE,KAAf,EAAsB;AAClB,SAAO/H,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsBoE,KAAtB,CAAP;AACH;;IAEoB5G,G;AACjB,iBAA6B;AAAA,QAAjB2H,OAAiB,uEAAP,KAAO;;AAAA;;AACzB,QAAI,CAACA,OAAD,IAAY,CAACA,OAAD,YAAoB9I,6CAApC,EACI,MAAM,IAAImD,KAAJ,CAAU,8BAAV,CAAN;AAEJ,SAAK2F,OAAL,GAAeA,OAAf;AACA,SAAKxG,aAAL,GAAqBC,qDAAa,CAAC,IAAD,CAAlC;AACA,SAAKka,KAAL,GAAa;AACTC,eAAS,EAAE;AADF,KAAb;AAGA,SAAKlI,SAAL,GAAiB,IAAIC,wDAAJ,CAAc3L,OAAd,CAAjB;AACH;;;;WAED,qBAAY4Z,KAAZ,EAAmB;AACf,6CACOA,KADP;AAEIpX,YAAI,EAAE,KAAKxC,OAAL,CAAayD,MAAb,CAAoBmW,KAAK,CAACpX,IAA1B,CAFV;AAGIqS,YAAI,EAAE+E,KAAK,CAAC/E,IAAN,IAAc,KAAK7U,OAAL,CAAayD,MAAb,CAAoBmW,KAAK,CAAC/E,IAA1B,CAHxB;AAIIZ,mBAAW,EAAE2F,KAAK,CAAC3F,WAAN,IAAqB,KAAKjU,OAAL,CAAayD,MAAb,CAAoBmW,KAAK,CAAC3F,WAA1B,CAJtC;AAKIhJ,WAAG,EAAE2O,KAAK,CAAC3O,GAAN,IAAa,KAAKjL,OAAL,CAAayD,MAAb,CAAoBmW,KAAK,CAAC3O,GAA1B;AALtB;AAOH;;;WAED,2BAAkC;AAAA,UAAlBxO,QAAkB,uEAAP,KAAO;AAC9B,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKqgB,eAAxB,CAAP;AACJ,WAAK7Z,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,oBAA9B,EAAoD5G,IAApD,CAAyD,UAAAb,KAAK,EAAI;AAC9DpE,gBAAQ,CAAC,IAAD,EAAOoE,KAAP,CAAR;AACH,OAFD,WAES,UAAAnB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;;;WAED,oCAA2C;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AACvC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKsgB,wBAAxB,CAAP;AAEJ,WAAK9Z,OAAL,CAAa5I,YAAb,CAA0BkR,OAA1B,CAAkC,4BAAlC,EAAgE5G,IAAhE,CAAqE,UAAAb,KAAK,EAAI;AAC1EpE,gBAAQ,CAAC,IAAD,EAAOoE,KAAP,CAAR;AACH,OAFD,WAES,UAAAnB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;;;WAED,oBAA8D;AAAA,UAArDmB,KAAqD,uEAA7C,KAAKb,OAAL,CAAapH,YAAgC;AAAA,UAAlB6D,QAAkB,uEAAP,KAAO;;AAC1D,UAAI7E,6CAAK,CAACwE,UAAN,CAAiByE,KAAjB,CAAJ,EAA6B;AACzBpE,gBAAQ,GAAGoE,KAAX;AACAA,aAAK,GAAG,KAAKb,OAAL,CAAapH,YAArB;AACH;;AAED,UAAI,CAAC6D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKugB,QAAxB,EAAkClZ,KAAlC,CAAP;AAEJ,UAAIA,KAAK,KAAK,KAAd,EACI,OAAOpE,QAAQ,CAAC,8BAAD,CAAf;AAEJ,UAAIoE,KAAK,IAAI,UAAb,EACIA,KAAK,GAAG,CAAR;AAEJ,UAAIA,KAAK,IAAI,QAAb,EACI,OAAO,KAAKgZ,eAAL,CAAqBpd,QAArB,CAAP;AAEJ,UAAIgO,KAAK,CAAC5J,KAAD,CAAL,IAAgBjJ,6CAAK,CAAC+E,KAAN,CAAYkE,KAAZ,CAApB,EACI,OAAO,KAAKmZ,cAAL,CAAoBnZ,KAApB,EAA2BpE,QAA3B,CAAP;AAEJ,WAAKwd,gBAAL,CAAsBpZ,KAAtB,EAA6BpE,QAA7B;AACH;;;WAED,wBAAeyd,SAAf,EAA4C;AAAA,UAAlBzd,QAAkB,uEAAP,KAAO;AACxC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKwgB,cAAxB,EAAwCE,SAAxC,CAAP;AAEJ,WAAKla,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,qBAA9B,EAAqD;AACjDrJ,aAAK,EAAEib;AAD0C,OAArD,EAEG,MAFH,EAEWxY,IAFX,CAEgB,UAAAb,KAAK,EAAI;AACrB,YAAI,CAAC1F,MAAM,CAAC0L,IAAP,CAAYhG,KAAZ,EAAmB5G,MAAxB,EACI,OAAOwC,QAAQ,CAAC,iBAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAOoE,KAAP,CAAR;AACH,OAPD,WAOS,UAAAnB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;WAED,0BAAiBxF,OAAjB,EAA4C;AAAA,UAAlBuC,QAAkB,uEAAP,KAAO;AACxC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKygB,gBAAxB,EAA0C/f,OAA1C,CAAP;AAEJ,UAAI,CAACtC,6CAAK,CAACwC,SAAN,CAAgBF,OAAhB,CAAD,IAA6BA,OAAO,GAAG,CAA3C,EACI,OAAOuC,QAAQ,CAAC,+BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsD;AAClD2F,WAAG,EAAEtP,QAAQ,CAACzE,OAAD;AADqC,OAAtD,EAEG,MAFH,EAEWwH,IAFX,CAEgB,UAAAb,KAAK,EAAI;AACrB,YAAI,CAAC1F,MAAM,CAAC0L,IAAP,CAAYhG,KAAZ,EAAmB5G,MAAxB,EACI,OAAOwC,QAAQ,CAAC,iBAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAOoE,KAAP,CAAR;AACH,OAPD,WAOS,UAAAnB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;WAED,oCAA8E;AAAA,UAArDmB,KAAqD,uEAA7C,KAAKb,OAAL,CAAapH,YAAgC;AAAA,UAAlB6D,QAAkB,uEAAP,KAAO;;AAC1E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiByE,KAAjB,CAAJ,EAA6B;AACzBpE,gBAAQ,GAAGoE,KAAX;AACAA,aAAK,GAAG,KAAKb,OAAL,CAAapH,YAArB;AACH;;AAED,UAAI,CAAC6D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK2gB,wBAAxB,EAAkDtZ,KAAlD,CAAP;AAEJ,WAAKkZ,QAAL,CAAclZ,KAAd,EAAqBa,IAArB,CAA0B,gBAAyB;AAAA,qCAAvB0Y,YAAuB;AAAA,YAAvBA,YAAuB,kCAAR,EAAQ;AAC/C3d,gBAAQ,CAAC,IAAD,EAAO2d,YAAY,CAACngB,MAApB,CAAR;AACH,OAFD,WAES,UAAAyF,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;;;WAED,mCAAoF;AAAA,UAA5DmB,KAA4D,uEAApD,KAAKb,OAAL,CAAapH,YAAuC;AAAA,UAAzBqI,KAAyB;AAAA,UAAlBxE,QAAkB,uEAAP,KAAO;;AAChF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB6E,KAAjB,CAAJ,EAA6B;AACzBxE,gBAAQ,GAAGwE,KAAX;AACAA,aAAK,GAAG,CAAR;AACH;;AAED,UAAIrJ,6CAAK,CAACwE,UAAN,CAAiByE,KAAjB,CAAJ,EAA6B;AACzBpE,gBAAQ,GAAGoE,KAAX;AACAA,aAAK,GAAG,KAAKb,OAAL,CAAapH,YAArB;AACH;;AAED,UAAI,CAAC6D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6gB,uBAAxB,EAAiDxZ,KAAjD,EAAwDI,KAAxD,CAAP;AAEJ,WAAK8Y,QAAL,CAAclZ,KAAd,EAAqBa,IAArB,CAA0B,iBAA4B;AAAA,uCAA1B0Y,YAA0B;AAAA,YAA1BA,YAA0B,mCAAX,KAAW;AAClD,YAAI,CAACA,YAAL,EACI3d,QAAQ,CAAC,gCAAD,CAAR,CADJ,KAEK,IAAI,OAAOwE,KAAP,IAAgB,QAApB,EAA8B;AAC/B,cAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGmZ,YAAY,CAACngB,MAAvC,EACIwC,QAAQ,CAAC,IAAD,EAAO2d,YAAY,CAACnZ,KAAD,CAAnB,CAAR,CADJ,KAGIxE,QAAQ,CAAC,oCAAD,CAAR;AACP,SALI,MAMDA,QAAQ,CAAC,IAAD,EAAO2d,YAAP,CAAR;AACP,OAVD,WAUS,UAAA1a,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAVZ;AAWH;;;WAED,wBAAe4J,aAAf,EAAgD;AAAA,UAAlB7M,QAAkB,uEAAP,KAAO;AAC5C,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK8gB,cAAxB,EAAwChR,aAAxC,CAAP;AAEJ,WAAKtJ,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,2BAA9B,EAA2D;AACvDrJ,aAAK,EAAEqK;AADgD,OAA3D,EAEG,MAFH,EAEW5H,IAFX,CAEgB,UAAAyB,WAAW,EAAI;AAC3B,YAAI,CAAChI,MAAM,CAAC0L,IAAP,CAAY1D,WAAZ,EAAyBlJ,MAA9B,EACI,OAAOwC,QAAQ,CAAC,uBAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAO0G,WAAP,CAAR;AACH,OAPD,WAOS,UAAAzD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;WAED,iCAAwB4J,aAAxB,EAAyD;AAAA,UAAlB7M,QAAkB,uEAAP,KAAO;AACrD,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK+gB,uBAAxB,EAAiDjR,aAAjD,CAAP;AAEJ,WAAKtJ,OAAL,CAAa5I,YAAb,CAA0BkR,OAA1B,CAAkC,mCAAlC,EAAuE;AACnErJ,aAAK,EAAEqK;AAD4D,OAAvE,EAEG,MAFH,EAEW5H,IAFX,CAEgB,UAAAyB,WAAW,EAAI;AAC3B,YAAI,CAAChI,MAAM,CAAC0L,IAAP,CAAY1D,WAAZ,EAAyBlJ,MAA9B,EACI,OAAOwC,QAAQ,CAAC,uBAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAO0G,WAAP,CAAR;AACH,OAPD,WAOS,UAAAzD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;WAED,uCAA8B4J,aAA9B,EAA+D;AAAA,UAAlB7M,QAAkB,uEAAP,KAAO;AAC3D,aAAO,KAAK+d,uBAAL,CAA6BlR,aAA7B,EAA4C;AAACgK,iBAAS,EAAE;AAAZ,OAA5C,EAAgE7W,QAAhE,CAAP;AACH;;;WAED,4BAAmB6M,aAAnB,EAAoD;AAAA,UAAlB7M,QAAkB,uEAAP,KAAO;AAChD,aAAO,KAAK+d,uBAAL,CAA6BlR,aAA7B,EAA4C;AAACgK,iBAAS,EAAE;AAAZ,OAA5C,EAA+D7W,QAA/D,CAAP;AACH;;;WAED,iCAAwB6M,aAAxB,EAAuCnS,OAAvC,EAAkE;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;AAC9D,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKghB,uBAAxB,EAAiDlR,aAAjD,EAAgEnS,OAAhE,CAAP;AAEJ,WAAK6I,OAAL,CAAa7I,OAAO,CAACmc,SAAR,GAAoB,cAApB,GAAqC,UAAlD,EAA8DhL,OAA9D,iBAA+EnR,OAAO,CAACmc,SAAR,GAAoB,UAApB,GAAiC,EAAhH,8BAA6I;AACzIrU,aAAK,EAAEqK;AADkI,OAA7I,EAEG,MAFH,EAEW5H,IAFX,CAEgB,UAAAyB,WAAW,EAAI;AAC3B1G,gBAAQ,CAAC,IAAD,EAAO0G,WAAP,CAAR;AACH,OAJD,WAIS,UAAAzD,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;;;WAED,oCAA8G;AAAA,UAArFjF,OAAqF,uEAA3E,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAA+C;AAAA,UAA1C0hB,KAA0C,uEAAlC,EAAkC;AAAA,UAA9BC,MAA8B,uEAArB,CAAqB;AAAA,UAAlBje,QAAkB,uEAAP,KAAO;;AAC1G,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBse,MAAjB,CAAJ,EAA8B;AAC1Bje,gBAAQ,GAAGie,MAAX;AACAA,cAAM,GAAG,CAAT;AACH;;AAED,UAAI9iB,6CAAK,CAACwE,UAAN,CAAiBqe,KAAjB,CAAJ,EAA6B;AACzBhe,gBAAQ,GAAGge,KAAX;AACAA,aAAK,GAAG,EAAR;AACH;;AAED,UAAI,CAAChe,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKmhB,wBAAxB,EAAkDlgB,OAAlD,EAA2DggB,KAA3D,EAAkEC,MAAlE,CAAP;AAEJjgB,aAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,aAAO,KAAKmgB,sBAAL,CAA4BngB,OAA5B,EAAqC,IAArC,EAA2CggB,KAA3C,EAAkDC,MAAlD,EAA0Dje,QAA1D,CAAP;AACH;;;WAED,sCAAgH;AAAA,UAArFhC,OAAqF,uEAA3E,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAA+C;AAAA,UAA1C0hB,KAA0C,uEAAlC,EAAkC;AAAA,UAA9BC,MAA8B,uEAArB,CAAqB;AAAA,UAAlBje,QAAkB,uEAAP,KAAO;;AAC5G,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBse,MAAjB,CAAJ,EAA8B;AAC1Bje,gBAAQ,GAAGie,MAAX;AACAA,cAAM,GAAG,CAAT;AACH;;AAED,UAAI9iB,6CAAK,CAACwE,UAAN,CAAiBqe,KAAjB,CAAJ,EAA6B;AACzBhe,gBAAQ,GAAGge,KAAX;AACAA,aAAK,GAAG,EAAR;AACH;;AAED,UAAI,CAAChe,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKqhB,0BAAxB,EAAoDpgB,OAApD,EAA6DggB,KAA7D,EAAoEC,MAApE,CAAP;AAEJjgB,aAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,aAAO,KAAKmgB,sBAAL,CAA4BngB,OAA5B,EAAqC,MAArC,EAA6CggB,KAA7C,EAAoDC,MAApD,EAA4Dje,QAA5D,CAAP;AACH;;;;wMAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA6BhC,uBAA7B,2DAAuC,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAnE;AAAwE+hB,yBAAxE,2DAAoF,KAApF;AAA2FL,qBAA3F,2DAAmG,EAAnG;AAAuGC,sBAAvG,2DAAgH,CAAhH;AAAmHje,wBAAnH,2DAA8H,KAA9H;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBse,MAAjB,CAAJ,EAA8B;AAC1Bje,0BAAQ,GAAGie,MAAX;AACAA,wBAAM,GAAG,CAAT;AACH;;AAED,oBAAI9iB,6CAAK,CAACwE,UAAN,CAAiBqe,KAAjB,CAAJ,EAA6B;AACzBhe,0BAAQ,GAAGge,KAAX;AACAA,uBAAK,GAAG,EAAR;AACH;;AAED,oBAAI7iB,6CAAK,CAACwE,UAAN,CAAiB0e,SAAjB,CAAJ,EAAiC;AAC7Bre,0BAAQ,GAAGqe,SAAX;AACAA,2BAAS,GAAG,KAAZ;AACH;;AAED,oBAAIljB,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,0BAAQ,GAAGhC,OAAX;AACAA,yBAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAnBL,oBAqBS0D,QArBT;AAAA;AAAA;AAAA;;AAAA,iDAsBe,KAAKjD,aAAL,CAAmB,KAAKohB,sBAAxB,EAAgDngB,OAAhD,EAAyDqgB,SAAzD,EAAoEL,KAApE,EAA2EC,MAA3E,CAtBf;;AAAA;AAAA,oBAwBS,CAAC,IAAD,EAAO,MAAP,EAAe,KAAf,EAAsBvgB,QAAtB,CAA+B2gB,SAA/B,CAxBT;AAAA;AAAA;AAAA;;AAAA,iDAyBere,QAAQ,CAAC,4DAAD,CAzBvB;;AAAA;AAAA,sBA2BQqe,SAAS,IAAI,KA3BrB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA6BqC7S,OAAO,CAAC8S,GAAR,CAAY,CACjC,KAAKH,sBAAL,CAA4BngB,OAA5B,EAAqC,MAArC,EAA6CggB,KAA7C,EAAoDC,MAApD,CADiC,EAEjC,KAAKE,sBAAL,CAA4BngB,OAA5B,EAAqC,IAArC,EAA2CggB,KAA3C,EAAkDC,MAAlD,CAFiC,CAAZ,CA7BrC;;AAAA;AAAA;AAAA;AA6BmB/c,oBA7BnB;AA6ByBoS,kBA7BzB;AAAA,iDAkCmBtT,QAAQ,CAAC,IAAD,EAAO,0FACfkB,IAAI,CAAC2I,GAAL,CAAS,UAAA0U,EAAE;AAAA,yBAAKA,EAAE,CAACF,SAAH,GAAe,MAAf,EAAuBE,EAA5B;AAAA,iBAAX,CADe,mFAEfjL,EAAE,CAACzJ,GAAH,CAAO,UAAA0U,EAAE;AAAA,yBAAKA,EAAE,CAACF,SAAH,GAAe,IAAf,EAAqBE,EAA1B;AAAA,iBAAT,CAFe,GAGpBta,IAHoB,CAGf,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACb,yBAAOA,CAAC,CAAC2L,QAAF,CAAW0O,SAAX,GAAuBta,CAAC,CAAC4L,QAAF,CAAW0O,SAAzC;AACH,iBALqB,CAAP,CAlC3B;;AAAA;AAAA;AAAA;AAAA,iDAyCmBxe,QAAQ,aAzC3B;;AAAA;AAAA,oBA6CS,KAAKuD,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CA7CT;AAAA;AAAA;AAAA;;AAAA,iDA8CegC,QAAQ,CAAC,0BAAD,CA9CvB;;AAAA;AAAA,sBAgDQ,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBqgB,KAAhB,CAAD,IAA2BA,KAAK,GAAG,CAAnC,IAAyCC,MAAM,IAAID,KAAK,GAAG,CAhDnE;AAAA;AAAA;AAAA;;AAAA,iDAiDehe,QAAQ,CAAC,wBAAD,CAjDvB;;AAAA;AAAA,sBAmDQ,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBsgB,MAAhB,CAAD,IAA4BA,MAAM,GAAG,CAnD7C;AAAA;AAAA;AAAA;;AAAA,iDAoDeje,QAAQ,CAAC,yBAAD,CApDvB;;AAAA;AAsDIhC,uBAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,qBAAKuF,OAAL,CAAa5I,YAAb,CAA0BkR,OAA1B,0CAAoEwS,SAApE,WAAqF;AACjFlb,yBAAO,EAAE;AACLnF,2BAAO,EAAPA;AADK,mBADwE;AAIjFigB,wBAAM,EAANA,MAJiF;AAKjFD,uBAAK,EAALA;AALiF,iBAArF,EAMG,MANH,EAMW/Y,IANX,CAMgB,iBAAmB;AAAA,sBAAjByB,WAAiB,SAAjBA,WAAiB;AAC/B1G,0BAAQ,CAAC,IAAD,EAAO0G,WAAP,CAAR;AACH,iBARD,WAQS,UAAAzD,GAAG;AAAA,yBAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,iBARZ;;AAxDJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAmEA,sBAAwE;AAAA,UAA7DjF,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACpE,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK0hB,UAAxB,EAAoCzgB,OAApC,CAAP;AAEJ,UAAI,CAAC,KAAKuF,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CAAL,EACI,OAAOgC,QAAQ,CAAC,0BAAD,CAAf;AAEJhC,aAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,WAAKuF,OAAL,CAAa5I,YAAb,CAA0BkR,OAA1B,CAAkC,2BAAlC,EAA+D;AAC3D7N,eAAO,EAAPA;AAD2D,OAA/D,EAEG,MAFH,EAEWiH,IAFX,CAEgB,UAAA9B,OAAO,EAAI;AACvBnD,gBAAQ,CAAC,IAAD,EAAOmD,OAAP,CAAR;AACH,OAJD,WAIS,UAAAF,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;;;WAED,0BAA6C;AAAA,UAA9BgP,EAA8B,uEAAzB,KAAyB;AAAA,UAAlBjS,QAAkB,uEAAP,KAAO;AACzC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK2hB,cAAxB,EAAwCzM,EAAxC,CAAP;AAEJ,WAAK0M,kBAAL,CAAwB1M,EAAxB,EAA4B;AAAC4E,iBAAS,EAAE;AAAZ,OAA5B,EAA+C7W,QAA/C;AACH;;;WAED,4BAAmBiS,EAAnB,EAAuBvX,OAAvB,EAAgCsF,QAAhC,EAA0C;AACtC,UAAI,KAAKiP,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,KAFV;AAGIjD,aAAK,EAAEyP;AAHX,OADwB,EAMxB;AACIlM,YAAI,EAAE,WADV;AAEIN,YAAI,EAAE,QAFV;AAGIkQ,WAAG,EAAE,EAHT;AAII3E,WAAG,EAAE,CAJT;AAKIxO,aAAK,EAAEyP;AALX,OANwB,CAAxB,EAaDjS,QAbC,CAAJ,EAcI;;AAEJ,UAAIiS,EAAE,CAACI,UAAH,CAAc,IAAd,CAAJ,EAAyB;AACrBJ,UAAE,GAAGA,EAAE,CAACtN,KAAH,CAAS,CAAT,CAAL;AACH;;AAED,WAAKpB,OAAL,CAAa7I,OAAO,CAACmc,SAAR,GAAoB,cAApB,GAAqC,UAAlD,EAA8DhL,OAA9D,iBAA+EnR,OAAO,CAACmc,SAAR,GAAoB,UAApB,GAAiC,EAAhH,sBAAqI;AACjIuC,kBAAU,EAAEnH;AADqH,OAArI,EAEG,MAFH,EAEWhN,IAFX,CAEgB,UAAA9B,OAAO,EAAI;AACvBnD,gBAAQ,CAAC,IAAD,EAAOmD,OAAP,CAAR;AACH,OAJD,WAIS,UAAAF,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;;;WAED,sBAAwE;AAAA,UAA7DjF,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACpE,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6hB,UAAxB,EAAoC5gB,OAApC,CAAP;AAEJ,WAAKygB,UAAL,CAAgBzgB,OAAhB,EAAyBiH,IAAzB,CAA8B,iBAAmB;AAAA,kCAAjB4Z,OAAiB;AAAA,YAAjBA,OAAiB,8BAAP,CAAO;AAC7C7e,gBAAQ,CAAC,IAAD,EAAO6e,OAAP,CAAR;AACH,OAFD,WAES,UAAA5b,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;;;WAED,iCAAmF;AAAA,UAA7DjF,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AAC/E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK+hB,qBAAxB,EAA+C9gB,OAA/C,CAAP;AAEJ,UAAI,CAAC,KAAKuF,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CAAL,EACI,OAAOgC,QAAQ,CAAC,0BAAD,CAAf;AAEJhC,aAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,WAAKuF,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,mBAA9B,EAAmD;AAC/C7N,eAAO,EAAPA;AAD+C,OAAnD,EAEG,MAFH,EAEWiH,IAFX,CAEgB,UAAA9B,OAAO,EAAI;AACvBnD,gBAAQ,CAAC,IAAD,EAAOmD,OAAP,CAAR;AACH,OAJD,WAIS,UAAAF,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;;;WAED,mCAA0BgP,EAA1B,EAAgD;AAAA,UAAlBjS,QAAkB,uEAAP,KAAO;AAC5C,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKgiB,yBAAxB,EAAmD9M,EAAnD,CAAP;AAEJ,WAAK0M,kBAAL,CAAwB1M,EAAxB,EAA4B;AAAC4E,iBAAS,EAAE;AAAZ,OAA5B,EAAgD7W,QAAhD;AACH;;;WAED,iCAAmF;AAAA,UAA7DhC,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AAC/E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKiiB,qBAAxB,EAA+ChhB,OAA/C,CAAP;AAEJ,WAAK8gB,qBAAL,CAA2B9gB,OAA3B,EAAoCiH,IAApC,CAAyC,iBAAmB;AAAA,kCAAjB4Z,OAAiB;AAAA,YAAjBA,OAAiB,8BAAP,CAAO;AACxD7e,gBAAQ,CAAC,IAAD,EAAO6e,OAAP,CAAR;AACH,OAFD,WAES,UAAA5b,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;;;WAED,wBAA0E;AAAA,UAA7DjF,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AACtE,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKkiB,YAAxB,EAAsCjhB,OAAtC,CAAP;AAEJ,UAAI,CAAC,KAAKuF,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CAAL,EACI,OAAOgC,QAAQ,CAAC,0BAAD,CAAf;AAEJhC,aAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,WAAKuF,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsD;AAClD7N,eAAO,EAAPA;AADkD,OAAtD,EAEG,MAFH,EAEWiH,IAFX,CAEgB,iBAAoE;AAAA,sCAAlEia,WAAkE;AAAA,YAAlEA,WAAkE,kCAApD,CAAoD;AAAA,uCAAjDC,YAAiD;AAAA,YAAjDA,YAAiD,mCAAlC,CAAkC;AAAA,kCAA/BC,OAA+B;AAAA,YAA/BA,OAA+B,8BAArB,CAAqB;AAAA,mCAAlBC,QAAkB;AAAA,YAAlBA,QAAkB,+BAAP,CAAO;AAChFrf,gBAAQ,CAAC,IAAD,EAAQmf,YAAY,GAAGD,WAAhB,IAAgCG,QAAQ,GAAGD,OAA3C,CAAP,CAAR;AACH,OAJD,WAIS,UAAAnc,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;;;WAED,oCAAsF;AAAA;;AAAA,UAA7DjF,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;;AAClF,UAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,gBAAQ,GAAGhC,OAAX;AACAA,eAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAED,UAAI,CAAC0D,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKuiB,wBAAxB,EAAkDthB,OAAlD,CAAP;AAEJ,UAAI,CAAC,KAAKuF,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CAAL,EACI,OAAOgC,QAAQ,CAAC,0BAAD,CAAf;AAEJhC,aAAO,GAAG,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B,CAAV;AAEA,WAAKuF,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,+BAA9B,EAA+D;AAC3D7N,eAAO,EAAPA;AAD2D,OAA/D,EAEG,MAFH,EAEWiH,IAFX,CAEgB,iBAA0B;AAAA,qCAAxBsa,UAAwB;AAAA,YAAxBA,UAAwB,iCAAX,KAAW;AACtC,YAAI,CAACA,UAAL,EACI,OAAOvf,QAAQ,CAAC,IAAD,EAAO,EAAP,CAAf;AAEJ,YAAMwf,MAAM,GAAGD,UAAU,CAAC1V,GAAX,CAAe,UAAAsT,KAAK,EAAI;AACnC,iBAAO,KAAI,CAACsC,WAAL,CAAiBtC,KAAjB,CAAP;AACH,SAFc,EAEZuC,MAFY,CAEL,UAACF,MAAD,EAASrC,KAAT,EAAmB;AACzB,iBAAOqC,MAAM,CAACrC,KAAK,CAACpX,IAAP,CAAN,GAAqBoX,KAArB,EAA4BqC,MAAnC;AACH,SAJc,EAIZ,EAJY,CAAf;AAMAxf,gBAAQ,CAAC,IAAD,EAAOwf,MAAP,CAAR;AACH,OAbD,WAaS,UAAAvc,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAbZ;AAcH;;;WAED,0BAAkD;AAAA;;AAAA,UAAnC0Q,OAAmC,uEAAzB,KAAyB;AAAA,UAAlB3T,QAAkB,uEAAP,KAAO;AAC9C,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK4iB,cAAxB,EAAwChM,OAAxC,CAAP;AAEJ,UAAIxY,6CAAK,CAACwC,SAAN,CAAgBgW,OAAhB,CAAJ,EACIA,OAAO,GAAGA,OAAO,CAACxS,QAAR,EAAV;AAEJ,UAAI,CAAChG,6CAAK,CAACC,QAAN,CAAeuY,OAAf,CAAD,IAA4B,CAACA,OAAO,CAACnW,MAAzC,EACI,OAAOwC,QAAQ,CAAC,2BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,4BAA9B,EAA4D;AACxDrJ,aAAK,EAAE,KAAKe,OAAL,CAAa9B,QAAb,CAAsBkS,OAAtB;AADiD,OAA5D,EAEG,MAFH,EAEW1O,IAFX,CAEgB,UAAAkY,KAAK,EAAI;AACrB,YAAI,CAACA,KAAK,CAACpX,IAAX,EACI,OAAO/F,QAAQ,CAAC,sBAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAO,MAAI,CAACyf,WAAL,CAAiBtC,KAAjB,CAAP,CAAR;AACH,OAPD,WAOS,UAAAla,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;WAED,qBAA4B;AAAA;;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AACxB,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6iB,SAAxB,CAAP;AAEJ,WAAKrc,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,kBAA9B,EAAkD5G,IAAlD,CAAuD,iBAAkB;AAAA,gCAAhB4a,KAAgB;AAAA,YAAhBA,KAAgB,4BAAR,EAAQ;AACrE7f,gBAAQ,CAAC,IAAD,EAAO6f,KAAK,CAAChW,GAAN,CAAU;AAAA,oCAAE7L,OAAF;AAAA,cAAYkB,IAAZ,iBAAYA,IAAZ;AAAA,cAAkB4gB,IAAlB,iBAAkBA,IAAlB;AAAA,2BAClB,MAAI,CAACvc,OAAL,CAAayD,MAAb,CAAoB9H,IAApB,CADkB,cACW4gB,IADX;AAAA,SAAV,CAAP,CAAR;AAGH,OAJD,WAIS,UAAA7c,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;;;WAED,yBAAqD;AAAA,UAAvCuE,KAAuC,uEAA/B,CAA+B;AAAA,UAA5BuY,GAA4B,uEAAtB,EAAsB;AAAA,UAAlB/f,QAAkB,uEAAP,KAAO;;AACjD,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBogB,GAAjB,CAAJ,EAA2B;AACvB/f,gBAAQ,GAAG+f,GAAX;AACAA,WAAG,GAAG,EAAN;AACH;;AAED,UAAI5kB,6CAAK,CAACwE,UAAN,CAAiB6H,KAAjB,CAAJ,EAA6B;AACzBxH,gBAAQ,GAAGwH,KAAX;AACAA,aAAK,GAAG,CAAR;AACH;;AAED,UAAI,CAACxH,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKijB,aAAxB,EAAuCxY,KAAvC,EAA8CuY,GAA9C,CAAP;AAEJ,UAAI,CAAC5kB,6CAAK,CAACwC,SAAN,CAAgB6J,KAAhB,CAAD,IAA2BA,KAAK,GAAG,CAAvC,EACI,OAAOxH,QAAQ,CAAC,iCAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBoiB,GAAhB,CAAD,IAAyBA,GAAG,IAAIvY,KAApC,EACI,OAAOxH,QAAQ,CAAC,+BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,4BAA9B,EAA4D;AACxDoU,gBAAQ,EAAE/d,QAAQ,CAACsF,KAAD,CADsC;AAExD0Y,cAAM,EAAEhe,QAAQ,CAAC6d,GAAD,CAAR,GAAgB;AAFgC,OAA5D,EAGG,MAHH,EAGW9a,IAHX,CAGgB,kBAAkB;AAAA,kCAAhBb,KAAgB;AAAA,YAAhBA,KAAgB,6BAAR,EAAQ;AAC9BpE,gBAAQ,CAAC,IAAD,EAAOoE,KAAP,CAAR;AACH,OALD,WAKS,UAAAnB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OALZ;AAMH;;;WAED,oCAA2C;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AACvC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKojB,wBAAxB,CAAP;AAEJ,WAAK5c,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsD5G,IAAtD,CAA2D,kBAAsB;AAAA,sCAApBmb,SAAoB;AAAA,YAApBA,SAAoB,iCAAR,EAAQ;AAC7EpgB,gBAAQ,CAAC,IAAD,EAAOogB,SAAP,CAAR;AACH,OAFD,WAES,UAAAnd,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;;;WAED,sBAAoD;AAAA;;AAAA,UAAzC+a,KAAyC,uEAAjC,CAAiC;AAAA,UAA9BC,MAA8B,uEAArB,CAAqB;AAAA,UAAlBje,QAAkB,uEAAP,KAAO;;AAChD,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBse,MAAjB,CAAJ,EAA8B;AAC1Bje,gBAAQ,GAAGie,MAAX;AACAA,cAAM,GAAG,CAAT;AACH;;AAED,UAAI9iB,6CAAK,CAACwE,UAAN,CAAiBqe,KAAjB,CAAJ,EAA6B;AACzBhe,gBAAQ,GAAGge,KAAX;AACAA,aAAK,GAAG,CAAR;AACH;;AAED,UAAI,CAAChe,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKsjB,UAAxB,EAAoCrC,KAApC,EAA2CC,MAA3C,CAAP;AAEJ,UAAI,CAAC9iB,6CAAK,CAACwC,SAAN,CAAgBqgB,KAAhB,CAAD,IAA2BA,KAAK,GAAG,CAAnC,IAAyCC,MAAM,IAAID,KAAK,GAAG,CAA/D,EACI,OAAOhe,QAAQ,CAAC,wBAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBsgB,MAAhB,CAAD,IAA4BA,MAAM,GAAG,CAAzC,EACI,OAAOje,QAAQ,CAAC,yBAAD,CAAf;;AAEJ,UAAI,CAACge,KAAL,EAAY;AACR,eAAO,KAAKza,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,0BAA9B,EAA0D5G,IAA1D,CAA+D,kBAAuB;AAAA,yCAArBsa,UAAqB;AAAA,cAArBA,UAAqB,kCAAR,EAAQ;AACzFvf,kBAAQ,CAAC,IAAD,EAAOuf,UAAU,CAAC1V,GAAX,CAAe,UAAAsT,KAAK;AAAA,mBAAI,MAAI,CAACsC,WAAL,CAAiBtC,KAAjB,CAAJ;AAAA,WAApB,CAAP,CAAR;AACH,SAFM,WAEE,UAAAla,GAAG;AAAA,iBAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,SAFL,CAAP;AAGH;;AAED,WAAKM,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,mCAA9B,EAAmE;AAC/DoS,cAAM,EAAE/b,QAAQ,CAAC+b,MAAD,CAD+C;AAE/DD,aAAK,EAAE9b,QAAQ,CAAC8b,KAAD;AAFgD,OAAnE,EAGG,MAHH,EAGW/Y,IAHX,CAGgB,kBAAuB;AAAA,uCAArBsa,UAAqB;AAAA,YAArBA,UAAqB,kCAAR,EAAQ;AACnCvf,gBAAQ,CAAC,IAAD,EAAOuf,UAAU,CAAC1V,GAAX,CAAe,UAAAsT,KAAK;AAAA,iBAAI,MAAI,CAACsC,WAAL,CAAiBtC,KAAjB,CAAJ;AAAA,SAApB,CAAP,CAAR;AACH,OALD,WAKS,UAAAla,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OALZ;AAMH;;;WAED,kCAAyC;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AACrC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKujB,sBAAxB,CAAP;AAEJ,WAAK/c,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,+BAA9B,EAA+D5G,IAA/D,CAAoE,kBAAgB;AAAA,gCAAduM,GAAc;AAAA,YAAdA,GAAc,2BAAR,CAAC,CAAO;AAChF,YAAIA,GAAG,IAAI,CAAC,CAAZ,EACI,OAAOxR,QAAQ,CAAC,0CAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAOnC,IAAI,CAAC0iB,KAAL,CAAW/O,GAAG,GAAG,IAAjB,CAAP,CAAR;AACH,OALD,WAKS,UAAAvO,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OALZ;AAMH;;;WAED,qBAAYmE,eAAZ,EAA+C;AAAA;;AAAA,UAAlBpH,QAAkB,uEAAP,KAAO;AAC3C,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKsK,WAAxB,EAAqCD,eAArC,CAAP;AAEJ,UAAI,CAAC,KAAK7D,OAAL,CAAapF,SAAb,CAAuBiJ,eAAvB,CAAL,EACI,OAAOpH,QAAQ,CAAC,mCAAD,CAAf;;AAEJ,UAAI,KAAKkX,KAAL,CAAWC,SAAX,CAAqB/P,eAArB,CAAJ,EAA2C;AACvCpH,gBAAQ,CAAC,IAAD,EAAO,KAAKkX,KAAL,CAAWC,SAAX,CAAqB/P,eAArB,CAAP,CAAR;AACA;AACH;;AAEDA,qBAAe,GAAG,KAAK7D,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BgJ,eAA3B,CAAlB;AAEA,WAAK7D,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,oBAA9B,EAAoD;AAChDrJ,aAAK,EAAE4E;AADyC,OAApD,EAEGnC,IAFH,CAEQ,UAAA6B,QAAQ,EAAI;AAChB,YAAIA,QAAQ,CAAClJ,KAAb,EACI,OAAOoC,QAAQ,CAAC,yBAAD,CAAf;AACJ,cAAI,CAACkX,KAAL,CAAWC,SAAX,CAAqB/P,eAArB,IAAwCN,QAAxC;AACA9G,gBAAQ,CAAC,IAAD,EAAO8G,QAAP,CAAR;AACH,OAPD,WAOS,UAAA7D,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;;+LAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoB8D,uBAApB,8DAA8B,KAA9B;AAAqCd,yBAArC,8DAAiD,KAAjD;AAAwDjI,uBAAxD,8DAAkE,KAAKuF,OAAL,CAAalH,cAAb,CAA4BE,MAA9F;AAAsGgU,6BAAtG,8DAAsH,IAAtH;AAA4HvQ,wBAA5H,8DAAuI,KAAvI;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,0BAAQ,GAAGhC,OAAX;AACAA,yBAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BE,MAAtC;AACAgU,+BAAa,GAAG,IAAhB;AACH;;AAED,oBAAIpV,6CAAK,CAACwE,UAAN,CAAiB4Q,aAAjB,CAAJ,EAAqC;AACjCvQ,0BAAQ,GAAGuQ,aAAX;AACAA,+BAAa,GAAG,IAAhB;AACH;;AAVL,oBAYSvQ,QAZT;AAAA;AAAA;AAAA;;AAAA,kDAae,KAAKjD,aAAL,CAAmB,KAAKyjB,aAAxB,EAAuCzZ,OAAvC,EAAgDd,SAAhD,EAA2DjI,OAA3D,EAAoEuS,aAApE,CAbf;;AAAA;AAAA,oBAeSpV,6CAAK,CAAC+E,KAAN,CAAY6G,OAAZ,CAfT;AAAA;AAAA;AAAA;;AAAA,kDAgBe/G,QAAQ,CAAC,4BAAD,CAhBvB;;AAAA;AAAA,qBAkBQpE,GAAG,CAAC6kB,eAAJ,CAAoB1Z,OAApB,EAA6B/I,OAA7B,EAAsCiI,SAAtC,EAAiDsK,aAAjD,CAlBR;AAAA;AAAA;AAAA;;AAAA,kDAmBevQ,QAAQ,CAAC,IAAD,EAAO,IAAP,CAnBvB;;AAAA;AAqBIA,wBAAQ,CAAC,0BAAD,CAAR;;AArBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;sLA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAW0G,2BAAX,8DAAyB,KAAzB;AAAgC5L,0BAAhC,8DAA6C,KAAKyI,OAAL,CAAanH,iBAA1D;AAA6EmU,6BAA7E,8DAA6F,IAA7F;AAAmGC,wBAAnG,8DAA8G,KAA9G;AAAqHxQ,wBAArH,8DAAgI,KAAhI;;AAEI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiB6Q,QAAjB,CAAJ,EAAgC;AAC5BxQ,0BAAQ,GAAGwQ,QAAX;AACAA,0BAAQ,GAAG,KAAX;AACH;;AAED,oBAAIrV,6CAAK,CAACwE,UAAN,CAAiB4Q,aAAjB,CAAJ,EAAqC;AACjCvQ,0BAAQ,GAAGuQ,aAAX;AACAA,+BAAa,GAAG,IAAhB;AACAC,0BAAQ,GAAG,KAAX;AACH;;AAED,oBAAIrV,6CAAK,CAACwE,UAAN,CAAiB7E,UAAjB,CAAJ,EAAkC;AAC9BkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAKyI,OAAL,CAAanH,iBAA1B;AACAmU,+BAAa,GAAG,IAAhB;AACAC,0BAAQ,GAAG,KAAX;AACH;;AAlBL,oBAqBSxQ,QArBT;AAAA;AAAA;AAAA;;AAAA,kDAsBe,KAAKjD,aAAL,CAAmB,KAAK4J,IAAxB,EAA8BD,WAA9B,EAA2C5L,UAA3C,EAAuDyV,aAAvD,EAAsEC,QAAtE,CAtBf;;AAAA;AAAA,qBAyBQrV,6CAAK,CAACC,QAAN,CAAesL,WAAf,CAzBR;AAAA;AAAA;AAAA;;AAAA,oBA2BavL,6CAAK,CAAC+E,KAAN,CAAYwG,WAAZ,CA3Bb;AAAA;AAAA;AAAA;;AAAA,kDA4BmB1G,QAAQ,CAAC,4BAAD,CA5B3B;;AAAA;AAAA;AA+BkByQ,4BA/BlB,GA+BiC7U,GAAG,CAAC8U,UAAJ,CAAehK,WAAf,EAA4B5L,UAA5B,EAAwCyV,aAAxC,CA/BjC;AAAA,kDAgCmBvQ,QAAQ,CAAC,IAAD,EAAOyQ,YAAP,CAhC3B;;AAAA;AAAA;AAAA;AAkCYzQ,wBAAQ,cAAR;;AAlCZ;AAAA,oBAsCS7E,6CAAK,CAAC8S,QAAN,CAAevH,WAAf,CAtCT;AAAA;AAAA;AAAA;;AAAA,kDAuCe1G,QAAQ,CAAC,8BAAD,CAvCvB;;AAAA;AAAA,sBAyCQ,CAACwQ,QAAD,IAAa9J,WAAW,CAACT,SAzCjC;AAAA;AAAA;AAAA;;AAAA,kDA0CejG,QAAQ,CAAC,+BAAD,CA1CvB;;AAAA;AAAA;;AAAA,oBA6CawQ,QA7Cb;AAAA;AAAA;AAAA;;AA8CkBxS,uBA9ClB,GA8C4B,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CACZ,KAAKmF,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCnD,UAApC,CADY,EAEd2F,WAFc,EA9C5B;;AAAA,sBAkDgBzC,OAAO,KAAK,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BsI,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiC6J,SAAjC,CAA2CnO,KAA3C,CAAiDoO,aAA5E,CAlD5B;AAAA;AAAA;AAAA;;AAAA,kDAmDuB5Q,QAAQ,CAAC,mDAAD,CAnD/B;;AAAA;AAAA,kDAqDeA,QAAQ,CAAC,IAAD,EACX7E,6CAAK,CAACgF,MAAN,CAAamQ,eAAb,CAA6BxV,UAA7B,EAAyC4L,WAAzC,CADW,CArDvB;;AAAA;AAAA;AAAA;AAyDQ1G,wBAAQ,cAAR;;AAzDR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2LAqFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgB0G,2BAAhB,8DAA8B,KAA9B;AAAqC5L,0BAArC,8DAAkD,KAAKyI,OAAL,CAAanH,iBAA/D;AAAkFyT,4BAAlF,8DAAiG,KAAjG;AAAwG7P,wBAAxG,8DAAmH,KAAnH;;AAEI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBkQ,YAAjB,CAAJ,EAAoC;AAChC7P,0BAAQ,GAAG6P,YAAX;AACAA,8BAAY,GAAG,CAAf;AACH;;AAED,oBAAI1U,6CAAK,CAACwE,UAAN,CAAiB7E,UAAjB,CAAJ,EAAkC;AAC9BkF,0BAAQ,GAAGlF,UAAX;AACAA,4BAAU,GAAG,KAAKyI,OAAL,CAAanH,iBAA1B;AACAyT,8BAAY,GAAG,CAAf;AACH;;AAXL,oBAaS7P,QAbT;AAAA;AAAA;AAAA;;AAAA,kDAce,KAAKjD,aAAL,CAAmB,KAAKoS,SAAxB,EAAmCzI,WAAnC,EAAgD5L,UAAhD,EAA4D+U,YAA5D,CAdf;;AAAA;AAAA,sBAgBQ,CAAC1U,6CAAK,CAAC8S,QAAN,CAAevH,WAAf,CAAD,IAAgC,CAACA,WAAW,CAACoJ,QAA7C,IAAyD,CAACpJ,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAhBvF;AAAA;AAAA;AAAA;;AAAA,kDAiBe9G,QAAQ,CAAC,8BAAD,CAjBvB;;AAAA;AAAA,sBAqBQ,CAAC0G,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAlC,IAAmDF,YAAY,GAAG,CArB1E;AAAA;AAAA;AAAA;;AAsBQ;AACAnJ,2BAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAjC,GAAiDF,YAAjD,CAvBR,CAyBQ;;AACM7R,uBA1Bd,GA0BwB,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2B,KAAKmF,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCnD,UAApC,CAA3B,EAA4E2F,WAA5E,EA1BxB;AAAA;AAAA,uBA2BiC,KAAKuP,aAAL,CAAmBtJ,WAAnB,EAAgCmJ,YAAhC,CA3BjC;;AAAA;AA2BcI,0BA3Bd;;AAAA,sBA6BYA,UAAU,CAACnO,MAAX,CAAkBzB,IAAlB,KAA2B,kBA7BvC;AAAA;AAAA;AAAA;;AAAA,kDA8BmBL,QAAQ,CAACiQ,UAAU,CAACnO,MAAX,CAAkBiF,OAAnB,CA9B3B;;AAAA;AAiCYmJ,wBAjCZ,GAiCuB,KAjCvB;AAkCQD,0BAAU,CAACE,UAAX,CAAsB/F,IAAtB,CAA2BP,GAA3B,CAA+B,UAAApN,GAAG,EAAI;AAClC,sBAAIA,GAAG,CAACuB,OAAJ,KAAgBA,OAApB,EACIkS,QAAQ,GAAG,IAAX;AACP,iBAHD;;AAlCR,oBAuCaA,QAvCb;AAAA;AAAA;AAAA;;AAAA,kDAwCmBlQ,QAAQ,CAAClF,UAAU,GAAG,4BAAd,CAxC3B;;AAAA;AAAA,sBA0CYmV,UAAU,CAACG,aAAX,IAA4BH,UAAU,CAACG,aAAX,CAAyBC,OAAzB,CAAiCrS,OAAjC,KAA6C,CAAC,CA1CtF;AAAA;AAAA;AAAA;;AAAA,kDA2CmBgC,QAAQ,CAAClF,UAAU,GAAG,2BAAd,CA3C3B;;AAAA;AAAA,sBA+CYmV,UAAU,CAACvJ,WAAX,IAA0BuJ,UAAU,CAACvJ,WAAX,CAAuBA,WA/C7D;AAAA;AAAA;AAAA;;AAgDYA,2BAAW,GAAGuJ,UAAU,CAACvJ,WAAX,CAAuBA,WAArC;;AACA,oBAAImJ,YAAY,GAAG,CAAnB,EAAsB;AAClBnJ,6BAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAjC,GAAiDF,YAAjD;AACH;;AAnDb;AAAA;;AAAA;AAAA,kDAqDmB7P,QAAQ,CAAC,8BAAD,CArD3B;;AAAA;AAAA;AAAA,kDA2DeA,QAAQ,CAAC,IAAD,EAAO7E,6CAAK,CAACgF,MAAN,CAAamQ,eAAb,CAA6BxV,UAA7B,EAAyC4L,WAAzC,CAAP,CA3DvB;;AAAA;AAAA;AAAA;AA6DQ1G,wBAAQ,cAAR;;AA7DR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;iMAiEA,kBAAsB0G,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC1G,wBAAnC,8DAA8C,KAA9C;;AAAA,oBACSA,QADT;AAAA;AAAA;AAAA;;AAAA,kDAEe,KAAKjD,aAAL,CAAmB,KAAK2jB,eAAxB,EAAyCha,WAAzC,CAFf;;AAAA;AAAA,oBAISvL,6CAAK,CAAC8S,QAAN,CAAevH,WAAf,CAJT;AAAA;AAAA;AAAA;;AAAA,kDAKe1G,QAAQ,CAAC,8BAAD,CALvB;;AAAA;AAQI,qBAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CACI,wBADJ,EAEInF,WAFJ,EAGI,MAHJ,EAIEzB,IAJF,CAIO,UAAAnD,MAAM,EAAI;AACb9B,0BAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AACH,iBAND,WAMS,UAAAmB,GAAG;AAAA,yBAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,iBANZ;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+LAiBA,kBAAoByD,WAApB,EAAiCmJ,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C7P,wBAA/C,8DAA0D,KAA1D;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBkQ,YAAjB,CAAJ,EAAoC;AAChC7P,0BAAQ,GAAG6P,YAAX;AACAA,8BAAY,GAAGuE,SAAf;AACH;;AAJL,oBAMSpU,QANT;AAAA;AAAA;AAAA;;AAAA,kDAOe,KAAKjD,aAAL,CAAmB,KAAKiT,aAAxB,EAAuCtJ,WAAvC,EAAoDmJ,YAApD,CAPf;;AAAA;AAAA,sBASQ,CAAC1U,6CAAK,CAAC8S,QAAN,CAAevH,WAAf,CAAD,IAAgC,CAACA,WAAW,CAACoJ,QAA7C,IAAyD,CAACpJ,WAAW,CAACoJ,QAAZ,CAAqBhJ,QATvF;AAAA;AAAA;AAAA;;AAAA,kDAUe9G,QAAQ,CAAC,8BAAD,CAVvB;;AAAA;AAYI,oBAAI7E,6CAAK,CAACwC,SAAN,CAAgBkS,YAAhB,CAAJ,EAAmC;AAC/BnJ,6BAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAjC,GAAiD7N,QAAQ,CAAC2N,YAAD,CAAzD;AACH,iBAFD,MAEO,IAAI,OAAOnJ,WAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAxC,KAA0D,QAA9D,EAAwE;AAC3ErJ,6BAAW,CAACoJ,QAAZ,CAAqBhJ,QAArB,CAA8B,CAA9B,EAAiCiJ,aAAjC,GAAiD,CAAjD;AACH;;AAhBL,oBAkBS5U,6CAAK,CAAC8S,QAAN,CAAevH,WAAf,CAlBT;AAAA;AAAA;AAAA;;AAAA,kDAmBe1G,QAAQ,CAAC,8BAAD,CAnBvB;;AAAA;AAsBI,qBAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CACI,sBADJ,EAEInF,WAFJ,EAGI,MAHJ,EAIEzB,IAJF,CAIO,UAAAnD,MAAM,EAAI;AACb9B,0BAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AACH,iBAND,WAMS,UAAAmB,GAAG;AAAA,yBAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,iBANZ;;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WA+BA,8BAA8E;AAAA,UAA3D2D,iBAA2D,uEAAvC,KAAuC;AAAA,UAAhClM,OAAgC,uEAAtB,EAAsB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC1E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAI,CAACsF,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK8J,kBAAxB,EAA4CD,iBAA5C,EAA+DlM,OAA/D,CAAP;AAEJ,UAAI,CAACS,6CAAK,CAAC8S,QAAN,CAAerH,iBAAf,CAAL,EACI,OAAO5G,QAAQ,CAAC,8BAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAAC8S,QAAN,CAAevT,OAAf,CAAL,EACI,OAAOsF,QAAQ,CAAC,0BAAD,CAAf;AAEJ,UAAI,CAAC4G,iBAAiB,CAACX,SAAnB,IAAgC,CAAC9K,6CAAK,CAACuR,OAAN,CAAc9F,iBAAiB,CAACX,SAAhC,CAArC,EACI,OAAOjG,QAAQ,CAAC,2BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CACI,6BADJ,EAEIjF,iBAFJ,EAGI,MAHJ,EAIE3B,IAJF,CAIO,UAAAnD,MAAM,EAAI;AACb,YAAIA,MAAM,CAACA,MAAX,EACIA,MAAM,CAAC4E,WAAP,GAAqBE,iBAArB;AACJ5G,gBAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AACH,OARD,WAQS,UAAAmB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OARZ;AASH;;;WAED,+BAAgF;AAAA,UAA5D0d,kBAA4D,uEAAvC,KAAuC;AAAA,UAAhCjmB,OAAgC,uEAAtB,EAAsB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC5E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAI,CAACsF,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6jB,mBAAxB,EAA6CD,kBAA7C,EAAiEjmB,OAAjE,CAAP;AAEJ,UAAI,CAACS,6CAAK,CAAC8S,QAAN,CAAe0S,kBAAf,CAAL,EACI,OAAO3gB,QAAQ,CAAC,8BAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAAC8S,QAAN,CAAevT,OAAf,CAAL,EACI,OAAOsF,QAAQ,CAAC,0BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CACI,mBADJ,EAEI8U,kBAFJ,EAGI,MAHJ,EAIE1b,IAJF,CAIO,UAAAnD,MAAM,EAAI;AACb,YAAIA,MAAM,CAACA,MAAX,EACIA,MAAM,CAAC6b,YAAP,GAAsBgD,kBAAkB,CAAChD,YAAzC;AACJ3d,gBAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AACH,OARD,WAQS,UAAAmB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OARZ;AASH;;;WAED,8BAAiF;AAAA,UAA9D4d,oBAA8D,uEAAvC,KAAuC;AAAA,UAAhCnmB,OAAgC,uEAAtB,EAAsB;AAAA,UAAlBsF,QAAkB,uEAAP,KAAO;;AAC7E,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,gBAAQ,GAAGtF,OAAX;AACAA,eAAO,GAAG,EAAV;AACH;;AAED,UAAI,CAACsF,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK+jB,kBAAxB,EAA4CD,oBAA5C,EAAkEnmB,OAAlE,CAAP;AAEJ,UAAI,CAACS,6CAAK,CAAC+E,KAAN,CAAY2gB,oBAAZ,CAAL,EACI,OAAO7gB,QAAQ,CAAC,kCAAD,CAAf;AAEJ,UAAI,CAAC7E,6CAAK,CAAC8S,QAAN,CAAevT,OAAf,CAAL,EACI,OAAOsF,QAAQ,CAAC,0BAAD,CAAf;AAEJ,UAAMZ,MAAM,GAAG;AACXsH,mBAAW,EAAEma;AADF,OAAf;AAIA,WAAKtd,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CACI,qBADJ,EAEKzM,MAFL,EAGI,MAHJ,EAIE6F,IAJF,CAIO,UAAAnD,MAAM,EAAI;AACb,YAAIA,MAAM,CAACA,MAAX,EAAmB;AACfA,gBAAM,CAAC4E,WAAP,GAAqBhF,IAAI,CAAC+T,KAAL,CAAW3T,MAAM,CAAC4E,WAAlB,CAArB;AACA5E,gBAAM,CAACif,cAAP,GAAwBF,oBAAxB;AACH;;AACD7gB,gBAAQ,CAAC,IAAD,EAAO8B,MAAP,CAAR;AACH,OAVD,WAUS,UAAAmB,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAVZ;AAWH;;;;iMAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsBqQ,kBAAtB,8DAA2B,KAA3B;AAAkCtQ,sBAAlC,8DAA2C,KAA3C;AAAkDtI,uBAAlD,8DAA4D,EAA5D;AAAgEsF,wBAAhE,8DAA2E,KAA3E;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EACIA,OAAO,GAAG;AAACI,4BAAU,EAAEJ;AAAb,iBAAV;;AAPR,oBASSsF,QATT;AAAA;AAAA;AAAA;;AAAA,kDAUe,KAAKjD,aAAL,CAAmB,KAAKikB,eAAxB,EAAyC1N,EAAzC,EAA6CtQ,MAA7C,EAAqDtI,OAArD,CAVf;;AAAA;AAAA,oBAYS,KAAK6I,OAAL,CAAapF,SAAb,CAAuBmV,EAAvB,CAZT;AAAA;AAAA;AAAA;;AAAA,kDAaetT,QAAQ,CAAC,4BAAD,CAbvB;;AAAA;AAAA,sBAeQ,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBqF,MAAhB,CAAD,IAA4BA,MAAM,IAAI,CAf9C;AAAA;AAAA;AAAA;;AAAA,kDAgBehD,QAAQ,CAAC,yBAAD,CAhBvB;;AAAA;AAkBItF,uBAAO;AACHI,4BAAU,EAAE,KAAKyI,OAAL,CAAanH,iBADtB;AAEH4B,yBAAO,EAAE,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC;AAFlC,mBAGA5B,OAHA,CAAP;;AAlBJ,sBAwBQ,CAACA,OAAO,CAACI,UAAT,IAAuB,CAACJ,OAAO,CAACsD,OAxBxC;AAAA;AAAA;AAAA;;AAAA,kDAyBegC,QAAQ,CAAC,6DAAD,CAzBvB;;AAAA;AAAA;AA4BchC,uBA5Bd,GA4BwBtD,OAAO,CAACI,UAAR,GAAqB,KAAKyI,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCvD,OAAO,CAACI,UAA5C,CAArB,GAA+EJ,OAAO,CAACsD,OA5B/G;AAAA;AAAA,uBA6BkC,KAAKuF,OAAL,CAAa9H,kBAAb,CAAgC8X,OAAhC,CAAwCD,EAAxC,EAA4CtQ,MAA5C,EAAoDhF,OAApD,CA7BlC;;AAAA;AA6Bc0I,2BA7Bd;AAAA;AAAA,uBA8BwC,KAAKC,IAAL,CAAUD,WAAV,EAAuBhM,OAAO,CAACI,UAAR,IAAsBsZ,SAA7C,CA9BxC;;AAAA;AA8BcxN,iCA9Bd;AAAA;AAAA,uBA+B6B,KAAKC,kBAAL,CAAwBD,iBAAxB,CA/B7B;;AAAA;AA+Bc9E,sBA/Bd;AAAA,kDAiCe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAjCvB;;AAAA;AAAA;AAAA;AAAA,kDAmCe9B,QAAQ,cAnCvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;2LAuCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBsT,kBAAhB,8DAAqB,KAArB;AAA4BtQ,sBAA5B,8DAAqC,KAArC;AAA4C2Q,uBAA5C,8DAAsD,KAAtD;AAA6DjZ,uBAA7D,8DAAuE,EAAvE;AAA2EsF,wBAA3E,8DAAsF,KAAtF;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EACIA,OAAO,GAAG;AAACI,4BAAU,EAAEJ;AAAb,iBAAV;;AAPR,oBASSsF,QATT;AAAA;AAAA;AAAA;;AAAA,kDAUe,KAAKjD,aAAL,CAAmB,KAAK6W,SAAxB,EAAmCN,EAAnC,EAAuCtQ,MAAvC,EAA+C2Q,OAA/C,EAAwDjZ,OAAxD,CAVf;;AAAA;AAAA,oBAYS,KAAK6I,OAAL,CAAapF,SAAb,CAAuBmV,EAAvB,CAZT;AAAA;AAAA;AAAA;;AAAA,kDAaetT,QAAQ,CAAC,4BAAD,CAbvB;;AAAA;AAAA,sBAeQ,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBqF,MAAhB,CAAD,IAA4BA,MAAM,IAAI,CAf9C;AAAA;AAAA;AAAA;;AAAA,kDAgBehD,QAAQ,CAAC,yBAAD,CAhBvB;;AAAA;AAkBI,oBAAI7E,6CAAK,CAACwC,SAAN,CAAgBgW,OAAhB,CAAJ,EACIA,OAAO,GAAGA,OAAO,CAACxS,QAAR,EAAV;;AAnBR,oBAqBShG,6CAAK,CAACC,QAAN,CAAeuY,OAAf,CArBT;AAAA;AAAA;AAAA;;AAAA,kDAsBe3T,QAAQ,CAAC,2BAAD,CAtBvB;;AAAA;AAwBItF,uBAAO;AACHI,4BAAU,EAAE,KAAKyI,OAAL,CAAanH,iBADtB;AAEH4B,yBAAO,EAAE,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC;AAFlC,mBAGA5B,OAHA,CAAP;;AAxBJ,sBA8BQ,CAACA,OAAO,CAACI,UAAT,IAAuB,CAACJ,OAAO,CAACsD,OA9BxC;AAAA;AAAA;AAAA;;AAAA,kDA+BegC,QAAQ,CAAC,6DAAD,CA/BvB;;AAAA;AAAA;AAkCchC,uBAlCd,GAkCwBtD,OAAO,CAACI,UAAR,GAAqB,KAAKyI,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCvD,OAAO,CAACI,UAA5C,CAArB,GAA+EJ,OAAO,CAACsD,OAlC/G;AAAA;AAAA,uBAmCkC,KAAKuF,OAAL,CAAa9H,kBAAb,CAAgCmY,SAAhC,CAA0CN,EAA1C,EAA8CtQ,MAA9C,EAAsD2Q,OAAtD,EAA+D3V,OAA/D,CAnClC;;AAAA;AAmCc0I,2BAnCd;AAAA;AAAA,uBAoCwC,KAAKC,IAAL,CAAUD,WAAV,EAAuBhM,OAAO,CAACI,UAAR,IAAsBsZ,SAA7C,CApCxC;;AAAA;AAoCcxN,iCApCd;AAAA;AAAA,uBAqC6B,KAAKC,kBAAL,CAAwBD,iBAAxB,CArC7B;;AAAA;AAqCc9E,sBArCd;AAAA,kDAuCe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAvCvB;;AAAA;AAAA;AAAA;AAAA,kDAyCe9B,QAAQ,cAzCvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AA6CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;+LACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoBgD,sBAApB,8DAA6B,CAA7B;AAAgCiR,wBAAhC,8DAA2C,CAA3C;AAA8CC,wBAA9C,8DAAyD,WAAzD;AAAsExZ,uBAAtE,8DAAgF,EAAhF;AAAoFyZ,+BAApF,8DAAsGC,SAAtG;AAAiHpU,wBAAjH,8DAA4H,KAA5H;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBwU,eAAjB,CAAJ,EAAuC;AACnCnU,0BAAQ,GAAGmU,eAAX;AACAA,iCAAe,GAAGC,SAAlB;AACH;;AACD,oBAAIjZ,6CAAK,CAACwE,UAAN,CAAiBsU,QAAjB,CAAJ,EAAgC;AAC5BjU,0BAAQ,GAAGiU,QAAX;AACAA,0BAAQ,GAAG,CAAX;AACH;;AAED,oBAAI9Y,6CAAK,CAACwE,UAAN,CAAiBuU,QAAjB,CAAJ,EAAgC;AAC5BlU,0BAAQ,GAAGkU,QAAX;AACAA,0BAAQ,GAAG,WAAX;AACH;;AAED,oBAAI/Y,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EACIA,OAAO,GAAG;AAACI,4BAAU,EAAEJ;AAAb,iBAAV;;AArBR,oBAuBSsF,QAvBT;AAAA;AAAA;AAAA;;AAAA,kDAwBe,KAAKjD,aAAL,CAAmB,KAAKsX,aAAxB,EAAuCrR,MAAvC,EAA+CiR,QAA/C,EAAyDC,QAAzD,EAAmExZ,OAAnE,EAA4EyZ,eAA5E,CAxBf;;AAAA;AAAA,oBA0BS,CAAC,WAAD,EAAc,QAAd,EAAwBzW,QAAxB,CAAiCwW,QAAjC,CA1BT;AAAA;AAAA;AAAA;;AAAA,kDA2BelU,QAAQ,CAAC,6DAAD,CA3BvB;;AAAA;AAAA,sBA6BQ,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBqF,MAAhB,CAAD,IAA4BA,MAAM,IAAI,CA7B9C;AAAA;AAAA;AAAA;;AAAA,kDA8BehD,QAAQ,CAAC,yBAAD,CA9BvB;;AAAA;AAAA,sBAgCQ,CAAC7E,6CAAK,CAACwC,SAAN,CAAgBsW,QAAhB,CAAD,IAA8BA,QAAQ,GAAG,CAhCjD;AAAA;AAAA;AAAA;;AAAA,kDAiCejU,QAAQ,CAAC,8CAAD,CAjCvB;;AAAA;AAmCItF,uBAAO;AACHI,4BAAU,EAAE,KAAKyI,OAAL,CAAanH,iBADtB;AAEH4B,yBAAO,EAAE,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC;AAFlC,mBAGA5B,OAHA,CAAP;;AAnCJ,sBAyCQ,CAACA,OAAO,CAACI,UAAT,IAAuB,CAACJ,OAAO,CAACsD,OAzCxC;AAAA;AAAA;AAAA;;AAAA,kDA0CegC,QAAQ,CAAC,6DAAD,CA1CvB;;AAAA;AAAA;AA6CchC,uBA7Cd,GA6CwBtD,OAAO,CAACI,UAAR,GAAqB,KAAKyI,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCvD,OAAO,CAACI,UAA5C,CAArB,GAA+EJ,OAAO,CAACsD,OA7C/G;AAAA;AAAA,uBA8CoC,KAAKuF,OAAL,CAAa9H,kBAAb,CAAgC4Y,aAAhC,CAA8CrR,MAA9C,EAAsDiR,QAAtD,EAAgEC,QAAhE,EAA0ElW,OAA1E,EAAmFmW,eAAnF,CA9CpC;;AAAA;AA8CcE,+BA9Cd;AAAA;AAAA,uBA+CwC,KAAK1N,IAAL,CAAU0N,eAAV,EAAyB3Z,OAAO,CAACI,UAAR,IAAsBsZ,SAA/C,CA/CxC;;AAAA;AA+CcxN,iCA/Cd;AAAA;AAAA,uBAgD6B,KAAKC,kBAAL,CAAwBD,iBAAxB,CAhD7B;;AAAA;AAgDc9E,sBAhDd;AAAA,kDAkDe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAlDvB;;AAAA;AAAA;AAAA;AAAA,kDAoDe9B,QAAQ,cApDvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAwDA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iMACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsBkU,wBAAtB,iEAAiC,WAAjC;AAA8CxZ,uBAA9C,iEAAwD,EAAxD;AAA4DyZ,+BAA5D,iEAA8EC,SAA9E;AAAyFpU,wBAAzF,iEAAoG,KAApG;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBwU,eAAjB,CAAJ,EAAuC;AACnCnU,0BAAQ,GAAGmU,eAAX;AACAA,iCAAe,GAAGC,SAAlB;AACH;;AAED,oBAAIjZ,6CAAK,CAACwE,UAAN,CAAiBuU,QAAjB,CAAJ,EAAgC;AAC5BlU,0BAAQ,GAAGkU,QAAX;AACAA,0BAAQ,GAAG,WAAX;AACH;;AAED,oBAAI/Y,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EACIA,OAAO,GAAG;AAACI,4BAAU,EAAEJ;AAAb,iBAAV;;AAjBR,oBAmBSsF,QAnBT;AAAA;AAAA;AAAA;;AAAA,mDAoBe,KAAKjD,aAAL,CAAmB,KAAK4X,eAAxB,EAAyCT,QAAzC,EAAmDxZ,OAAnD,EAA4DyZ,eAA5D,CApBf;;AAAA;AAAA,oBAsBS,CAAC,WAAD,EAAc,QAAd,EAAwBzW,QAAxB,CAAiCwW,QAAjC,CAtBT;AAAA;AAAA;AAAA;;AAAA,mDAuBelU,QAAQ,CAAC,6DAAD,CAvBvB;;AAAA;AAyBItF,uBAAO;AACHI,4BAAU,EAAE,KAAKyI,OAAL,CAAanH,iBADtB;AAEH4B,yBAAO,EAAE,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC;AAFlC,mBAGA5B,OAHA,CAAP;;AAzBJ,sBA+BQ,CAACA,OAAO,CAACI,UAAT,IAAuB,CAACJ,OAAO,CAACsD,OA/BxC;AAAA;AAAA;AAAA;;AAAA,mDAgCegC,QAAQ,CAAC,6DAAD,CAhCvB;;AAAA;AAAA;AAmCchC,uBAnCd,GAmCwBtD,OAAO,CAACI,UAAR,GAAqB,KAAKyI,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCvD,OAAO,CAACI,UAA5C,CAArB,GAA+EJ,OAAO,CAACsD,OAnC/G;AAAA;AAAA,uBAoCsC,KAAKuF,OAAL,CAAa9H,kBAAb,CAAgCkZ,eAAhC,CAAgDT,QAAhD,EAA0DlW,OAA1D,EAAmEmW,eAAnE,CApCtC;;AAAA;AAoCcQ,iCApCd;AAAA;AAAA,uBAqCwC,KAAKhO,IAAL,CAAUgO,iBAAV,EAA2Bja,OAAO,CAACI,UAAR,IAAsBsZ,SAAjD,CArCxC;;AAAA;AAqCcxN,iCArCd;AAAA;AAAA,uBAsC6B,KAAKC,kBAAL,CAAwBD,iBAAxB,CAtC7B;;AAAA;AAsCc9E,sBAtCd;AAAA,mDAwCe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAxCvB;;AAAA;AAAA;AAAA;AAAA,mDA0Ce9B,QAAQ,eA1CvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AA8CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;+LACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAoB+Y,2BAApB,iEAAkC,KAAlC;AAAyCre,uBAAzC,iEAAmD,EAAnD;AAAuDsF,wBAAvD,iEAAkE,KAAlE;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAI,OAAOA,OAAP,KAAmB,QAAvB,EACIA,OAAO,GAAG;AAACI,4BAAU,EAAEJ;AAAb,iBAAV;;AAPR,oBASSsF,QATT;AAAA;AAAA;AAAA;;AAAA,mDAUe,KAAKjD,aAAL,CAAmB,KAAKic,aAAxB,EAAuCD,WAAvC,EAAoDre,OAApD,CAVf;;AAAA;AAAA,sBAaQ,CAACS,6CAAK,CAACC,QAAN,CAAe2d,WAAf,CAAD,IAAgC,CAACA,WAAW,CAACvb,MAbrD;AAAA;AAAA;AAAA;;AAAA,mDAcewC,QAAQ,CAAC,uBAAD,CAdvB;;AAAA;AAiBItF,uBAAO;AACHI,4BAAU,EAAE,KAAKyI,OAAL,CAAanH,iBADtB;AAEH4B,yBAAO,EAAE,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC;AAFlC,mBAGA5B,OAHA,CAAP;;AAjBJ,sBAuBQ,CAACA,OAAO,CAACI,UAAT,IAAuB,CAACJ,OAAO,CAACsD,OAvBxC;AAAA;AAAA;AAAA;;AAAA,mDAwBegC,QAAQ,CAAC,6DAAD,CAxBvB;;AAAA;AAAA;AA2BchC,uBA3Bd,GA2BwBtD,OAAO,CAACI,UAAR,GAAqB,KAAKyI,OAAL,CAAavF,OAAb,CAAqBC,cAArB,CAAoCvD,OAAO,CAACI,UAA5C,CAArB,GAA+EJ,OAAO,CAACsD,OA3B/G;AAAA;AAAA,uBA4BoC,KAAKuF,OAAL,CAAa9H,kBAAb,CAAgCud,aAAhC,CAA8CD,WAA9C,EAA2D/a,OAA3D,CA5BpC;;AAAA;AA4Bcgb,+BA5Bd;AAAA;AAAA,uBA6BwC,KAAKrS,IAAL,CAAUqS,eAAV,EAAyBte,OAAO,CAACI,UAAR,IAAsBsZ,SAA/C,CA7BxC;;AAAA;AA6BcxN,iCA7Bd;AAAA;AAAA,uBA8B6B,KAAKC,kBAAL,CAAwBD,iBAAxB,CA9B7B;;AAAA;AA8Bc9E,sBA9Bd;AAAA,mDAgCe9B,QAAQ,CAAC,IAAD,EAAO8B,MAAP,CAhCvB;;AAAA;AAAA;AAAA;AAAA,mDAkCe9B,QAAQ,eAlCvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAsCA,uBAAqB;AACjB,aAAO,KAAK2G,IAAL,uBAAP;AACH;;;WAED,qBAAmB;AACf,aAAO,KAAKiN,SAAL,uBAAP;AACH;;;WAED,gBAAc;AACV,aAAO,KAAKoN,eAAL,uBAAP;AACH;;;WAED,mBAAiB;AACb,aAAO,KAAKA,eAAL,uBAAP;AACH;;;WAED,qBAAmB;AACf,aAAO,KAAKna,kBAAL,uBAAP;AACH;;;WAED,wBAAsB;AAClB,aAAO,KAAKia,kBAAL,uBAAP;AACH;;;WAED,2BAAyB;AACrB,aAAO,KAAKna,IAAL,uBAAP;AACH;AAED;AACJ;AACA;;;;WACI,uBAAkD;AAAA,UAAtC8S,UAAsC,uEAAzB,KAAyB;AAAA,UAAlBzZ,QAAkB,uEAAP,KAAO;AAC9C,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKkkB,WAAxB,EAAqCxH,UAArC,CAAP;AAEJ,UAAI,CAACte,6CAAK,CAACwC,SAAN,CAAgB8b,UAAhB,CAAD,IAAgCA,UAAU,GAAG,CAAjD,EACI,OAAOzZ,QAAQ,CAAC,6BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,wBAA9B,EAAwD;AACpDoG,UAAE,EAAE/P,QAAQ,CAACuX,UAAD;AADwC,OAAxD,EAEG,MAFH,EAEWxU,IAFX,CAEgB,UAAAic,QAAQ,EAAI;AACxBlhB,gBAAQ,CAAC,IAAD,EAAOkhB,QAAP,CAAR;AACH,OAJD,WAIS,UAAAje,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;AAED;AACJ;AACA;;;;WACI,yBAAgC;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AAC5B,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKokB,aAAxB,CAAP;AAEJ,WAAK5d,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsD,EAAtD,EAA0D,MAA1D,EAAkE5G,IAAlE,CAAuE,kBAAsB;AAAA,sCAApBmc,SAAoB;AAAA,YAApBA,SAAoB,iCAAR,EAAQ;AACzFphB,gBAAQ,CAAC,IAAD,EAAOohB,SAAP,CAAR;AACH,OAFD,WAES,UAAAne,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;AAED;AACJ;AACA;;;;WACI,8BAAqC;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AACjC,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKskB,kBAAxB,CAAP;AAEJ,WAAK9d,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,2BAA9B,EAA2D,EAA3D,EAA+D,MAA/D,EAAuE5G,IAAvE,CAA4E,kBAA2B;AAAA,2CAAzBqc,cAAyB;AAAA,YAAzBA,cAAyB,sCAAR,EAAQ;AACnGthB,gBAAQ,CAAC,IAAD,EAAOshB,cAAP,CAAR;AACH,OAFD,WAES,UAAAre,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFZ;AAGH;AAED;AACJ;AACA;;;;WACI,+BAAiF;AAAA,UAA7DjF,OAA6D,uEAAnD,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAuB;AAAA,UAAlB0D,QAAkB,uEAAP,KAAO;AAC7E,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKwkB,mBAAxB,EAA6CvjB,OAA7C,CAAP;AAEJ,UAAI,CAAC,KAAKuF,OAAL,CAAapF,SAAb,CAAuBH,OAAvB,CAAL,EACI,OAAOgC,QAAQ,CAAC,0BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,2BAA9B,EAA2D;AACvD7N,eAAO,EAAE,KAAKuF,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BJ,OAA3B;AAD8C,OAA3D,EAEG,MAFH,EAEWiH,IAFX,CAEgB,UAAAsV,SAAS,EAAI;AACzBva,gBAAQ,CAAC,IAAD,EAAOua,SAAP,CAAR;AACH,OAJD,WAIS,UAAAtX,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;AAED;AACJ;AACA;;;;WACI,2BAAsD;AAAA,UAAtC4X,UAAsC,uEAAzB,KAAyB;AAAA,UAAlB7a,QAAkB,uEAAP,KAAO;AAClD,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKykB,eAAxB,EAAyC3G,UAAzC,CAAP;AAEJ,UAAI,CAAC1f,6CAAK,CAACwC,SAAN,CAAgBkd,UAAhB,CAAD,IAAgCA,UAAU,GAAG,CAAjD,EACI,OAAO7a,QAAQ,CAAC,6BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,wBAA9B,EAAwD;AACpDoG,UAAE,EAAE4I;AADgD,OAAxD,EAEG,MAFH,EAEW5V,IAFX,CAEgB,UAAAwc,QAAQ,EAAI;AACxBzhB,gBAAQ,CAAC,IAAD,EAAOyhB,QAAP,CAAR;AACH,OAJD,WAIS,UAAAxe,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAJZ;AAKH;AAED;AACJ;AACA;;;;WACI,yBAAgC;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AAC5B,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK2kB,aAAxB,CAAP;AAEJ,WAAKne,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,sBAA9B,EAAsD,EAAtD,EAA0D,MAA1D,EAAkE5G,IAAlE,CAAuE,kBAAsB;AAAA,sCAApB0c,SAAoB;AAAA,YAApBA,SAAoB,iCAAR,EAAQ;AACzF3hB,gBAAQ,CAAC,IAAD,EAAO2hB,SAAP,CAAR;AACH,OAFD,EAEG,MAFH,WAEiB,UAAA1e,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFpB;AAGH;AAED;AACJ;AACA;;;;WACI,kCAAiE;AAAA,UAA1C+a,KAA0C,uEAAlC,EAAkC;AAAA,UAA9BC,MAA8B,uEAArB,CAAqB;AAAA,UAAlBje,QAAkB,uEAAP,KAAO;;AAC7D,UAAI7E,6CAAK,CAACwE,UAAN,CAAiBse,MAAjB,CAAJ,EAA8B;AAC1Bje,gBAAQ,GAAGie,MAAX;AACAA,cAAM,GAAG,CAAT;AACH;;AACD,UAAI9iB,6CAAK,CAACwE,UAAN,CAAiBqe,KAAjB,CAAJ,EAA6B;AACzBhe,gBAAQ,GAAGge,KAAX;AACAA,aAAK,GAAG,EAAR;AACH;;AACD,UAAI,CAAChe,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK6kB,sBAAxB,EAAgD5D,KAAhD,EAAuDC,MAAvD,CAAP;AAEJ,WAAK1a,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,iCAA9B,EAAiE;AAC7DmS,aAAK,EAALA,KAD6D;AAE7DC,cAAM,EAANA;AAF6D,OAAjE,EAGG,MAHH,EAGWhZ,IAHX,CAGgB,kBAAsB;AAAA,sCAApB0c,SAAoB;AAAA,YAApBA,SAAoB,iCAAR,EAAQ;AAClC3hB,gBAAQ,CAAC,IAAD,EAAO2hB,SAAP,CAAR;AACH,OALD,WAKS,UAAA1e,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OALZ;AAMH;AAED;AACJ;AACA;;;;WACI,uBAA8B;AAAA,UAAlBjD,QAAkB,uEAAP,KAAO;AAC1B,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKI,WAAxB,CAAP;AAEJ,WAAKoG,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,oBAA9B,EAAoD,EAApD,EAAwD,MAAxD,EAAgE5G,IAAhE,CAAqE,UAAA4c,IAAI,EAAI;AACzE7hB,gBAAQ,CAAC,IAAD,EAAO6hB,IAAP,CAAR;AACH,OAFD,EAEG,MAFH,WAEiB,UAAA5e,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAFpB;AAGH;;;WAGD,8BAAsD;AAAA;;AAAA,UAAnC0Q,OAAmC,uEAAzB,KAAyB;AAAA,UAAlB3T,QAAkB,uEAAP,KAAO;AAClD,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAK+kB,kBAAxB,EAA4CnO,OAA5C,CAAP;AAEJ,UAAIxY,6CAAK,CAACwC,SAAN,CAAgBgW,OAAhB,CAAJ,EACIA,OAAO,GAAGA,OAAO,CAACxS,QAAR,EAAV;AAEJ,UAAI,CAAChG,6CAAK,CAACC,QAAN,CAAeuY,OAAf,CAAD,IAA4B,CAACA,OAAO,CAACnW,MAAzC,EACI,OAAOwC,QAAQ,CAAC,2BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,gCAA9B,EAAgE;AAC5DrJ,aAAK,EAAE,KAAKe,OAAL,CAAa9B,QAAb,CAAsBkS,OAAtB;AADqD,OAAhE,EAEG,MAFH,EAEW1O,IAFX,CAEgB,UAAAkY,KAAK,EAAI;AACrB,YAAIvN,KAAK,CAAClD,OAAN,CAAcyQ,KAAK,CAACoC,UAApB,CAAJ,EAAqC;AACjCvf,kBAAQ,CAAC,IAAD,EAAOmd,KAAK,CAACoC,UAAN,CAAiB1V,GAAjB,CAAqB,UAAAkY,CAAC;AAAA,mBAAI,MAAI,CAACtC,WAAL,CAAiBsC,CAAjB,CAAJ;AAAA,WAAtB,CAAP,CAAR;AACH,SAFD,MAEO,IAAI,CAAC5E,KAAK,CAACpX,IAAX,EACH,OAAO/F,QAAQ,CAAC,sBAAD,CAAf;;AAEJA,gBAAQ,CAAC,IAAD,EAAO,MAAI,CAACyf,WAAL,CAAiBtC,KAAjB,CAAP,CAAR;AACH,OATD,WASS,UAAAla,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OATZ;AAUH;;;WAED,wBAAgD;AAAA;;AAAA,UAAnC0Q,OAAmC,uEAAzB,KAAyB;AAAA,UAAlB3T,QAAkB,uEAAP,KAAO;AAC5C,UAAI,CAACA,QAAL,EACI,OAAO,KAAKjD,aAAL,CAAmB,KAAKilB,YAAxB,EAAsCrO,OAAtC,CAAP;AAEJ,UAAIxY,6CAAK,CAACwC,SAAN,CAAgBgW,OAAhB,CAAJ,EACIA,OAAO,GAAGA,OAAO,CAACxS,QAAR,EAAV;AAEJ,UAAI,CAAChG,6CAAK,CAACC,QAAN,CAAeuY,OAAf,CAAD,IAA4B,CAACA,OAAO,CAACnW,MAAzC,EACI,OAAOwC,QAAQ,CAAC,2BAAD,CAAf;AAEJ,WAAKuD,OAAL,CAAaxI,QAAb,CAAsB8Q,OAAtB,CAA8B,0BAA9B,EAA0D;AACtDrJ,aAAK,EAAEmR;AAD+C,OAA1D,EAEG,MAFH,EAEW1O,IAFX,CAEgB,UAAAkY,KAAK,EAAI;AACrB,YAAI,CAACA,KAAK,CAACpX,IAAX,EACI,OAAO/F,QAAQ,CAAC,sBAAD,CAAf;AAEJA,gBAAQ,CAAC,IAAD,EAAO,MAAI,CAACyf,WAAL,CAAiBtC,KAAjB,CAAP,CAAR;AACH,OAPD,WAOS,UAAAla,GAAG;AAAA,eAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,OAPZ;AAQH;;;;4LAED,mBAAgBjF,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBtD,uBAAzB,iEAAmC,EAAnC;AAAuCsF,wBAAvC,iEAAkD,KAAlD;AACItF,uBAAO,CAACmc,SAAR,GAAoB,IAApB;AADJ,mDAEW,KAAKoL,UAAL,CAAgBjkB,OAAhB,EAAyBtD,OAAzB,EAAkCsF,QAAlC,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;sMAKA,mBAA2BhC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoCtD,uBAApC,iEAA8C,EAA9C;AAAkDsF,wBAAlD,iEAA6D,KAA7D;AACItF,uBAAO,CAACmc,SAAR,GAAoB,KAApB;AADJ,mDAEW,KAAKoL,UAAL,CAAgBjkB,OAAhB,EAAyBtD,OAAzB,EAAkCsF,QAAlC,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+LAKA,mBAAmBhC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4BtD,uBAA5B,iEAAsC,EAAtC;AAA0CsF,wBAA1C,iEAAqD,KAArD;AACItF,uBAAO,CAACmc,SAAR,GAAoB,IAApB;AADJ,mDAEW,KAAKqL,aAAL,CAAmBlkB,OAAnB,EAA4BtD,OAA5B,EAAqCsF,QAArC,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yMAKA,mBAA8BhC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCtD,uBAAvC,iEAAiD,EAAjD;AAAqDsF,wBAArD,iEAAgE,KAAhE;AACItF,uBAAO,CAACmc,SAAR,GAAoB,KAApB;AADJ,mDAEW,KAAKqL,aAAL,CAAmBlkB,OAAnB,EAA4BtD,OAA5B,EAAqCsF,QAArC,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4LAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBhC,uBAAjB,iEAA2B,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAvD;AAA4D5B,uBAA5D;AAAqEsF,wBAArE,iEAAgF,KAAhF;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAIS,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,0BAAQ,GAAGhC,OAAX;AACAA,yBAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH,iBAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAejQ,OAAf,CAAJ,EAA6B;AAChCtD,yBAAO,GAAGsD,OAAV;AACAA,yBAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAZL,oBAcS0D,QAdT;AAAA;AAAA;AAAA;;AAAA,mDAee,KAAKjD,aAAL,CAAmB,KAAKklB,UAAxB,EAAoCjkB,OAApC,EAA6CtD,OAA7C,CAff;;AAAA;AAAA,qBAiBQ,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,QADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAExE;AAHX,iBADwB,CAAxB,EAMDgC,QANC,CAjBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA0BUoG,oBA1BV,GA0BiB;AACTpI,yBAAO,EAAEI,KAAK,CAACJ,OAAD;AADL,iBA1BjB;AA8BI,qBAAKuF,OAAL,CAAa7I,OAAO,CAACmc,SAAR,GAAoB,cAApB,GAAqC,UAAlD,EAA8DhL,OAA9D,iBAA+EnR,OAAO,CAACmc,SAAR,GAAoB,UAApB,GAAiC,EAAhH,iBAAgIzQ,IAAhI,EAAsI,MAAtI,EACKnB,IADL,CACU,YAAiB;AAAA,sBAAhBnD,MAAgB,uEAAP,EAAO;AAEnB,sBAAI,OAAOA,MAAM,CAACqgB,MAAd,KAAyB,WAA7B,EACI,OAAOniB,QAAQ,CAAC,YAAD,CAAf;AAEJA,0BAAQ,CAAC,IAAD,EAAO8B,MAAM,CAACqgB,MAAd,CAAR;AACH,iBAPL,WAOa,UAAAlf,GAAG;AAAA,yBAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,iBAPhB;;AA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+LAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoBjF,uBAApB,iEAA8B,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAA1D;AAA+D5B,uBAA/D;AAAwEsF,wBAAxE,iEAAmF,KAAnF;;AACI,oBAAI7E,6CAAK,CAACwE,UAAN,CAAiBjF,OAAjB,CAAJ,EAA+B;AAC3BsF,0BAAQ,GAAGtF,OAAX;AACAA,yBAAO,GAAG,EAAV;AACH;;AAED,oBAAIS,6CAAK,CAACwE,UAAN,CAAiB3B,OAAjB,CAAJ,EAA+B;AAC3BgC,0BAAQ,GAAGhC,OAAX;AACAA,yBAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH,iBAHD,MAGO,IAAInB,6CAAK,CAAC8S,QAAN,CAAejQ,OAAf,CAAJ,EAA6B;AAChCtD,yBAAO,GAAGsD,OAAV;AACAA,yBAAO,GAAG,KAAKuF,OAAL,CAAalH,cAAb,CAA4BC,GAAtC;AACH;;AAZL,oBAcS0D,QAdT;AAAA;AAAA;AAAA;;AAAA,mDAee,KAAKjD,aAAL,CAAmB,KAAKmlB,aAAxB,EAAuClkB,OAAvC,EAAgDtD,OAAhD,CAff;;AAAA;AAAA,qBAiBQ,KAAKuU,SAAL,CAAe8B,QAAf,CAAwB,CACxB;AACIhL,sBAAI,EAAE,QADV;AAEIN,sBAAI,EAAE,SAFV;AAGIjD,uBAAK,EAAExE;AAHX,iBADwB,CAAxB,EAMDgC,QANC,CAjBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA0BUoG,oBA1BV,GA0BiB;AACTpI,yBAAO,EAAEI,KAAK,CAACJ,OAAD;AADL,iBA1BjB;AA8BI,qBAAKuF,OAAL,CAAa7I,OAAO,CAACmc,SAAR,GAAoB,cAApB,GAAqC,UAAlD,EAA8DhL,OAA9D,iBAA+EnR,OAAO,CAACmc,SAAR,GAAoB,UAApB,GAAiC,EAAhH,oBAAmIzQ,IAAnI,EAAyI,MAAzI,EACKnB,IADL,CACU,YAAiB;AAAA,sBAAhBnD,MAAgB,uEAAP,EAAO;AAEnB,sBAAI,OAAOA,MAAM,CAACsV,SAAd,KAA4B,WAAhC,EACI,OAAOpX,QAAQ,CAAC,YAAD,CAAf;AAEJA,0BAAQ,CAAC,IAAD,EAAO8B,MAAM,CAACsV,SAAd,CAAR;AACH,iBAPL,WAOa,UAAAnU,GAAG;AAAA,yBAAIjD,QAAQ,CAACiD,GAAD,CAAZ;AAAA,iBAPhB;;AA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WA7yBA,yBAAuB8D,OAAvB,EAAgC/I,OAAhC,EAAyCiI,SAAzC,EAA0E;AAAA,UAAtBsK,aAAsB,uEAAN,IAAM;AACtExJ,aAAO,GAAGA,OAAO,CAACxG,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACA0F,eAAS,GAAGA,SAAS,CAAC1F,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAZ;AACA,UAAM6hB,YAAY,6FACXC,sEAAW,CAAC9R,aAAa,GAAG0M,kBAAH,GAAwBC,kBAAtC,CADA,mFAEX/hB,6CAAK,CAACkF,IAAN,CAAWC,gBAAX,CAA4ByG,OAA5B,CAFW,EAAlB;AAKA,UAAMub,aAAa,GAAGthB,oEAAS,CAACohB,YAAD,CAA/B;AACA,UAAMG,SAAS,GAAGC,yEAAc,CAACF,aAAD,EAAgB;AAC5CG,qBAAa,EAAExc,SAAS,CAAC7E,SAAV,CAAoB,GAApB,EAAyB,GAAzB,KAAiC,IAAjC,GAAwC,CAAxC,GAA4C,CADf;AAE5CshB,SAAC,EAAE,OAAOzc,SAAS,CAAC7E,SAAV,CAAoB,CAApB,EAAuB,EAAvB,CAFkC;AAG5CuhB,SAAC,EAAE,OAAO1c,SAAS,CAAC7E,SAAV,CAAoB,EAApB,EAAwB,GAAxB;AAHkC,OAAhB,CAAhC;AAMA,UAAMwhB,WAAW,GAAGpiB,6DAAc,GAAG+hB,SAAS,CAACpgB,MAAV,CAAiB,CAAjB,CAArC;AACA,UAAM0gB,aAAa,GAAGpoB,6CAAO,CAACuD,OAAR,CAAgBK,OAAhB,CAAwBukB,WAAxB,CAAtB;AAEA,aAAOC,aAAa,IAAIpoB,6CAAO,CAACuD,OAAR,CAAgBK,OAAhB,CAAwBL,OAAxB,CAAxB;AACH;;;WA+DD,oBAAkB+I,OAAlB,EAA2BjM,UAA3B,EAA6D;AAAA,UAAtByV,aAAsB,uEAAN,IAAM;AACzDxJ,aAAO,GAAGA,OAAO,CAACxG,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACA,UAAMiC,KAAK,GAAE;AACTsgB,mBAAW,EAAE,uBAAW;AACpB,iBAAO,OAAOhoB,UAAd;AACH,SAHQ;AAIT0H,aAAK,EAAE1H;AAJE,OAAb;AAMA,UAAMioB,UAAU,GAAG,IAAIC,6DAAJ,CAAexgB,KAAf,CAAnB;AACA,UAAM4f,YAAY,6FACXC,sEAAW,CAAC9R,aAAa,GAAG0M,kBAAH,GAAwBC,kBAAtC,CADA,mFAEX/hB,6CAAK,CAACkF,IAAN,CAAWC,gBAAX,CAA4ByG,OAA5B,CAFW,EAAlB;AAIA,UAAMub,aAAa,GAAGthB,oEAAS,CAACohB,YAAD,CAA/B;AACA,UAAMnc,SAAS,GAAG8c,UAAU,CAACE,UAAX,CAAsBX,aAAtB,CAAlB;AACA,UAAM7R,YAAY,GAAG,CACjB,IADiB,EAEjBxK,SAAS,CAACyc,CAAV,CAAYthB,SAAZ,CAAsB,CAAtB,CAFiB,EAGjB6E,SAAS,CAAC0c,CAAV,CAAYvhB,SAAZ,CAAsB,CAAtB,CAHiB,EAIjB6P,MAAM,CAAChL,SAAS,CAACoQ,CAAX,CAAN,CAAoBlV,QAApB,CAA6B,EAA7B,CAJiB,EAKnBqL,IALmB,CAKd,EALc,CAArB;AAMA,aAAOiE,YAAP;AACH;;;;;;;AA6uBJ,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACz8CD;AACA;;IAEqBvB,S;AAEjB,uBAA6B;AAAA,QAAjB3L,OAAiB,uEAAP,KAAO;;AAAA;;AACzB,QAAI,CAACA,OAAD,IAAY,CAACA,OAAD,YAAoB9I,6CAApC,EACI,MAAM,IAAImD,KAAJ,CAAU,8BAAV,CAAN;AACJ,SAAK2F,OAAL,GAAeA,OAAf;AACH;;;;WAED,iBAAQ2f,KAAR,EAAe;AACX,aAAOA,KAAK,CAACjZ,GAAN,sBAAwBiZ,KAAK,CAACnd,IAA9B,SAAqCmd,KAAK,CAACzd,IAAN,KAAe,SAAf,GAA2B,UAA3B,GAAwC,EAA7E,cAAP;AACH;;;WAED,qBAAYyd,KAAZ,EAAmB;AACf,uBAAUA,KAAK,CAACnd,IAAhB;AACH;;;WAED,kBAASmd,KAAT,EAAgB;AACZ,aAAOA,KAAK,CAACjZ,GAAN,cAAgBiZ,KAAK,CAAC1P,KAAN,CAAY,CAAZ,CAAhB,kCAAsD0P,KAAK,CAAC1P,KAAN,CAAY,CAAZ,CAAtD,CAAP;AACH;;;WAED,oBAA+C;AAAA,UAAtCpU,MAAsC,uEAA7B,EAA6B;AAAA,UAAzBY,QAAyB,uEAAd,IAAImjB,QAAJ,EAAc;AAE3C,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,EAAE,GAAG,KAAT;;AAH2C,iDAIvBjkB,MAJuB;AAAA;;AAAA;AAI3C,4DAA4B;AAAA,cAAjB8jB,KAAiB;AACxB,cACInd,IADJ,GAWImd,KAXJ,CACInd,IADJ;AAAA,cAEIyN,KAFJ,GAWI0P,KAXJ,CAEI1P,KAFJ;AAAA,cAGIhR,KAHJ,GAWI0gB,KAXJ,CAGI1gB,KAHJ;AAAA,cAIIiD,IAJJ,GAWIyd,KAXJ,CAIIzd,IAJJ;AAAA,cAKIgO,EALJ,GAWIyP,KAXJ,CAKIzP,EALJ;AAAA,cAMI6P,EANJ,GAWIJ,KAXJ,CAMII,EANJ;AAAA,cAOItS,GAPJ,GAWIkS,KAXJ,CAOIlS,GAPJ;AAAA,cAQI2E,GARJ,GAWIuN,KAXJ,CAQIvN,GARJ;AAAA,cASI4N,EATJ,GAWIL,KAXJ,CASIK,EATJ;AAAA,cAUIjP,QAVJ,GAWI4O,KAXJ,CAUI5O,QAVJ;AAYA,cAAIA,QAAQ,KACR,CAACnZ,6CAAK,CAACsZ,oBAAN,CAA2BjS,KAA3B,CAAD,IACIiD,IAAI,KAAK,SAAT,IAAsBjD,KAAK,KAAK,KAF5B,CAAZ,EAGI;AACJ4gB,oBAAU,CAACF,KAAK,CAACnd,IAAP,CAAV,GAAyBmd,KAAK,CAAC1gB,KAA/B;;AACA,kBAAQiD,IAAR;AAEI,iBAAK,SAAL;AACI,kBAAI,CAAC,KAAKlC,OAAL,CAAapF,SAAb,CAAuBqE,KAAvB,CAAL,EAAoC;AAChC6gB,kBAAE,GAAG,IAAL;AACH,eAFD,MAEO;AACHD,0BAAU,CAACrd,IAAD,CAAV,GAAmB,KAAKxC,OAAL,CAAavF,OAAb,CAAqBI,KAArB,CAA2BoE,KAA3B,CAAnB;AACH;;AACD;;AAEJ,iBAAK,SAAL;AACI,kBAAI,CAACrH,6CAAK,CAACwC,SAAN,CAAgB6E,KAAhB,CAAD,IACC,OAAOiR,EAAP,KAAc,QAAd,IAA0BjR,KAAK,IAAI0gB,KAAK,CAACzP,EAD1C,IAEC,OAAO6P,EAAP,KAAc,QAAd,IAA0B9gB,KAAK,IAAI0gB,KAAK,CAACI,EAF1C,IAGC,OAAOtS,GAAP,KAAe,QAAf,IAA2BxO,KAAK,GAAG0gB,KAAK,CAAClS,GAH1C,IAIC,OAAO2E,GAAP,KAAe,QAAf,IAA2BnT,KAAK,GAAG0gB,KAAK,CAACvN,GAJ9C,EAIoD;AAChD0N,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,kBAAL;AACI,kBAAI,CAACloB,6CAAK,CAACwC,SAAN,CAAgB6E,KAAhB,CAAD,IAA2BA,KAAK,IAAI,CAAxC,EAA2C;AACvCxC,wBAAQ,CAAC,KAAKwjB,WAAL,CAAiBN,KAAjB,CAAD,CAAR;AACA;AACH;;AACD;;AAEJ,iBAAK,SAAL;AACI,kBAAI,CAAC/nB,6CAAK,CAACC,QAAN,CAAeoH,KAAf,CAAD,IAA0B,CAACA,KAAK,CAAChF,MAArC,EAA6C;AACzC6lB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,gBAAL;AACI,kBAAI,CAACloB,6CAAK,CAAC8S,QAAN,CAAezL,KAAf,CAAD,IAA0B,CAAC9D,MAAM,CAAC0L,IAAP,CAAY5H,KAAZ,EAAmBhF,MAAlD,EAA0D;AACtD6lB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,UAAL;AACI,kBAAID,UAAU,CAAC5P,KAAK,CAAC,CAAD,CAAN,CAAV,KAAyB4P,UAAU,CAAC5P,KAAK,CAAC,CAAD,CAAN,CAAvC,EAAmD;AAC/CxT,wBAAQ,CAAC,KAAKyjB,QAAL,CAAcP,KAAd,CAAD,CAAR;AACA,uBAAO,IAAP;AACH;;AACD;;AAEJ,iBAAK,UAAL;AACI,kBAAI,CAAC,CAAC,WAAD,EAAc,QAAd,EAAwBxlB,QAAxB,CAAiC8E,KAAjC,CAAL,EAA8C;AAC1C6gB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,KAAL;AACI,kBAAI,CAACloB,6CAAK,CAAC4S,UAAN,CAAiBvL,KAAjB,CAAL,EAA8B;AAC1B6gB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,KAAL;AACI,kBAAI,CAACloB,6CAAK,CAAC+E,KAAN,CAAYsC,KAAZ,CAAL,EAAyB;AACrB6gB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,OAAL;AACI,kBAAI,CAACzT,KAAK,CAAClD,OAAN,CAAclK,KAAd,CAAL,EAA2B;AACvB6gB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,kBAAL;AACI,kBAAI,CAACloB,6CAAK,CAACC,QAAN,CAAeoH,KAAf,CAAD,IAA0B,CAACA,KAAK,CAAChF,MAArC,EAA6C;AACzC6lB,kBAAE,GAAG,IAAL;AACH;;AACD;;AAEJ,iBAAK,SAAL;AACI,kBAAI,CAACloB,6CAAK,CAACmG,SAAN,CAAgBkB,KAAhB,CAAL,EAA6B;AACzB6gB,kBAAE,GAAG,IAAL;AACH;;AACD;;AACJ,iBAAK,QAAL;AACI,kBAAI,CAACloB,6CAAK,CAACC,QAAN,CAAeoH,KAAf,CAAD,IACC,OAAOiR,EAAP,KAAc,QAAd,IAA0BjR,KAAK,CAAChF,MAAN,IAAgB0lB,KAAK,CAACzP,EADjD,IAEC,OAAO6P,EAAP,KAAc,QAAd,IAA0B9gB,KAAK,CAAChF,MAAN,IAAgB0lB,KAAK,CAACI,EAFjD,IAGC,OAAOtS,GAAP,KAAe,QAAf,IAA2BxO,KAAK,CAAChF,MAAN,GAAe0lB,KAAK,CAAClS,GAHjD,IAIC,OAAO2E,GAAP,KAAe,QAAf,IAA2BnT,KAAK,CAAChF,MAAN,GAAe0lB,KAAK,CAACvN,GAJrD,EAI2D;AACvD0N,kBAAE,GAAG,IAAL;AACH;;AACD;AAzFR;;AA2FA,cAAIA,EAAJ,EAAQ;AACJrjB,oBAAQ,CAAC,KAAKiV,OAAL,CAAaiO,KAAb,CAAD,CAAR;AACA,mBAAO,IAAP;AACH;AACJ;AArH0C;AAAA;AAAA;AAAA;AAAA;;AAsH3C,aAAO,KAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IL;AACA;AACA;AAEA,IAAMjN,QAAQ,GAAG,IAAIC,qDAAJ,EAAjB;;AAEA,SAASwN,QAAT,CAAkBC,MAAlB,EAA0B;AACtB,SAAO/T,KAAK,CAAClD,OAAN,CAAciX,MAAd,CAAP;AACH;;AAED,SAASC,aAAT,CAAuBphB,KAAvB,EAA8B;AAC1B,SAAO/H,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsBoE,KAAtB,EAA6BjC,OAA7B,CAAqC4V,kEAArC,EAA2D,IAA3D,CAAP;AACH;;AAED,SAAS0N,QAAT,CAAkBC,MAAlB,EAA0B;AACtB,MACIplB,MAAM,CAACqlB,SAAP,CAAiB5iB,QAAjB,CAA0BiI,IAA1B,CAA+B0a,MAA/B,MAA2C,iBAA3C,IACAplB,MAAM,CAACqlB,SAAP,CAAiB5iB,QAAjB,CAA0BiI,IAA1B,CAA+B0a,MAA/B,MAA2C,gBAF/C,EAGE;AACE,WAAOA,MAAP;AACH;;AACD,MAAME,SAAS,GAAGN,QAAQ,CAACI,MAAD,CAAR,GAAmB,EAAnB,GAAwB,EAA1C;AAEAplB,QAAM,CAAC0L,IAAP,CAAY0Z,MAAZ,EAAoBtnB,OAApB,CAA4B,UAAAC,GAAG;AAAA,WAC3BunB,SAAS,CAACvnB,GAAD,CAAT,GAAiBqnB,MAAM,CAACrnB,GAAD,CAAN,YAAuBiC,MAAvB,IAAiC,CAAColB,MAAM,CAACrnB,GAAD,CAAN,CAAYwnB,YAA9C,GAA6DJ,QAAQ,CAACC,MAAM,CAACrnB,GAAD,CAAP,CAArE,GAAqFqnB,MAAM,CAACrnB,GAAD,CADjF;AAAA,GAA/B;AAIA,SAAOunB,SAAP;AACH;;AAEM,SAASE,YAAT,CAAsB1Q,KAAtB,EAA6B9J,KAA7B,EAAoClB,MAApC,EAA4C2b,gBAA5C,EAA8D;AACjE,MAAI,CAAC3b,MAAD,IAAW,OAAOA,MAAP,KAAkB,SAAjC,EAA4C;AACxC2b,oBAAgB,GAAG3b,MAAnB;AACAA,UAAM,GAAGkB,KAAT;AACAA,SAAK,GAAG8J,KAAR;AACAA,SAAK,GAAG,EAAR;AACH;;AAED,MAAI2Q,gBAAgB,IAAI3b,MAAM,CAACjI,OAAP,CAAe,KAAf,EAAsB,EAAtB,EAA0B/C,MAA1B,GAAmC,EAAnC,KAA0C,CAAlE,EACIgL,MAAM,GAAG,OAAOA,MAAM,CAACjI,OAAP,CAAe,KAAf,EAAsB,EAAtB,EAA0Ba,SAA1B,CAAoC,CAApC,CAAhB;AAEJ,MAAIoH,MAAM,CAACjI,OAAP,CAAe,KAAf,EAAsB,EAAtB,EAA0B/C,MAA1B,GAAmC,EAAvC,EACI,MAAM,IAAII,KAAJ,CAAU,uEAAV,CAAN,CAZ6D,CAcjE;;AACA8L,OAAK,GAAGA,KAAK,CAACG,GAAN,CAAU,UAAApE,IAAI,EAAI;AACtB,QAAI,WAAW7D,IAAX,CAAgB6D,IAAhB,CAAJ,EAA2B;AACvBA,UAAI,GAAGA,IAAI,CAAClF,OAAL,CAAa,UAAb,EAAyB,SAAzB,CAAP;AACH;;AACD,WAAOkF,IAAP;AACH,GALO,CAAR;AAOA,SAAOwQ,QAAQ,CAACmO,MAAT,CAAgB1a,KAAhB,EAAuBlB,MAAvB,EAA+BkX,MAA/B,CAAsC,UAAC2E,GAAD,EAAMC,GAAN,EAAW9f,KAAX,EAAqB;AAC9D,QAAIkF,KAAK,CAAClF,KAAD,CAAL,IAAgB,SAApB,EACI8f,GAAG,GAAG9jB,4DAAc,GAAG8jB,GAAG,CAACniB,MAAJ,CAAW,CAAX,EAAc1B,WAAd,EAAvB;AAEJ,QAAI+S,KAAK,CAAChW,MAAV,EACI6mB,GAAG,CAAC7Q,KAAK,CAAChP,KAAD,CAAN,CAAH,GAAoB8f,GAApB,CADJ,KAEKD,GAAG,CAACle,IAAJ,CAASme,GAAT;AAEL,WAAOD,GAAP;AACH,GATM,EASJ7Q,KAAK,CAAChW,MAAN,GAAe,EAAf,GAAoB,EAThB,CAAP;AAUH;AAEM,SAAS+mB,YAAT,CAAsB7a,KAAtB,EAA6B/K,MAA7B,EAAqC;AAExC,OAAK,IAAIqD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0H,KAAK,CAAClM,MAA1B,EAAkCwE,CAAC,EAAnC,EAAuC;AACnC,QAAI0H,KAAK,CAAC1H,CAAD,CAAL,KAAa,SAAjB,EAA4B;AACxBrD,YAAM,CAACqD,CAAD,CAAN,GAAYvH,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsBO,MAAM,CAACqD,CAAD,CAA5B,EAAiCzB,OAAjC,CAAyC4V,kEAAzC,EAA+D,IAA/D,CAAZ;AACH;AACJ;;AAED,SAAOF,QAAQ,CAACK,MAAT,CAAgB5M,KAAhB,EAAuB/K,MAAvB,CAAP;AACH;;AAED,SAAS6lB,WAAT,CAAsB/e,IAAtB,EAA4B;AAC1B,MAAMjG,IAAI,GAAGiG,IAAI,CAAC2Q,KAAL,CAAW,uBAAX,CAAb;AACA,SAAO5W,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAa,EAAxB;AACD;;AAED,SAASilB,eAAT,CAA0Bhf,IAA1B,EAAgC;AAC9B,MAAMjG,IAAI,GAAGglB,WAAW,CAAC/e,IAAD,CAAxB;AACA,SAAO,CAACjG,IAAI,CAAC4W,KAAL,CAAW,OAAX,KAAuB,EAAxB,EAA4B5Y,MAA5B,GAAqC,CAA5C;AACD;;AAEM,SAAS2L,mBAAT,CAA6Bub,MAA7B,EAAqCxb,IAArC,EAA2C;AAC9C,MAAMQ,KAAK,GAAG,EAAd;;AAEA,MAAMib,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD,EAAa;AAC3C,QAAIA,OAAO,IAAIA,OAAO,CAACnf,IAAR,CAAa4K,OAAb,CAAqB,OAArB,MAAkC,CAA7C,IAAkDuU,OAAO,CAAC1X,UAA9D,EAA0E;AACxE,UAAM2X,UAAU,GAAGD,OAAO,CAAC1X,UAAR,CAAmBrD,GAAnB,CAAuB,UAACib,SAAD,EAAe;AAAE,eAAOH,uBAAuB,CAACG,SAAD,CAA9B;AAA2C,OAAnF,CAAnB;AACA,6BAAgBD,UAAU,CAACrY,IAAX,CAAgB,GAAhB,CAAhB,cAAwCgY,WAAW,CAACI,OAAO,CAACnf,IAAT,CAAnD;AACD;;AAED,QAAI,WAAW7D,IAAX,CAAgBgjB,OAAO,CAACnf,IAAxB,CAAJ,EACE,OAAOmf,OAAO,CAACnf,IAAR,CAAalF,OAAb,CAAqB,UAArB,EAAiC,SAAjC,CAAP;AAEF,WAAOqkB,OAAO,CAACnf,IAAf;AACD,GAVD;;AAYA,MAAMsf,YAAY,GAAG,SAAfA,YAAe,CAACrb,KAAD,EAAW;AAC9B,SAAK,IAAI1H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0H,KAAK,CAAClM,MAA1B,EAAkCwE,CAAC,EAAnC,EAAuC;AACrC,UAAMyD,IAAI,GAAGiE,KAAK,CAAC1H,CAAD,CAAlB;AACA,UAAI,WAAWJ,IAAX,CAAgB6D,IAAhB,CAAJ,EACEiE,KAAK,CAAC1H,CAAD,CAAL,GAAWyD,IAAI,CAAClF,OAAL,CAAa,UAAb,EAAyB,SAAzB,CAAX;AACH;AACF,GAND;;AAQA,MAAMykB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO,EAAI;AAClC,QAAIrV,KAAK,CAAClD,OAAN,CAAcuY,OAAd,CAAJ,EAA4B;AAC1BA,aAAO,CAACzoB,OAAR,CAAgB,UAAC0oB,KAAD,EAAQljB,CAAR,EAAc;AAC5BijB,eAAO,CAACjjB,CAAD,CAAP,GAAagjB,gBAAgB,CAACE,KAAD,CAA7B;AACD,OAFD;AAGA,aAAOD,OAAP;AACD,KALD,MAKO;AACL,aAAOrB,aAAa,CAACqB,OAAD,CAApB;AACD;AACF,GATD;;AAWA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAACjY,UAAD,EAAahE,IAAb,EAAmBkc,SAAnB,EAAiC;AAChD,QAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB,UAAIlc,IAAI,CAAC1L,MAAT,EAAiB;AACf0L,YAAI,CAAC1M,OAAL,CAAa,UAAA8nB,GAAG,EAAI;AAClBa,kBAAQ,CAACjY,UAAD,EAAaoX,GAAb,EAAkBc,SAAS,GAAG,CAA9B,CAAR;AACD,SAFD;AAGD;AACF,KAND,MAMO;AACL,UAAIlc,IAAI,CAAC1L,MAAL,IAAe4nB,SAAnB,EAA8B;AAC5Blc,YAAI,CAAC1M,OAAL,CAAa,UAAA8nB,GAAG,EAAI;AAClBe,oBAAU,CAACnY,UAAD,EAAaoX,GAAb,CAAV;AACD,SAFD;AAGD;AACF;AACF,GAdD;;AAgBA,MAAMe,UAAU,GAAG,SAAbA,UAAa,GAAuB;AAAA,QAAtB3c,MAAsB,uEAAb,EAAa;AAAA,QAATQ,IAAS;AACxC,QAAIR,MAAM,CAAClL,MAAX,EACEkL,MAAM,CAAClM,OAAP,CAAe,UAAC8oB,KAAD,EAAQtjB,CAAR,EAAc;AAC3B,UAAMyD,IAAI,GAAG6f,KAAK,CAAC7f,IAAnB;AAEA,UAAIyD,IAAI,CAAClH,CAAD,CAAR,EACE,IAAIyD,IAAI,KAAK,SAAb,EAAwByD,IAAI,CAAClH,CAAD,CAAJ,GAAU4hB,aAAa,CAAC1a,IAAI,CAAClH,CAAD,CAAL,CAAvB,CAAxB,KACK,IAAIyD,IAAI,CAAC2Q,KAAL,CAAW,qBAAX,EAAkC,CAAlC,MAAyC,UAA7C,EACH4O,gBAAgB,CAAC9b,IAAI,CAAClH,CAAD,CAAL,CAAhB,CADG,KAEA,IAAIyD,IAAI,CAAC4K,OAAL,CAAa,OAAb,MAA0B,CAA9B,EACH,IAAImU,WAAW,CAAC/e,IAAD,CAAf,EAAuB;AACrB,YAAM2f,SAAS,GAAGX,eAAe,CAAChf,IAAD,CAAjC;AACA0f,gBAAQ,CAACG,KAAK,CAACpY,UAAP,EAAmBhE,IAAI,CAAClH,CAAD,CAAvB,EAA4BojB,SAA5B,CAAR;AACD,OAHD,MAGOC,UAAU,CAACC,KAAK,CAACpY,UAAP,EAAmBhE,IAAI,CAAClH,CAAD,CAAvB,CAAV;AACZ,KAZD;AAaH,GAfD;;AAiBA,MAAI0iB,MAAM,CAAChc,MAAP,IAAiBgc,MAAM,CAAChc,MAAP,CAAclL,MAAnC,EAA2C;AACzC,SAAK,IAAIwE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0iB,MAAM,CAAChc,MAAP,CAAclL,MAAlC,EAA0CwE,CAAC,EAA3C,EAA+C;AAC7C,UAAMyD,IAAI,GAAGif,MAAM,CAAChc,MAAP,CAAc1G,CAAd,EAAiByD,IAA9B,CAD6C,CAE7C;AACA;;AACA,UAAIA,IAAI,KAAK,MAAT,IAAmByD,IAAI,CAAClH,CAAD,CAAJ,KAAY,OAAnC,EAA4C;AAC1CkH,YAAI,CAAClH,CAAD,CAAJ,GAAU,KAAV;AACD;;AACD0H,WAAK,CAACvD,IAAN,CAAWV,IAAI,CAAC4K,OAAL,CAAa,OAAb,MAA0B,CAA1B,GAA8BsU,uBAAuB,CAACD,MAAM,CAAChc,MAAP,CAAc1G,CAAd,CAAD,CAArD,GAA0EyD,IAArF;;AACA,UAAIyD,IAAI,CAAC1L,MAAL,GAAckM,KAAK,CAAClM,MAAxB,EAAgC;AAC9B0L,YAAI,CAAC/C,IAAL,CAAU,EAAV;AACD;AACF;AACF;;AAEDkf,YAAU,CAACX,MAAM,CAAChc,MAAR,EAAgBQ,IAAhB,CAAV;AACA6b,cAAY,CAACrb,KAAD,CAAZ;AAEA,SAAOuM,QAAQ,CAACK,MAAT,CAAgB5M,KAAhB,EAAuBR,IAAvB,CAAP;AACH;AAEM,SAAST,mBAAT,CAA6Bic,MAA7B,EAAqCte,IAArC,EAA2C;AAChD,MAAMmf,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC7b,KAAD,EAAW;AAClC,SAAK,IAAI1H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0H,KAAK,CAAClM,MAA1B,EAAkCwE,CAAC,EAAnC,EAAuC;AACrC,UAAMyD,IAAI,GAAGiE,KAAK,CAAC1H,CAAD,CAAlB;AACA,UAAI,YAAYJ,IAAZ,CAAiB6D,IAAjB,CAAJ,EACEiE,KAAK,CAAC1H,CAAD,CAAL,GAAWyD,IAAI,CAAClF,OAAL,CAAa,WAAb,EAA0B,SAA1B,CAAX;AACH;AACF,GAND;;AAQA,MAAMykB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,OAAO,EAAI;AAClC,QAAIrV,KAAK,CAAClD,OAAN,CAAcuY,OAAd,CAAJ,EAA4B;AAC1BA,aAAO,CAACzoB,OAAR,CAAgB,UAAC0oB,KAAD,EAAQljB,CAAR,EAAc;AAC5BijB,eAAO,CAACjjB,CAAD,CAAP,GAAagjB,gBAAgB,CAACE,KAAD,CAA7B;AACD,OAFD;AAGA,aAAOD,OAAP;AACD,KALD,MAKO;AACL,aAAOxqB,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsB6mB,OAAtB,CAAP;AACD;AACF,GATD;;AAWA,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAACjY,UAAD,EAAahE,IAAb,EAAmBkc,SAAnB,EAAiC;AAChD,QAAIA,SAAS,GAAG,CAAhB,EAAmB;AACjB,UAAIlc,IAAI,CAAC1L,MAAT,EAAiB;AACf0L,YAAI,CAAC1M,OAAL,CAAa,UAAA8nB,GAAG,EAAI;AAClBa,kBAAQ,CAACjY,UAAD,EAAaoX,GAAb,EAAkBc,SAAS,GAAG,CAA9B,CAAR;AACD,SAFD;AAGD;AACF,KAND,MAMO;AACL,UAAIlc,IAAI,CAAC1L,MAAL,IAAe4nB,SAAnB,EAA8B;AAC5Blc,YAAI,CAAC1M,OAAL,CAAa,UAAA8nB,GAAG,EAAI;AAClBkB,sBAAY,CAACtY,UAAD,EAAaoX,GAAb,CAAZ;AACD,SAFD;AAGD;AACF;AACF,GAdD;;AAgBA,MAAMmB,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACb,OAAD,EAAa;AAC/C,QAAM7e,IAAI,GAAG6e,OAAO,CAAC7e,IAAR,cAAmB6e,OAAO,CAAC7e,IAA3B,IAAoC,EAAjD;;AACA,QAAI6e,OAAO,IAAIA,OAAO,CAACnf,IAAR,CAAa4K,OAAb,CAAqB,OAArB,MAAkC,CAA7C,IAAkDuU,OAAO,CAAC1X,UAA9D,EAA0E;AACxE,UAAM2X,UAAU,GAAGD,OAAO,CAAC1X,UAAR,CAAmBrD,GAAnB,CAAuB,UAACib,SAAD,EAAe;AAAE,eAAOW,2BAA2B,CAACX,SAAD,CAAlC;AAA+C,OAAvF,CAAnB;AACA,6BAAgBD,UAAU,CAACrY,IAAX,CAAgB,GAAhB,CAAhB,cAAwCgY,WAAW,CAACI,OAAO,CAACnf,IAAT,CAAnD,SAAoEM,IAApE;AACD;;AACD,QAAI,WAAWnE,IAAX,CAAgBgjB,OAAO,CAACnf,IAAxB,CAAJ,EACE,OAAOmf,OAAO,CAACnf,IAAR,CAAalF,OAAb,CAAqB,UAArB,EAAiC,SAAjC,IAA8CwF,IAArD;AAEF,WAAO6e,OAAO,CAACnf,IAAR,GAAeM,IAAtB;AACD,GAVD;;AAYA,MAAMyf,YAAY,GAAG,SAAfA,YAAe,GAA0B;AAAA,QAAzB7c,OAAyB,uEAAf,EAAe;AAAA,QAAX7G,MAAW;AAC7C,QAAI6G,OAAO,CAACnL,MAAZ,EACEmL,OAAO,CAACnM,OAAR,CAAgB,UAACgM,MAAD,EAASxG,CAAT,EAAe;AAC7B,UAAOyD,IAAP,GAAqB+C,MAArB,CAAO/C,IAAP;AAAA,UAAaM,IAAb,GAAqByC,MAArB,CAAazC,IAAb;AAEA,UAAIjE,MAAM,CAACE,CAAD,CAAV,EACE,IAAIyD,IAAI,KAAK,SAAb,EAAwB;AACtB3D,cAAM,CAACE,CAAD,CAAN,GAAYvH,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsB0D,MAAM,CAACE,CAAD,CAA5B,CAAZ;AACA,YAAG+D,IAAH,EAASjE,MAAM,CAACiE,IAAD,CAAN,GAAetL,6CAAO,CAACuD,OAAR,CAAgBI,KAAhB,CAAsB0D,MAAM,CAACiE,IAAD,CAA5B,CAAf;AACV,OAHD,MAIK,IAAIN,IAAI,CAAC2Q,KAAL,CAAW,qBAAX,EAAkC,CAAlC,MAAyC,UAA7C,EAAyD;AAC5D4O,wBAAgB,CAACljB,MAAM,CAACE,CAAD,CAAP,CAAhB;AACA,YAAG+D,IAAH,EAASif,gBAAgB,CAACljB,MAAM,CAACiE,IAAD,CAAP,CAAhB;AACV,OAHI,MAIA,IAAIN,IAAI,CAAC4K,OAAL,CAAa,OAAb,MAA0B,CAA9B,EAAiC;AACpC,YAAImU,WAAW,CAAC/e,IAAD,CAAf,EAAuB;AACrB,cAAM2f,SAAS,GAAGX,eAAe,CAAChf,IAAD,CAAjC;AACA0f,kBAAQ,CAAC3c,MAAM,CAAC0E,UAAR,EAAoBpL,MAAM,CAACE,CAAD,CAA1B,EAA+BojB,SAA/B,CAAR;AACD,SAHD,MAGOI,YAAY,CAAChd,MAAM,CAAC0E,UAAR,EAAoBpL,MAAM,CAACE,CAAD,CAA1B,CAAZ;;AAEP,YAAG+D,IAAH,EAASjE,MAAM,CAACiE,IAAD,CAAN,GAAejE,MAAM,CAACE,CAAD,CAArB;AACV;AACJ,KApBD;AAqBH,GAvBD,CAhDgD,CAyEhD;;;AACA,MAAI0iB,MAAM,CAAC/b,OAAP,IAAkB+b,MAAM,CAAC/b,OAAP,CAAenL,MAAf,GAAwB,CAA9C,EAAiD;AAE7C,QAAIkoB,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAI1jB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0iB,MAAM,CAAC/b,OAAP,CAAenL,MAAnC,EAA2CwE,CAAC,EAA5C,EAAgD;AAC9C,UAAMyD,IAAI,GAAGif,MAAM,CAAC/b,OAAP,CAAe3G,CAAf,EAAkByD,IAA/B;AACA,UAAMM,IAAI,GAAG2e,MAAM,CAAC/b,OAAP,CAAe3G,CAAf,EAAkB+D,IAAlB,cAA6B2e,MAAM,CAAC/b,OAAP,CAAe3G,CAAf,EAAkB+D,IAA/C,IAAwD,EAArE;AACA2f,iBAAW,CAACvf,IAAZ,CAAiBV,IAAI,CAAC4K,OAAL,CAAa,OAAb,MAA0B,CAA1B,GAA8BoV,2BAA2B,CAACf,MAAM,CAAC/b,OAAP,CAAe3G,CAAf,CAAD,CAAzD,GAA+EyD,IAAI,GAAGM,IAAvG;AACD;;AACDwf,oBAAgB,CAACG,WAAD,CAAhB;AAEA,QAAI,CAACtf,IAAD,IAAS,CAACA,IAAI,CAAC5I,MAAnB,EAA2B4I,IAAI,GAAG,IAAIuf,UAAJ,CAAe,KAAKjB,MAAM,CAAC/b,OAAP,CAAenL,MAAnC,CAAP,CAVkB,CAUiC;AAC9E;;AACA,QAAMooB,SAAS,GAAG3P,QAAQ,CAACmO,MAAT,CAAgBsB,WAAhB,EAA6Btf,IAA7B,CAAlB;AACA,QAAMyf,aAAa,GAAGhC,QAAQ,CAAC+B,SAAD,CAA9B;AACAJ,gBAAY,CAACd,MAAM,CAAC/b,OAAR,EAAiBkd,aAAjB,CAAZ;AAEA,WAAOA,aAAP;AACH;;AACD,SAAO,EAAP;AACD,C;;;;;;;;;;;;;;;;;;;AC1QD;AACA;AAOO,SAASxiB,eAAT,GAA2B;AAC9B,MAAMgM,WAAW,GAAGyW,yDAAS,EAA7B;AACA,MAAMC,WAAW,GAAGC,mEAAmB,CAAC3W,WAAD,CAAvC;AACA,MAAM4W,YAAY,GAAGC,oEAAoB,CAAC7W,WAAD,CAAzC;AAEA,MAAMvU,UAAU,GAAG4F,+DAAgB,CAAC2O,WAAD,CAAnC;AACA,MAAM8W,SAAS,GAAGzlB,+DAAgB,CAACqlB,WAAD,CAAlC;AAEA,SAAO;AACHjrB,cAAU,EAAVA,UADG;AAEHqrB,aAAS,EAATA,SAFG;AAGHnoB,WAAO,EAAE;AACLzB,YAAM,EAAE6D,qEAAqB,CAAC6lB,YAAD,CADxB;AAEL3pB,SAAG,EAAEoE,+DAAgB,CAACulB,YAAD;AAFhB;AAHN,GAAP;AAQH,C;;;;;;;;;;;;;;;;;;;;ACxBM,IAAMG,YAAY,GAAG,EAArB;AACA,IAAM5lB,cAAc,GAAG,IAAvB;AACA,IAAM6lB,mBAAmB,GAAG,IAA5B;AACA,IAAMlQ,oBAAoB,GAAG,OAA7B,C;;;;;;;;;;;;;;;;;;ACHP,IAAMmQ,QAAQ,GAAG,4DAAjB;AACA,IAAMC,YAAY,GAAG,EAArB;;AAEA,KAAK,IAAIvkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGskB,QAAQ,CAAC9oB,MAA7B,EAAqCwE,CAAC,EAAtC;AACIukB,cAAY,CAACD,QAAQ,CAACE,MAAT,CAAgBxkB,CAAhB,CAAD,CAAZ,GAAmCA,CAAnC;AADJ;;AAGA,IAAMykB,IAAI,GAAG,EAAb;AAEO,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAC7B,MAAIA,MAAM,CAACnpB,MAAP,KAAkB,CAAtB,EACI,OAAO,EAAP;AAEJ,MAAIwE,CAAJ;AACA,MAAI4kB,CAAJ;AAEA,MAAMC,MAAM,GAAG,CAAC,CAAD,CAAf;;AAEA,OAAK7kB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2kB,MAAM,CAACnpB,MAAvB,EAA+BwE,CAAC,EAAhC,EAAoC;AAChC,SAAK4kB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAM,CAACrpB,MAAvB,EAA+BopB,CAAC,EAAhC;AACIC,YAAM,CAACD,CAAD,CAAN,KAAc,CAAd;AADJ;;AAGAC,UAAM,CAAC,CAAD,CAAN,IAAaF,MAAM,CAAC3kB,CAAD,CAAnB;AACA,QAAI8kB,KAAK,GAAG,CAAZ;;AAEA,SAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,MAAM,CAACrpB,MAAvB,EAA+B,EAAEopB,CAAjC,EAAoC;AAChCC,YAAM,CAACD,CAAD,CAAN,IAAaE,KAAb;AACAA,WAAK,GAAID,MAAM,CAACD,CAAD,CAAN,GAAYH,IAAb,GAAqB,CAA7B;AACAI,YAAM,CAACD,CAAD,CAAN,IAAaH,IAAb;AACH;;AAED,WAAOK,KAAP,EAAc;AACVD,YAAM,CAAC1gB,IAAP,CAAY2gB,KAAK,GAAGL,IAApB;AACAK,WAAK,GAAIA,KAAK,GAAGL,IAAT,GAAiB,CAAzB;AACH;AACJ;;AAED,OAAKzkB,CAAC,GAAG,CAAT,EAAY2kB,MAAM,CAAC3kB,CAAD,CAAN,KAAc,CAAd,IAAmBA,CAAC,GAAG2kB,MAAM,CAACnpB,MAAP,GAAgB,CAAnD,EAAsDwE,CAAC,EAAvD;AACI6kB,UAAM,CAAC1gB,IAAP,CAAY,CAAZ;AADJ;;AAGA,SAAO0gB,MAAM,CAACE,OAAP,GAAiBld,GAAjB,CAAqB,UAAAmd,KAAK;AAAA,WAAIV,QAAQ,CAACU,KAAD,CAAZ;AAAA,GAA1B,EAA+Cxa,IAA/C,CAAoD,EAApD,CAAP;AACH;AAEM,SAASya,QAAT,CAAkBnmB,MAAlB,EAA0B;AAC7B,MAAIA,MAAM,CAACtD,MAAP,KAAkB,CAAtB,EACI,OAAO,EAAP;AAEJ,MAAIwE,CAAJ;AACA,MAAI4kB,CAAJ;AAEA,MAAMM,KAAK,GAAG,CAAC,CAAD,CAAd;;AAEA,OAAKllB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGlB,MAAM,CAACtD,MAAvB,EAA+BwE,CAAC,EAAhC,EAAoC;AAChC,QAAMmlB,CAAC,GAAGrmB,MAAM,CAACkB,CAAD,CAAhB;AAEA,QAAI,EAAEmlB,CAAC,IAAIZ,YAAP,CAAJ,EACI,MAAM,IAAI3oB,KAAJ,CAAU,sBAAV,CAAN;;AAEJ,SAAKgpB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGM,KAAK,CAAC1pB,MAAtB,EAA8BopB,CAAC,EAA/B;AACIM,WAAK,CAACN,CAAD,CAAL,IAAYH,IAAZ;AADJ;;AAGAS,SAAK,CAAC,CAAD,CAAL,IAAYX,YAAY,CAACY,CAAD,CAAxB;AACA,QAAIL,KAAK,GAAG,CAAZ;;AAEA,SAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGM,KAAK,CAAC1pB,MAAtB,EAA8B,EAAEopB,CAAhC,EAAmC;AAC/BM,WAAK,CAACN,CAAD,CAAL,IAAYE,KAAZ;AACAA,WAAK,GAAGI,KAAK,CAACN,CAAD,CAAL,IAAY,CAApB;AACAM,WAAK,CAACN,CAAD,CAAL,IAAY,IAAZ;AACH;;AAED,WAAOE,KAAP,EAAc;AACVI,WAAK,CAAC/gB,IAAN,CAAW2gB,KAAK,GAAG,IAAnB;AACAA,WAAK,KAAK,CAAV;AACH;AACJ;;AAED,OAAK9kB,CAAC,GAAG,CAAT,EAAYlB,MAAM,CAACkB,CAAD,CAAN,KAAc,GAAd,IAAqBA,CAAC,GAAGlB,MAAM,CAACtD,MAAP,GAAgB,CAArD,EAAwDwE,CAAC,EAAzD;AACIklB,SAAK,CAAC/gB,IAAN,CAAW,CAAX;AADJ;;AAGA,SAAO+gB,KAAK,CAACH,OAAN,EAAP;AACH,C;;;;;;;;;;;;;;;;;AC/EM,SAASK,MAAT,GAAkB;AAAA;;AACrB,OAAKC,OAAL,GAAe,mEAAf;;AAEA,OAAK/Q,MAAL,GAAc,UAAAgP,KAAK,EAAI;AACnB,QAAI9c,MAAM,GAAG,EAAb;AACA,QAAI8e,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAI5lB,CAAC,GAAG,CAAR;;AAEA,WAAOA,CAAC,GAAGsjB,KAAK,CAAC9nB,MAAjB,EAAyB;AACrB8pB,UAAI,GAAGhC,KAAK,CAACuC,UAAN,CAAiB7lB,CAAC,EAAlB,CAAP;AACAulB,UAAI,GAAGjC,KAAK,CAACuC,UAAN,CAAiB7lB,CAAC,EAAlB,CAAP;AACAwlB,UAAI,GAAGlC,KAAK,CAACuC,UAAN,CAAiB7lB,CAAC,EAAlB,CAAP;AAEAylB,UAAI,GAAGH,IAAI,IAAI,CAAf;AACAI,UAAI,GAAI,CAACJ,IAAI,GAAG,CAAR,KAAc,CAAf,GAAqBC,IAAI,IAAI,CAApC;AACAI,UAAI,GAAI,CAACJ,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAArC;AACAI,UAAI,GAAGJ,IAAI,GAAG,EAAd;AAEA,UAAIxZ,KAAK,CAACuZ,IAAD,CAAT,EACII,IAAI,GAAGC,IAAI,GAAG,EAAd,CADJ,KAEK,IAAI5Z,KAAK,CAACwZ,IAAD,CAAT,EACDI,IAAI,GAAG,EAAP;AAEJpf,YAAM,GAAGA,MAAM,GACX,KAAI,CAAC6e,OAAL,CAAab,MAAb,CAAoBiB,IAApB,CADK,GACuB,KAAI,CAACJ,OAAL,CAAab,MAAb,CAAoBkB,IAApB,CADvB,GAEL,KAAI,CAACL,OAAL,CAAab,MAAb,CAAoBmB,IAApB,CAFK,GAEuB,KAAI,CAACN,OAAL,CAAab,MAAb,CAAoBoB,IAApB,CAFhC;AAGH;;AAED,WAAOpf,MAAP;AACH,GAhCD;;AAkCA,OAAKsf,gBAAL,GAAwB,UAAAC,UAAU,EAAI;AAClC,QAAIvf,MAAM,GAAG,EAAb;AACA,QAAI8e,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAI5lB,CAAC,GAAG,CAAR;;AAEA,WAAOA,CAAC,GAAG+lB,UAAU,CAACvqB,MAAtB,EAA8B;AAC1B8pB,UAAI,GAAGS,UAAU,CAAC/lB,CAAC,EAAF,CAAjB;AACAulB,UAAI,GAAGQ,UAAU,CAAC/lB,CAAC,EAAF,CAAjB;AACAwlB,UAAI,GAAGO,UAAU,CAAC/lB,CAAC,EAAF,CAAjB;AAEAylB,UAAI,GAAGH,IAAI,IAAI,CAAf;AACAI,UAAI,GAAI,CAACJ,IAAI,GAAG,CAAR,KAAc,CAAf,GAAqBC,IAAI,IAAI,CAApC;AACAI,UAAI,GAAI,CAACJ,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAArC;AACAI,UAAI,GAAGJ,IAAI,GAAG,EAAd;AAEA,UAAIxZ,KAAK,CAACuZ,IAAD,CAAT,EACII,IAAI,GAAGC,IAAI,GAAG,EAAd,CADJ,KAEK,IAAI5Z,KAAK,CAACwZ,IAAD,CAAT,EACDI,IAAI,GAAG,EAAP;AAEJpf,YAAM,GAAGA,MAAM,GACX,KAAI,CAAC6e,OAAL,CAAab,MAAb,CAAoBiB,IAApB,CADK,GACuB,KAAI,CAACJ,OAAL,CAAab,MAAb,CAAoBkB,IAApB,CADvB,GAEL,KAAI,CAACL,OAAL,CAAab,MAAb,CAAoBmB,IAApB,CAFK,GAEuB,KAAI,CAACN,OAAL,CAAab,MAAb,CAAoBoB,IAApB,CAFhC;AAGH;;AAED,WAAOpf,MAAP;AACH,GAhCD;;AAkCA,OAAK4b,MAAL,GAAc,UAAAkB,KAAK,EAAI;AACnB,QAAI9c,MAAM,GAAG,EAAb;AACA,QAAI8e,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAI5lB,CAAC,GAAG,CAAR;AAEAsjB,SAAK,GAAGA,KAAK,CAAC/kB,OAAN,CAAc,qBAAd,EAAqC,EAArC,CAAR;;AAEA,WAAOyB,CAAC,GAAGsjB,KAAK,CAAC9nB,MAAjB,EAAyB;AACrBiqB,UAAI,GAAG,KAAI,CAACJ,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AACA0lB,UAAI,GAAG,KAAI,CAACL,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AACA2lB,UAAI,GAAG,KAAI,CAACN,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AACA4lB,UAAI,GAAG,KAAI,CAACP,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AAEAslB,UAAI,GAAIG,IAAI,IAAI,CAAT,GAAeC,IAAI,IAAI,CAA9B;AACAH,UAAI,GAAI,CAACG,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAArC;AACAH,UAAI,GAAI,CAACG,IAAI,GAAG,CAAR,KAAc,CAAf,GAAoBC,IAA3B;AAEApf,YAAM,GAAGA,MAAM,GAAGpG,MAAM,CAACC,YAAP,CAAoBilB,IAApB,CAAlB;AAEA,UAAIK,IAAI,IAAI,EAAZ,EACInf,MAAM,GAAGA,MAAM,GAAGpG,MAAM,CAACC,YAAP,CAAoBklB,IAApB,CAAlB;AAEJ,UAAIK,IAAI,IAAI,EAAZ,EACIpf,MAAM,GAAGA,MAAM,GAAGpG,MAAM,CAACC,YAAP,CAAoBmlB,IAApB,CAAlB;AACP;;AAED,WAAO,KAAI,CAACQ,YAAL,CAAkBxf,MAAlB,CAAP;AACH,GAjCD;;AAmCA,OAAKyf,iBAAL,GAAyB,UAAA3C,KAAK,EAAI;AAC9B,QAAI9c,MAAM,GAAG,EAAb;AACA,QAAI8e,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,IAAJ;AACA,QAAI5lB,CAAC,GAAG,CAAR;AAEAsjB,SAAK,GAAGA,KAAK,CAAC/kB,OAAN,CAAc,qBAAd,EAAqC,EAArC,CAAR;;AAEA,WAAOyB,CAAC,GAAGsjB,KAAK,CAAC9nB,MAAjB,EAAyB;AACrBiqB,UAAI,GAAG,KAAI,CAACJ,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AACA0lB,UAAI,GAAG,KAAI,CAACL,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AACA2lB,UAAI,GAAG,KAAI,CAACN,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AACA4lB,UAAI,GAAG,KAAI,CAACP,OAAL,CAAahX,OAAb,CAAqBiV,KAAK,CAACkB,MAAN,CAAaxkB,CAAC,EAAd,CAArB,CAAP;AAEAslB,UAAI,GAAIG,IAAI,IAAI,CAAT,GAAeC,IAAI,IAAI,CAA9B;AACAH,UAAI,GAAI,CAACG,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAArC;AACAH,UAAI,GAAI,CAACG,IAAI,GAAG,CAAR,KAAc,CAAf,GAAoBC,IAA3B;AAEApf,YAAM,GAAGA,MAAM,GAAGpG,MAAM,CAACC,YAAP,CAAoBilB,IAApB,CAAlB;AAEA,UAAIK,IAAI,IAAI,EAAZ,EACInf,MAAM,GAAGA,MAAM,GAAGpG,MAAM,CAACC,YAAP,CAAoBklB,IAApB,CAAlB;AAEJ,UAAIK,IAAI,IAAI,EAAZ,EACIpf,MAAM,GAAGA,MAAM,GAAGpG,MAAM,CAACC,YAAP,CAAoBmlB,IAApB,CAAlB;AACP;;AAED,WAAO,KAAI,CAACU,cAAL,CAAoB1f,MAApB,CAAP;AACH,GAjCD;;AAmCA,OAAK0f,cAAL,GAAsB,UAAAC,OAAO,EAAI;AAC7B,QAAMC,SAAS,GAAG,IAAIxY,KAAJ,CAAUuY,OAAO,CAAC3qB,MAAlB,CAAlB;AAEA,QAAIwE,CAAC,GAAG,CAAR;AACA,QAAImlB,CAAC,GAAG,CAAR;;AAEA,WAAOnlB,CAAC,GAAGmmB,OAAO,CAAC3qB,MAAnB,EAA2B;AACvB2pB,OAAC,GAAGgB,OAAO,CAACN,UAAR,CAAmB7lB,CAAnB,CAAJ;AACAomB,eAAS,CAACpmB,CAAD,CAAT,GAAemlB,CAAf;AACAnlB,OAAC;AACJ;;AAED,WAAOomB,SAAP;AACH,GAbD;;AAeA,OAAKC,YAAL,GAAoB,UAAAvnB,MAAM,EAAI;AAC1BA,UAAM,GAAGA,MAAM,CAACP,OAAP,CAAe,OAAf,EAAwB,IAAxB,CAAT;AACA,QAAI4nB,OAAO,GAAG,EAAd;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxnB,MAAM,CAACtD,MAA3B,EAAmC8qB,CAAC,EAApC,EAAwC;AACpC,UAAMnB,CAAC,GAAGrmB,MAAM,CAAC+mB,UAAP,CAAkBS,CAAlB,CAAV;;AAEA,UAAInB,CAAC,GAAG,GAAR,EAAa;AACTgB,eAAO,IAAI/lB,MAAM,CAACC,YAAP,CAAoB8kB,CAApB,CAAX;AACH,OAFD,MAEO,IAAKA,CAAC,GAAG,GAAL,IAAcA,CAAC,GAAG,IAAtB,EAA6B;AAChCgB,eAAO,IAAI/lB,MAAM,CAACC,YAAP,CAAqB8kB,CAAC,IAAI,CAAN,GAAW,GAA/B,CAAX;AACAgB,eAAO,IAAI/lB,MAAM,CAACC,YAAP,CAAqB8kB,CAAC,GAAG,EAAL,GAAW,GAA/B,CAAX;AACH,OAHM,MAGA;AACHgB,eAAO,IAAI/lB,MAAM,CAACC,YAAP,CAAqB8kB,CAAC,IAAI,EAAN,GAAY,GAAhC,CAAX;AACAgB,eAAO,IAAI/lB,MAAM,CAACC,YAAP,CAAsB8kB,CAAC,IAAI,CAAN,GAAW,EAAZ,GAAkB,GAAtC,CAAX;AACAgB,eAAO,IAAI/lB,MAAM,CAACC,YAAP,CAAqB8kB,CAAC,GAAG,EAAL,GAAW,GAA/B,CAAX;AACH;AACJ;;AAED,WAAOgB,OAAP;AACH,GApBD;;AAsBA,OAAKH,YAAL,GAAoB,UAAAG,OAAO,EAAI;AAC3B,QAAIrnB,MAAM,GAAG,EAAb;AACA,QAAIkB,CAAC,GAAG,CAAR;AACA,QAAImlB,CAAC,GAAG,CAAR;AACA,QAAIoB,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;;AAEA,WAAOxmB,CAAC,GAAGmmB,OAAO,CAAC3qB,MAAnB,EAA2B;AACvB2pB,OAAC,GAAGgB,OAAO,CAACN,UAAR,CAAmB7lB,CAAnB,CAAJ;;AAEA,UAAImlB,CAAC,GAAG,GAAR,EAAa;AACTrmB,cAAM,IAAIsB,MAAM,CAACC,YAAP,CAAoB8kB,CAApB,CAAV;AACAnlB,SAAC;AACJ,OAHD,MAGO,IAAKmlB,CAAC,GAAG,GAAL,IAAcA,CAAC,GAAG,GAAtB,EAA4B;AAC/BoB,UAAE,GAAGJ,OAAO,CAACN,UAAR,CAAmB7lB,CAAC,GAAG,CAAvB,CAAL;AACAlB,cAAM,IAAIsB,MAAM,CAACC,YAAP,CAAqB,CAAC8kB,CAAC,GAAG,EAAL,KAAY,CAAb,GAAmBoB,EAAE,GAAG,EAA5C,CAAV;AACAvmB,SAAC,IAAI,CAAL;AACH,OAJM,MAIA;AACHumB,UAAE,GAAGJ,OAAO,CAACN,UAAR,CAAmB7lB,CAAC,GAAG,CAAvB,CAAL;AACAwmB,UAAE,GAAGL,OAAO,CAACN,UAAR,CAAmB7lB,CAAC,GAAG,CAAvB,CAAL;AAEAlB,cAAM,IAAIsB,MAAM,CAACC,YAAP,CAAqB,CAAC8kB,CAAC,GAAG,EAAL,KAAY,EAAb,GAAoB,CAACoB,EAAE,GAAG,EAAN,KAAa,CAAjC,GAAuCC,EAAE,GAAG,EAAhE,CAAV;AAEAxmB,SAAC,IAAI,CAAL;AACH;AACJ;;AAED,WAAOlB,MAAP;AACH,GA5BD;AA6BH,C;;;;;;;;;;;;;;;;;;;;;;;AC/MD;AAEO,SAAS2nB,WAAT,CAAqBC,KAArB,EAA2B;AAC9B,MAAI,OAAOA,KAAP,KAAgB,QAApB,EACI,MAAM,IAAI9qB,KAAJ,CAAU,wBAAV,CAAN;AAEJ,MAAI8qB,KAAI,GAAG,CAAP,IAAYA,KAAI,GAAG,GAAvB,EACI,MAAM,IAAI9qB,KAAJ,CAAU,sBAAV,CAAN;AAEJ,MAAM+qB,UAAU,GAAG,kBAAnB;AAEA,MAAI5mB,GAAG,GAAG,EAAV;AACAA,KAAG,IAAI4mB,UAAU,CAACnC,MAAX,CAAkBkC,KAAI,IAAI,CAA1B,CAAP;AACA3mB,KAAG,IAAI4mB,UAAU,CAACnC,MAAX,CAAkBkC,KAAI,GAAG,IAAzB,CAAP;AAEA,SAAO3mB,GAAP;AACH;AAEM,SAAS6mB,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EACI,OAAOA,GAAP;AAEJ,MAAI9mB,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6mB,GAAG,CAACrrB,MAAxB,EAAgCwE,CAAC,EAAjC,EAAqC;AACjC,QAAM8mB,GAAG,GAAGD,GAAG,CAAC7mB,CAAD,CAAH,CAAOb,QAAP,CAAgB,CAAhB,CAAZ;AACA,QAAMkV,CAAC,GAAGyS,GAAG,CAAC1S,KAAJ,CAAU,WAAV,CAAV;;AAEA,QAAIC,CAAC,IAAIyS,GAAG,CAACtrB,MAAJ,KAAe,CAAxB,EAA2B;AACvB,UAAMurB,WAAW,GAAG1S,CAAC,CAAC,CAAD,CAAD,CAAK7Y,MAAzB;AACA,UAAIwrB,KAAK,GAAGH,GAAG,CAAC7mB,CAAD,CAAH,CAAOb,QAAP,CAAgB,CAAhB,EAAmBwD,KAAnB,CAAyB,IAAIokB,WAA7B,CAAZ;;AAEA,WAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,WAAtB,EAAmCE,EAAE,EAArC;AACID,aAAK,IAAIH,GAAG,CAACI,EAAE,GAAGjnB,CAAN,CAAH,CAAYb,QAAZ,CAAqB,CAArB,EAAwBwD,KAAxB,CAA8B,CAA9B,CAAT;AADJ;;AAGA5C,SAAG,IAAIK,MAAM,CAACC,YAAP,CAAoBH,QAAQ,CAAC8mB,KAAD,EAAQ,CAAR,CAA5B,CAAP;AACAhnB,OAAC,IAAI+mB,WAAW,GAAG,CAAnB;AACH,KATD,MASO;AACHhnB,SAAG,IAAIK,MAAM,CAACC,YAAP,CAAoBwmB,GAAG,CAAC7mB,CAAD,CAAvB,CAAP;AACH;AACJ;;AAED,SAAOD,GAAP;AACH;AAEM,SAASmnB,WAAT,CAAqB5sB,GAArB,EAA0B;AAC7B,MAAMusB,GAAG,GAAGvsB,GAAG,CAACiE,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,EAAuBhD,KAAvB,CAA6B,EAA7B,CAAZ;AACA,MAAI4rB,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAInnB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6mB,GAAG,CAACrrB,MAAJ,GAAa,CAAjC,EAAoCwE,CAAC,EAArC,EAAyC;AACrC,QAAIonB,GAAG,eAAQP,GAAG,CAAC7mB,CAAC,GAAG,CAAL,CAAX,SAAqB6mB,GAAG,CAAC7mB,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAxB,CAAP;AACAmnB,OAAG,IAAI/mB,MAAM,CAACC,YAAP,CAAoB+mB,GAApB,CAAP;AACH;;AAED,SAAOD,GAAP;AACH;AAEM,SAASzoB,gBAAT,CAA0B0nB,SAA1B,EAAqC;AACxC,MAAIrmB,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAIomB,SAAS,CAAC5qB,MAA/B,EAAwCwE,CAAC,EAAzC;AACID,OAAG,IAAI0mB,WAAW,CAACL,SAAS,CAACpmB,CAAD,CAAV,CAAlB;AADJ;;AAGA,SAAOD,GAAP;AACH;AAEM,SAASsnB,sBAAT,CAAgCC,QAAhC,EAA0C;AAC7C,SAAO,IAAIlC,8CAAJ,GAAaa,iBAAb,CAA+BqB,QAA/B,CAAP;AACH;AAEM,SAASC,oBAAT,CAA8BrC,KAA9B,EAAqC;AACxC,MAAM/iB,CAAC,GAAG,IAAIijB,8CAAJ,EAAV;AACA,MAAMkC,QAAQ,GAAGnlB,CAAC,CAAC2jB,gBAAF,CAAmBZ,KAAnB,CAAjB;AAEA,SAAOoC,QAAP;AACH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3ED;AASO,SAASE,UAAT,CAAoBC,KAApB,EAA2B;AAC9B;AACA,SAAOb,4DAAa,CAACa,KAAD,CAApB;AACH;AAEM,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqChpB,MAArC,EAA6C;AAChD,MAAI+oB,MAAM,CAACnsB,MAAP,IAAiBosB,MAAM,CAACpsB,MAA5B,EACI,OAAO,KAAP;AAEJ,MAAIwE,CAAJ;;AAEA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG2nB,MAAM,CAACnsB,MAAvB,EAA+BwE,CAAC,EAAhC,EAAoC;AAChC,QAAIpB,MAAJ,EAAY;AACR,UAAI+oB,MAAM,CAAC3nB,CAAD,CAAN,IAAa4nB,MAAM,CAAC5nB,CAAD,CAAvB,EACI,OAAO,KAAP;AACP,KAHD,MAGO,IAAIN,IAAI,CAACC,SAAL,CAAegoB,MAAM,CAAC3nB,CAAD,CAArB,KAA6BN,IAAI,CAACC,SAAL,CAAeioB,MAAM,CAAC5nB,CAAD,CAArB,CAAjC,EACH,OAAO,KAAP;AACP;;AAED,SAAO,IAAP;AACH;AAEM,SAAS6nB,aAAT,CAAuB9nB,GAAvB,EAA4B;AAE/B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EACI,MAAM,IAAInE,KAAJ,CAAU,mCAAV,CAAN;AAEJ,MAAMspB,KAAK,GAAG,IAAItX,KAAJ,EAAd;AACA,MAAI7F,GAAJ;AACA,MAAIod,CAAJ;AAEApd,KAAG,GAAGhI,GAAG,CAACvE,MAAV;;AAEA,OAAK,IAAIwE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+H,GAApB,EAAyB/H,CAAC,EAA1B,EAA8B;AAC1BmlB,KAAC,GAAGplB,GAAG,CAAC8lB,UAAJ,CAAe7lB,CAAf,CAAJ;;AAEA,QAAImlB,CAAC,IAAI,QAAL,IAAiBA,CAAC,IAAI,QAA1B,EAAoC;AAChCD,WAAK,CAAC/gB,IAAN,CAAaghB,CAAC,IAAI,EAAN,GAAY,IAAb,GAAqB,IAAhC;AACAD,WAAK,CAAC/gB,IAAN,CAAaghB,CAAC,IAAI,EAAN,GAAY,IAAb,GAAqB,IAAhC;AACAD,WAAK,CAAC/gB,IAAN,CAAaghB,CAAC,IAAI,CAAN,GAAW,IAAZ,GAAoB,IAA/B;AACAD,WAAK,CAAC/gB,IAAN,CAAYghB,CAAC,GAAG,IAAL,GAAa,IAAxB;AACH,KALD,MAKO,IAAIA,CAAC,IAAI,QAAL,IAAiBA,CAAC,IAAI,QAA1B,EAAoC;AACvCD,WAAK,CAAC/gB,IAAN,CAAaghB,CAAC,IAAI,EAAN,GAAY,IAAb,GAAqB,IAAhC;AACAD,WAAK,CAAC/gB,IAAN,CAAaghB,CAAC,IAAI,CAAN,GAAW,IAAZ,GAAoB,IAA/B;AACAD,WAAK,CAAC/gB,IAAN,CAAYghB,CAAC,GAAG,IAAL,GAAa,IAAxB;AACH,KAJM,MAIA,IAAIA,CAAC,IAAI,QAAL,IAAiBA,CAAC,IAAI,QAA1B,EAAoC;AACvCD,WAAK,CAAC/gB,IAAN,CAAaghB,CAAC,IAAI,CAAN,GAAW,IAAZ,GAAoB,IAA/B;AACAD,WAAK,CAAC/gB,IAAN,CAAYghB,CAAC,GAAG,IAAL,GAAa,IAAxB;AACH,KAHM,MAGAD,KAAK,CAAC/gB,IAAN,CAAWghB,CAAC,GAAG,IAAf;AACV;;AAED,SAAOD,KAAP;AACH;AAED;AAEO,SAAS4C,YAAT,CAAsB3C,CAAtB,EAAyB;AAC5B,MAAI4C,CAAJ;AAEA,MAAI5C,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAArB,EACI4C,CAAC,GAAG5C,CAAC,CAACU,UAAF,CAAa,CAAb,IAAkB,IAAIA,UAAJ,CAAe,CAAf,CAAlB,GAAsC,EAA1C,CADJ,KAEK,IAAIV,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAArB,EACD4C,CAAC,GAAG5C,CAAC,CAACU,UAAF,CAAa,CAAb,IAAkB,IAAIA,UAAJ,CAAe,CAAf,CAAlB,GAAsC,EAA1C,CADC,KAEA,IAAIV,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAArB,EACD4C,CAAC,GAAG5C,CAAC,CAACU,UAAF,CAAa,CAAb,IAAkB,IAAIA,UAAJ,CAAe,CAAf,CAAtB;AAEJ,MAAI,OAAOkC,CAAP,KAAa,QAAjB,EACI,OAAOA,CAAP,CADJ,KAGI,MAAM,IAAInsB,KAAJ,CAAU,6CAAV,CAAN;AACP;AAEM,SAASosB,SAAT,CAAmB7C,CAAnB,EAAsB;AACzB,MAAKA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAAlB,IACCA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GADlB,IAECA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAFtB,EAE4B;AACxB,WAAO,CAAP;AACH;;AAED,SAAO,CAAP;AACH,C,CAED;;AACO,SAAS7mB,gBAAT,CAA0ByB,GAA1B,EAA+C;AAAA,MAAhBnB,MAAgB,uEAAP,KAAO;AAClD,MAAI,OAAOmB,GAAP,KAAe,QAAnB,EACI,MAAM,IAAInE,KAAJ,CAAU,mCAAV,CAAN;AAEJ,MAAImM,GAAG,GAAGhI,GAAG,CAACvE,MAAd;;AAEA,MAAIoD,MAAJ,EAAY;AACR,QAAImJ,GAAG,GAAG,CAAV,EAAa;AACThI,SAAG,cAAOA,GAAP,CAAH;AACAgI,SAAG;AACN;AACJ;;AACD,MAAMqe,SAAS,GAAGxY,KAAK,EAAvB;AACA,MAAIma,CAAC,GAAG,CAAR;AACA,MAAInD,CAAC,GAAG,CAAR;AACA,MAAIqD,CAAC,GAAG,CAAR;;AAEA,OAAK,IAAIjoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+H,GAApB,EAAyB/H,CAAC,EAA1B,EAA8B;AAC1B,QAAMmlB,CAAC,GAAGplB,GAAG,CAACykB,MAAJ,CAAWxkB,CAAX,CAAV;;AAEA,QAAIgoB,SAAS,CAAC7C,CAAD,CAAb,EAAkB;AACd4C,OAAC,KAAK,CAAN;AACAA,OAAC,IAAID,YAAY,CAAC3C,CAAD,CAAjB;AACAP,OAAC;;AAED,UAAI,MAAOA,CAAC,GAAG,CAAf,EAAmB;AACfwB,iBAAS,CAAC6B,CAAC,EAAF,CAAT,GAAiBF,CAAjB;AACAA,SAAC,GAAG,CAAJ;AACH;AACJ,KATD,MAUI,MAAM,IAAInsB,KAAJ,CAAU,+CAAV,CAAN;AACP;;AAED,SAAOwqB,SAAP;AACH,C,CAED;;AACO,SAAS8B,SAAT,CAAmBnoB,GAAnB,EAAwB;AAE3B,MAAI,CAAC,0CAA0CH,IAA1C,CAA+CG,GAA/C,CAAL,EACI,MAAM,IAAInE,KAAJ,CAAU,qCAAV,CAAN;AAEJ,MAAMusB,QAAQ,GAAGpoB,GAAG,CAACxE,KAAJ,CAAU,GAAV,CAAjB;AACA,MAAM6sB,QAAQ,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAY5sB,KAAZ,CAAkB,GAAlB,CAAjB;AACA,MAAM8sB,IAAI,GAAGnoB,QAAQ,CAACkoB,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAArB;AACA,MAAME,KAAK,GAAGpoB,QAAQ,CAACkoB,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAAR,GAA4B,CAA1C;AACA,MAAMG,GAAG,GAAGroB,QAAQ,CAACkoB,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAApB;;AAEA,MAAID,QAAQ,CAAC3sB,MAAT,GAAkB,CAAtB,EAAyB;AACrB,QAAMgtB,QAAQ,GAAGL,QAAQ,CAAC,CAAD,CAAR,CAAY5sB,KAAZ,CAAkB,GAAlB,CAAjB;AACA,QAAMktB,IAAI,GAAGvoB,QAAQ,CAACsoB,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAArB;AACA,QAAME,MAAM,GAAGxoB,QAAQ,CAACsoB,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAAvB;AACA,QAAMG,MAAM,GAAGzoB,QAAQ,CAACsoB,QAAQ,CAAC,CAAD,CAAT,EAAc,EAAd,CAAvB;AAEA,WAAO,IAAItf,IAAJ,CAASmf,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BE,IAA3B,EAAiCC,MAAjC,EAAyCC,MAAzC,CAAP;AACH;;AAED,SAAO,IAAIzf,IAAJ,CAASmf,IAAT,EAAeC,KAAf,EAAsBC,GAAtB,CAAP;AACH;AAEM,SAASK,QAAT,CAAkBzD,CAAlB,EAAqB;AACxB,MAAIA,CAAC,IAAI,GAAL,IAAYA,CAAC,IAAI,GAArB,EACI,OAAO,CAAP;AAEJ,SAAO,CAAP;AACH,C,CAED;AACA;AACA;AACA;;AACO,SAAS0D,aAAT,CAAuB9oB,GAAvB,EAA4B;AAC/B,MAAI,QAAQA,GAAZ,EACI,OAAO,CAAC,CAAR;AAEJ,MAAI,OAAQA,GAAR,IAAgB,QAApB,EACI,OAAO,CAAC,CAAR;AAEJ,MAAIA,GAAG,CAACvE,MAAJ,IAAc,CAAd,IAAmBuE,GAAG,IAAI,EAA9B,EACI,OAAO,CAAC,CAAR;AAEJ,MAAIC,CAAC,GAAG,CAAR,CAV+B,CAY/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAID,GAAG,CAACvE,MAAJ,IAAc,EAAlB,EAAsB;AAClB,WAAOwE,CAAC,GAAG,EAAX,EAAeA,CAAC,EAAhB,EAAoB;AAChB,UAAImlB,CAAC,GAAGplB,GAAG,CAACykB,MAAJ,CAAWxkB,CAAX,CAAR;AAEA,UAAI,CAACgoB,SAAS,CAAC7C,CAAD,CAAd,EACI;AACP;AACJ;;AAED,MAAInlB,CAAC,IAAI,EAAT,EACI,OAAO,CAAP,CA/B2B,CA+BjB;;AAEd,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,GAAG,CAACvE,MAApB,EAA4BwE,CAAC,EAA7B,EAAiC;AAC7B,QAAImlB,CAAC,GAAGplB,GAAG,CAACykB,MAAJ,CAAWxkB,CAAX,CAAR;AAEA,QAAI,CAAC4oB,QAAQ,CAACzD,CAAD,CAAb,EACI;AACP;;AAED,MAAInlB,CAAC,IAAID,GAAG,CAACvE,MAAb,EACI,OAAO,CAAP,CAzC2B,CAyCjB;;AAEd,OAAKwE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,GAAG,CAACvE,MAApB,EAA4BwE,CAAC,EAA7B,EAAiC;AAC7B,QAAImlB,CAAC,GAAGplB,GAAG,CAACykB,MAAJ,CAAWxkB,CAAX,CAAR;AAEA,QAAImlB,CAAC,GAAG,GAAR,EACI,OAAO,CAAP,CAJyB,CAIf;AACjB;;AAED,SAAO,CAAC,CAAR;AACH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtND;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,SAAS/mB,qBAAT,CAA+B6lB,YAA/B,EAA6C;AAChD,MAAM6E,KAAK,GAAGC,MAAM,CAAC9E,YAAD,CAApB;AACA,MAAM+E,KAAK,GAAGD,MAAM,CAACD,KAAD,CAApB;AAEA,MAAIG,QAAQ,GAAGD,KAAK,CAACrmB,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAf;AACAsmB,UAAQ,GAAGhF,YAAY,CAACzW,MAAb,CAAoByb,QAApB,CAAX;AAEA,SAAOvE,wDAAQ,CAACuE,QAAD,CAAf;AACH;AAEM,SAAStqB,mBAAT,CAA6BuqB,WAA7B,EAA0C;AAC7C,MAAI,OAAQA,WAAR,IAAwB,QAA5B,EACI,OAAO,KAAP;AAEJ,MAAIA,WAAW,CAAC1tB,MAAZ,IAAsB,CAA1B,EACI,OAAO,KAAP;AAEJ,MAAIQ,OAAO,GAAGipB,wDAAQ,CAACiE,WAAD,CAAtB;AAEA,MAAIA,WAAW,CAAC1tB,MAAZ,IAAsB,CAA1B,EACI,OAAO,KAAP;AAEJ,MAAMuM,GAAG,GAAG/L,OAAO,CAACR,MAApB;AACA,MAAMygB,MAAM,GAAGlU,GAAG,GAAG,CAArB;AACA,MAAMkhB,QAAQ,GAAGjtB,OAAO,CAAC2G,KAAR,CAAcsZ,MAAd,CAAjB;AAEAjgB,SAAO,GAAGA,OAAO,CAAC2G,KAAR,CAAc,CAAd,EAAiBsZ,MAAjB,CAAV;AAEA,MAAM6M,KAAK,GAAGC,MAAM,CAAC/sB,OAAD,CAApB;AACA,MAAMgtB,KAAK,GAAGD,MAAM,CAACD,KAAD,CAApB;AACA,MAAMK,SAAS,GAAGH,KAAK,CAACrmB,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAlB;;AAEA,MAAIsmB,QAAQ,CAAC,CAAD,CAAR,IAAeE,SAAS,CAAC,CAAD,CAAxB,IAA+BF,QAAQ,CAAC,CAAD,CAAR,IAAeE,SAAS,CAAC,CAAD,CAAvD,IAA8DF,QAAQ,CAAC,CAAD,CAAR,IAC9DE,SAAS,CAAC,CAAD,CADT,IACgBF,QAAQ,CAAC,CAAD,CAAR,IAAeE,SAAS,CAAC,CAAD,CAD5C,EAEE;AACE,WAAOntB,OAAP;AACH;;AAED,QAAM,IAAIJ,KAAJ,CAAU,0BAAV,CAAN;AACH;AAEM,SAAS0S,eAAT,CAAyBjB,WAAzB,EAAsC3I,WAAtC,EAAmD;AACtD,MAAI,OAAO2I,WAAP,KAAuB,QAA3B,EACIA,WAAW,GAAG/O,8DAAgB,CAAC+O,WAAD,CAA9B;AAEJ,MAAM9E,IAAI,GAAG7D,WAAW,CAAC6D,IAAzB;AACA,MAAMtE,SAAS,GAAG0J,SAAS,CAACrP,8DAAgB,CAACiK,IAAD,CAAjB,EAAyB8E,WAAzB,CAA3B;;AAEA,MAAIO,KAAK,CAAClD,OAAN,CAAchG,WAAW,CAACT,SAA1B,CAAJ,EAA0C;AACtC,QAAI,CAACS,WAAW,CAACT,SAAZ,CAAsBvI,QAAtB,CAA+BuI,SAA/B,CAAL,EACIS,WAAW,CAACT,SAAZ,CAAsBE,IAAtB,CAA2BF,SAA3B;AACP,GAHD,MAIIS,WAAW,CAACT,SAAZ,GAAwB,CAACA,SAAD,CAAxB;;AACJ,SAAOS,WAAP;AACH;AAEM,SAAS0kB,mBAAT,CAA6BlnB,CAA7B,EAAgC;AACnC,SAAOmnB,IAAI,CAACjpB,MAAM,CAACC,YAAP,OAAAD,MAAM,kFAAiB8B,CAAjB,EAAP,CAAX;AACH;AAEM,SAASonB,SAAT,CAAmBxwB,UAAnB,EAA+BywB,QAA/B,EAAyC;AAC5C,MAAI,OAAOzwB,UAAP,KAAsB,QAA1B,EACIA,UAAU,GAAGwF,8DAAgB,CAACxF,UAAD,CAA7B;AAEJ,MAAM0wB,SAAS,GAAGT,MAAM,CAACQ,QAAD,CAAxB;AACA,MAAMD,SAAS,GAAG3b,SAAS,CAAC6b,SAAD,EAAY1wB,UAAZ,CAA3B;AAEA,SAAOwwB,SAAP;AACH;AAEM,SAASG,gCAAT,CAA0CC,UAA1C,EAAsD;AACzD,MAAMC,WAAW,GAAGtC,oEAAsB,CAACqC,UAAD,CAA1C;AACA,MAAMhlB,WAAW,GAAGklB,KAAK,CAACC,QAAN,CAAeC,WAAf,CAA2BC,iBAA3B,CAA6CJ,WAA7C,CAApB;AACA,MAAMK,GAAG,GAAGtlB,WAAW,CAACulB,UAAZ,EAAZ;AAEA,SAAOD,GAAG,CAACE,eAAJ,EAAP;AACH;AAEM,SAASpG,SAAT,GAAqB;AACxB,MAAMqG,EAAE,GAAG,IAAIC,2CAAJ,CAAO,WAAP,CAAX;AACA,MAAM3vB,GAAG,GAAG0vB,EAAE,CAACE,UAAH,EAAZ;AACA,MAAMC,MAAM,GAAG7vB,GAAG,CAAC8vB,UAAJ,EAAf;AAEA,MAAIC,SAAS,GAAGF,MAAM,CAACnrB,QAAP,CAAgB,KAAhB,CAAhB;;AAEA,SAAOqrB,SAAS,CAAChvB,MAAV,GAAmB,EAA1B,EAA8B;AAC1BgvB,aAAS,cAAOA,SAAP,CAAT;AACH;;AAED,SAAOlsB,8DAAgB,CAACksB,SAAD,CAAvB;AACH;AAEM,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AACrC,MAAIA,QAAQ,CAAClvB,MAAT,KAAoB,EAAxB,EACIkvB,QAAQ,GAAGA,QAAQ,CAAC/nB,KAAT,CAAe,CAAf,CAAX;AAEJ,MAAMgoB,IAAI,GAAG3rB,8DAAS,CAAC0rB,QAAD,CAAT,CAAoBvrB,QAApB,GAA+BC,SAA/B,CAAyC,CAAzC,CAAb;AACA,MAAMwrB,UAAU,GAAGpsB,uDAAc,GAAGmsB,IAAI,CAACvrB,SAAL,CAAe,EAAf,CAApC;AAEA,SAAOd,8DAAgB,CAACssB,UAAD,CAAvB;AACH;AAEM,SAAS1G,oBAAT,CAA8B7W,WAA9B,EAA2C;AAC9C,MAAIqd,QAAQ,GAAG1G,mBAAmB,CAAC3W,WAAD,CAAlC;AACA,SAAOod,cAAc,CAACC,QAAD,CAArB;AACH;AAEM,SAASG,aAAT,CAAuBC,UAAvB,EAAmC;AACtC,MAAMC,WAAW,GAAG9F,wDAAQ,CAAC6F,UAAD,CAA5B;AAEA,MAAIC,WAAW,CAACvvB,MAAZ,IAAsB,CAA1B,EACI,OAAO,KAAP;AAEJ,MAAMwvB,UAAU,GAAGD,WAAW,CAACpoB,KAAZ,CAAkB,CAAlB,EAAqBooB,WAAW,CAACvvB,MAAZ,GAAqB,CAA1C,CAAnB;AACA,MAAMstB,KAAK,GAAGC,MAAM,CAACiC,UAAD,CAApB;AACA,MAAMhC,KAAK,GAAGD,MAAM,CAACD,KAAD,CAApB;;AAEA,MAAIE,KAAK,CAAC,CAAD,CAAL,KAAa+B,WAAW,CAACC,UAAU,CAACxvB,MAAZ,CAAxB,IACAwtB,KAAK,CAAC,CAAD,CAAL,KAAa+B,WAAW,CAACC,UAAU,CAACxvB,MAAX,GAAoB,CAArB,CADxB,IAEAwtB,KAAK,CAAC,CAAD,CAAL,KAAa+B,WAAW,CAACC,UAAU,CAACxvB,MAAX,GAAoB,CAArB,CAFxB,IAGAwtB,KAAK,CAAC,CAAD,CAAL,KAAa+B,WAAW,CAACC,UAAU,CAACxvB,MAAX,GAAoB,CAArB,CAH5B,EAGqD;AACjD,WAAOwvB,UAAP;AACH;;AAED,SAAO,KAAP;AACH;AAEM,SAAS9pB,cAAT,CAAwB+pB,SAAxB,EAAmC;AACtC,MAAI,OAAQA,SAAR,KAAuB,QAA3B,EACI,OAAO,KAAP;AAEJ,MAAIA,SAAS,CAACzvB,MAAV,KAAqB4oB,qDAAzB,EACI,OAAO,KAAP;AAEJ,MAAIpoB,OAAO,GAAGipB,wDAAQ,CAACgG,SAAD,CAAtB;AAEA,MAAIjvB,OAAO,CAACR,MAAR,KAAmB,EAAvB,EACI,OAAO,KAAP;AAEJ,MAAIQ,OAAO,CAAC,CAAD,CAAP,KAAeqoB,4DAAnB,EACI,OAAO,KAAP;AAEJ,MAAM4E,QAAQ,GAAGjtB,OAAO,CAAC2G,KAAR,CAAc,EAAd,CAAjB;AACA3G,SAAO,GAAGA,OAAO,CAAC2G,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAV;AAEA,MAAMmmB,KAAK,GAAGC,MAAM,CAAC/sB,OAAD,CAApB;AACA,MAAMgtB,KAAK,GAAGD,MAAM,CAACD,KAAD,CAApB;AACA,MAAMK,SAAS,GAAGH,KAAK,CAACrmB,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAlB;;AAEA,MAAIsmB,QAAQ,CAAC,CAAD,CAAR,IAAeE,SAAS,CAAC,CAAD,CAAxB,IAA+BF,QAAQ,CAAC,CAAD,CAAR,IAAeE,SAAS,CAAC,CAAD,CAAvD,IAA8DF,QAAQ,CAAC,CAAD,CAAR,IAC9DE,SAAS,CAAC,CAAD,CADT,IACgBF,QAAQ,CAAC,CAAD,CAAR,IAAeE,SAAS,CAAC,CAAD,CAD5C,EAEE;AACE,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH;AAEM,SAAS+B,2CAAT,CAAqDC,kBAArD,EAAyE;AAC5E,MAAM9d,WAAW,GAAGga,oEAAsB,CAAC8D,kBAAD,CAA1C;AACA,MAAMT,QAAQ,GAAG1G,mBAAmB,CAAC3W,WAAD,CAApC;AACA,MAAM4W,YAAY,GAAGwG,cAAc,CAACC,QAAD,CAAnC;AAEA,SAAOtsB,qBAAqB,CAAC6lB,YAAD,CAA5B;AACH;AAEM,SAASmH,sCAAT,CAAgDD,kBAAhD,EAAoE;AACvE,MAAM9d,WAAW,GAAGga,oEAAsB,CAAC8D,kBAAD,CAA1C;AACA,MAAMT,QAAQ,GAAG1G,mBAAmB,CAAC3W,WAAD,CAApC;AACA,MAAM4W,YAAY,GAAGwG,cAAc,CAACC,QAAD,CAAnC;AACA,MAAME,UAAU,GAAGlsB,+DAAgB,CAACulB,YAAD,CAAnC;AAEA,SAAO2G,UAAP;AACH;AAEM,SAASS,gCAAT,CAA0CF,kBAA1C,EAA8D;AACjE,MAAM9d,WAAW,GAAGga,oEAAsB,CAAC8D,kBAAD,CAA1C;AACA,MAAMT,QAAQ,GAAG1G,mBAAmB,CAAC3W,WAAD,CAApC;AACA,MAAM4W,YAAY,GAAGwG,cAAc,CAACC,QAAD,CAAnC;AACA,MAAMY,aAAa,GAAG/D,kEAAoB,CAACtD,YAAD,CAA1C;AAEA,SAAOqH,aAAP;AACH;AAEM,SAAStH,mBAAT,CAA6B3W,WAA7B,EAA0C;AAC7C,MAAM8c,EAAE,GAAG,IAAIC,2CAAJ,CAAO,WAAP,CAAX;AACA,MAAM3vB,GAAG,GAAG0vB,EAAE,CAACoB,cAAH,CAAkBle,WAAlB,EAA+B,OAA/B,CAAZ;AACA,MAAMme,MAAM,GAAG/wB,GAAG,CAACgxB,SAAJ,EAAf;AACA,MAAMC,CAAC,GAAGF,MAAM,CAACE,CAAjB;AACA,MAAMC,CAAC,GAAGH,MAAM,CAACG,CAAjB;AAEA,MAAIC,IAAI,GAAGF,CAAC,CAACvsB,QAAF,CAAW,KAAX,CAAX;;AAEA,SAAOysB,IAAI,CAACpwB,MAAL,GAAc,EAArB,EAAyB;AACrBowB,QAAI,cAAOA,IAAP,CAAJ;AACH;;AAED,MAAIC,IAAI,GAAGF,CAAC,CAACxsB,QAAF,CAAW,KAAX,CAAX;;AAEA,SAAO0sB,IAAI,CAACrwB,MAAL,GAAc,EAArB,EAAyB;AACrBqwB,QAAI,cAAOA,IAAP,CAAJ;AACH;;AAED,MAAMC,SAAS,eAAQF,IAAR,SAAeC,IAAf,CAAf;AACA,MAAME,WAAW,GAAGztB,8DAAgB,CAACwtB,SAAD,CAApC;AAEA,SAAOC,WAAP;AACH;AAEM,SAASpe,SAAT,CAAmB6b,SAAnB,EAA8Bnc,WAA9B,EAA2C;AAC9C,MAAM8c,EAAE,GAAG,IAAIC,2CAAJ,CAAO,WAAP,CAAX;AACA,MAAM3vB,GAAG,GAAG0vB,EAAE,CAACoB,cAAH,CAAkBle,WAAlB,EAA+B,OAA/B,CAAZ;AACA,MAAMpJ,SAAS,GAAGxJ,GAAG,CAACkK,IAAJ,CAAS6kB,SAAT,CAAlB;AACA,MAAM9I,CAAC,GAAGzc,SAAS,CAACyc,CAApB;AACA,MAAMC,CAAC,GAAG1c,SAAS,CAAC0c,CAApB;AACA,MAAM1Q,EAAE,GAAGhM,SAAS,CAACwc,aAArB;AAEA,MAAIuL,IAAI,GAAGtL,CAAC,CAACvhB,QAAF,CAAW,KAAX,CAAX;;AAEA,SAAO6sB,IAAI,CAACxwB,MAAL,GAAc,EAArB,EAAyB;AACrBwwB,QAAI,cAAOA,IAAP,CAAJ;AACH;;AAED,MAAIC,IAAI,GAAGtL,CAAC,CAACxhB,QAAF,CAAW,KAAX,CAAX;;AAEA,SAAO8sB,IAAI,CAACzwB,MAAL,GAAc,EAArB,EAAyB;AACrBywB,QAAI,cAAOA,IAAP,CAAJ;AACH;;AAED,MAAMC,KAAK,GAAGzF,0DAAW,CAACxW,EAAD,CAAzB;AACA,MAAMkc,OAAO,GAAGH,IAAI,GAAGC,IAAP,GAAcC,KAA9B;AAEA,SAAOC,OAAP;AACH;AAEM,SAASpD,MAAT,CAAgBqD,QAAhB,EAA0B;AAC7B,MAAMC,MAAM,GAAG3tB,+DAAgB,CAAC0tB,QAAD,CAA/B;AACA,MAAME,OAAO,GAAG5e,2DAAM,CAAC,OAAO2e,MAAR,CAAN,CAAsB9tB,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,CAAhB;AACA,SAAOD,8DAAgB,CAACguB,OAAD,CAAvB;AACH;AAEM,SAASC,iBAAT,CAA2B1gB,QAA3B,EAAqC;AACxC,MAAM2gB,eAAe,GAAGnF,oEAAsB,CAACxb,QAAD,CAA9C;AACA,MAAM4gB,gBAAgB,GAAGvI,oBAAoB,CAACsI,eAAD,CAA7C;AAEA,SAAOpuB,qBAAqB,CAACquB,gBAAD,CAA5B;AACH;AAEM,SAAS5tB,WAAT,CAAqB/F,UAArB,EAAiD;AAAA,MAAhB8F,MAAgB,uEAAP,KAAO;AACpD,MAAM4tB,eAAe,GAAGluB,8DAAgB,CAACxF,UAAD,EAAa8F,MAAb,CAAxC;AACA,MAAM6tB,gBAAgB,GAAGvI,oBAAoB,CAACsI,eAAD,CAA7C;AAEA,SAAOpuB,qBAAqB,CAACquB,gBAAD,CAA5B;AACH,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrQD;AAEA,IAAMztB,SAAS,GAAG7F,4CAAK,CAAC6F,SAAxB;AACA,IAAM0O,MAAM,GAAGvU,4CAAK,CAACuU,MAArB;AACA,IAAM2S,WAAW,GAAGlnB,4CAAK,CAACknB,WAA1B;AACA,IAAMqM,YAAY,GAAGvzB,4CAAK,CAACuzB,YAA3B;AACA,IAAMlM,cAAc,GAAGrnB,4CAAK,CAACqnB,cAA7B;AACA,IAAMQ,UAAU,GAAG7nB,4CAAK,CAAC6nB,UAAzB;AACA,IAAM9M,QAAQ,GAAG/a,4CAAK,CAAC+a,QAAvB;AACA,IAAMjO,SAAS,GAAG9M,4CAAK,CAAC8M,SAAxB;AACA,IAAMG,WAAW,GAAGjN,4CAAK,CAACiN,WAA1B;AACA,IAAMumB,QAAQ,GAAGxzB,4CAAK,CAACwzB,QAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,IAAMxzB,KAAK,GAAG;AACV4S,YADU,sBACCS,GADD,EACM;AACZ,QAAI,OAAOA,GAAP,KAAe,QAAnB,EACI,OAAO,KAAP;AACJ,WAAOS,iDAAS,CAAC2f,KAAV,CAAgBpgB,GAAG,CAACrN,QAAJ,EAAhB,EAAgC;AACnC0tB,eAAS,EAAE,CAAC,MAAD,EAAS,OAAT,CADwB;AAEnCC,iBAAW,EAAE;AAFsB,KAAhC,CAAP;AAIH,GARS;AAUV7gB,UAVU,oBAUDoW,GAVC,EAUI;AACV,WAAOA,GAAG,KAAK3lB,MAAM,CAAC2lB,GAAD,CAAd,IAAuB3lB,MAAM,CAACqlB,SAAP,CAAiB5iB,QAAjB,CAA0BiI,IAA1B,CAA+Bib,GAA/B,MAAwC,gBAAtE;AACH,GAZS;AAcV3X,SAdU,mBAcF+c,KAdE,EAcK;AACX,WAAO7Z,KAAK,CAAClD,OAAN,CAAc+c,KAAd,CAAP;AACH,GAhBS;AAkBVsF,QAlBU,kBAkBHjuB,MAlBG,EAkBK;AACX,QAAI;AACA,aAAO,CAAC,CAACY,IAAI,CAAC+T,KAAL,CAAW3U,MAAX,CAAT;AACH,KAFD,CAEE,OAAOuJ,EAAP,EAAW;AACT,aAAO,KAAP;AACH;AACJ,GAxBS;AA0BV/I,WA1BU,qBA0BA0tB,IA1BA,EA0BM;AACZ,WAAO,OAAOA,IAAP,KAAgB,SAAvB;AACH,GA5BS;AA8BVxtB,aA9BU,uBA8BEmB,MA9BF,EA8BU;AAChB,WAAOA,MAAM,KAAKA,MAAM,YAAYzG,oDAAlB,IAAgCyG,MAAM,CAAC6K,WAAP,IAAsB7K,MAAM,CAAC6K,WAAP,CAAmBzH,IAAnB,KAA4B,WAAvF,CAAb;AACH,GAhCS;AAkCV3K,UAlCU,oBAkCD0F,MAlCC,EAkCO;AACb,WAAO,OAAOA,MAAP,KAAkB,QAAlB,IAA+BA,MAAM,IAAIA,MAAM,CAAC0M,WAAjB,IAAgC1M,MAAM,CAAC0M,WAAP,CAAmBzH,IAAnB,KAA4B,QAAlG;AACH,GApCS;AAsCVpG,YAtCU,sBAsCC0kB,GAtCD,EAsCM;AACZ,WAAO,OAAOA,GAAP,KAAe,UAAtB;AACH,GAxCS;AA0CVnkB,OA1CU,iBA0CJY,MA1CI,EA0CI;AACV,WAAQ,OAAOA,MAAP,KAAkB,QAAlB,IACD,CAACkN,KAAK,CAAC9L,QAAQ,CAACpB,MAAD,EAAS,EAAT,CAAT,CADL,IAED,sBAAsBc,IAAtB,CAA2Bd,MAA3B,CAFP;AAGH,GA9CS;AAgDVnD,WAhDU,qBAgDAgF,MAhDA,EAgDQ;AACd,QAAIA,MAAM,KAAK,IAAf,EACI,OAAO,KAAP;AACJ,WAAOsO,MAAM,CAACtT,SAAP,CACHsT,MAAM,CAACtO,MAAD,CADH,CAAP;AAGH,GAtDS;AAwDVuD,aAxDU,uBAwDEme,GAxDF,EAwDOjf,QAxDP,EAwDiB;AACvB,WAAO1G,MAAM,CAACqlB,SAAP,CAAiB1e,cAAjB,CAAgC+D,IAAhC,CAAqCib,GAArC,EAA0Cjf,QAA1C,CAAP;AACH,GA1DS;AA4DVmJ,eA5DU,yBA4DI8V,GA5DJ,EA4DwB;AAAA;;AAAA,sCAAZ4K,UAAY;AAAZA,gBAAY;AAAA;;AAC9B,WAAOA,UAAU,CAACzxB,MAAX,IAAqB,CAACyxB,UAAU,CAACplB,GAAX,CAAe,UAAAzE,QAAQ,EAAI;AACpD,aAAO,KAAI,CAACc,WAAL,CAAiBme,GAAjB,EAAsBjf,QAAtB,CAAP;AACH,KAF4B,EAE1B1H,QAF0B,CAEjB,KAFiB,CAA7B;AAGH,GAhES;AAkEViP,UAlEU,oBAkEDpR,KAlEC,EAkEM;AACZ,QAAI6K,IAAI,GAAG;AACPhC,WAAK,EAAE7I,KAAK,CAAC2zB,YADN;AAEP1Q,eAAS,EAAEjjB,KAAK,CAAC4zB,eAFV;AAGProB,cAAQ,EAAEvL,KAAK,CAAC4L,gBAHT;AAIPpB,UAAI,EAAExK,KAAK,CAAC6zB,UAJL;AAKP1oB,iBAAW,EAAEnL,KAAK,CAAC8zB,cALZ;AAMPvtB,YAAM,EAAEvG,KAAK,CAACuG,MANP;AAOP2C,kBAAY,EAAElJ,KAAK,CAAC+zB,aAAN,KAAwB/zB,KAAK,CAACg0B,YAAN,GAAqB,UAArB,GAAkC,cAA1D;AAPP,KAAX;;AASA,QAAIh0B,KAAK,CAACg0B,YAAV,EAAwB;AACpBnpB,UAAI,CAACopB,WAAL,GAAmBj0B,KAAK,CAACg0B,YAAzB;AACH;;AACD,QAAIh0B,KAAK,CAACk0B,YAAV,EAAwB;AACpBrpB,UAAI,CAAC8F,WAAL,GAAmB3Q,KAAK,CAACk0B,YAAzB;AACH;;AACD,WAAOrpB,IAAP;AACH,GAnFS;AAqFVuF,YArFU,sBAqFCpQ,KArFD,QAqFuB;AAAA,QAANuE,GAAM,QAAd4I,MAAc;AAC7B,QAAI,CAACnN,KAAK,CAACuG,MAAX,EACI,OAAOvG,KAAP;;AAEJ,QAAI,KAAK0S,QAAL,CAAc1S,KAAK,CAACuG,MAApB,CAAJ,EAAiC;AAC7B,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,GAAG,CAACtC,MAAxB,EAAgCwE,CAAC,EAAjC,EAAqC;AACjC,YAAIqiB,GAAG,GAAGvkB,GAAG,CAACkC,CAAD,CAAb;AACA,YAAIqiB,GAAG,CAAC5e,IAAJ,IAAY,SAAZ,IAAyB4e,GAAG,CAACte,IAAJ,IAAYxK,KAAK,CAACuG,MAA/C,EACIvG,KAAK,CAACuG,MAAN,CAAauiB,GAAG,CAACte,IAAjB,IAAyBvF,6DAAc,GAAGjF,KAAK,CAACuG,MAAN,CAAauiB,GAAG,CAACte,IAAjB,EAAuB5D,MAAvB,CAA8B,CAA9B,EAAiC1B,WAAjC,EAA1C;AACP;AACJ,KAND,MAMO,IAAI,KAAKiM,OAAL,CAAanR,KAAK,CAACuG,MAAnB,CAAJ,EAAgC;AACnCvG,WAAK,CAACuG,MAAN,GAAevG,KAAK,CAACuG,MAAN,CAAa4d,MAAb,CAAoB,UAAC2E,GAAD,EAAMviB,MAAN,EAAc0C,KAAd,EAAwB;AACvD,yBAGI1E,GAAG,CAAC0E,KAAD,CAHP;AAAA,YACIuB,IADJ,cACIA,IADJ;AAAA,YAEIN,IAFJ,cAEIA,IAFJ;AAKA,YAAIA,IAAI,IAAI,SAAZ,EACI3D,MAAM,GAAGtB,6DAAc,GAAGsB,MAAM,CAACK,MAAP,CAAc,CAAd,EAAiB1B,WAAjB,EAA1B;AAEJ4jB,WAAG,CAACte,IAAD,CAAH,GAAYjE,MAAZ;AAEA,eAAOuiB,GAAP;AACH,OAZc,EAYZ,EAZY,CAAf;AAaH;;AAED,WAAO9oB,KAAP;AACH,GAhHS;AAkHVm0B,SAlHU,mBAkHFpK,KAlHE,EAkHKhjB,OAlHL,EAkHcU,MAlHd,EAkHsB;AAC5B,QAAI2sB,GAAG,GAAGrK,KAAK,CAACnkB,QAAN,EAAV;;AAEA,WAAOwuB,GAAG,CAACnyB,MAAJ,GAAawF,MAApB;AACI2sB,SAAG,GAAGrtB,OAAO,GAAGqtB,GAAhB;AADJ;;AAGA,WAAOA,GAAP;AACH,GAzHS;AA2HVlb,sBA3HU,gCA2HWpT,GA3HX,EA2HgB;AACtB,WAAOA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAtC;AACH,GA7HS;AA+HJ4F,OA/HI,mBA+HgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAd2oB,oBAAc,0EAAL,IAAK;AAAA,+CACf,IAAIpkB,OAAJ,CAAY,UAAAqkB,OAAO;AAAA,uBAAInlB,UAAU,CAACmlB,OAAD,EAAUD,MAAV,CAAd;AAAA,eAAnB,CADe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEzB;AAjIS,CAAd;AAoIe,+FACRz0B,KADP;AAEIkF,MAAI,EAAJA,kCAFJ;AAGI+C,UAAQ,EAARA,sCAHJ;AAII7G,QAAM,EAANA,oCAJJ;AAKI2qB,OAAK,EAALA,mCALJ;AAMI/mB,QAAM,EAANA,oCANJ;AAOIL,KAAG,EAAHA,iCAPJ;AAQIkI,aAAW,EAAXA,0CAAWA;AARf,I;;;;;;;;;;;AChJA,yE;;;;;;;;;;;ACAA,oE;;;;;;;;;;;ACAA,kE;;;;;;;;;;;ACAA,+D;;;;;;;;;;;ACAA,kE;;;;;;;;;;;ACAA,kE;;;;;;;;;;;ACAA,4D;;;;;;;;;;;ACAA,6E;;;;;;;;;;;ACAA,iE;;;;;;;;;;;ACAA,qE;;;;;;;;;;;ACAA,0D;;;;;;;;;;;ACAA,uD;;;;;;;;;;;ACAA,kC;;;;;;;;;;;ACAA,yC;;;;;;;;;;;ACAA,qC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,0C;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,wD;;;;;;;;;;;ACAA,sC","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport { version } from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport SideChain from 'lib/sidechain';\nimport { keccak256 } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nconst FEE_LIMIT = 150000000;\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n        // for retro-compatibility:\n        solidityNode = false, eventServer = false, sideOptions = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        let headers = false;\n        let eventHeaders = false;\n\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            sideOptions = solidityNode;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n        // for sidechain\n        if (typeof sideOptions === 'object' && (sideOptions.fullNode || sideOptions.fullHost)) {\n            this.sidechain = new SideChain(sideOptions, TronWeb, this, privateKey);\n        } else {\n            privateKey = privateKey || sideOptions;\n        }\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n        this.injectPromise = injectpromise(this);\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    setHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader (headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey, strict = false) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey, strict);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if ((!isFinite(val)) || /^\\s*$/.test(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys ? contract.abi.entrys : [] : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport {encodeParamsV2ByABI, decodeParamsV2ByABI} from 'utils/abi';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    abi.stateMutability = abi.stateMutability ? abi.stateMutability.toLowerCase() : 'nonpayable';\n    abi.type = abi.type ? abi.type.toLowerCase() : '';\n    if(abi.type === 'fallback' || abi.type === 'receive') return '0x';\n    let iface = new utils.ethersUtils.Interface([abi]);\n    if(abi.type === 'event') {\n      return iface.getEvent(abi.name).format(utils.ethersUtils.FormatTypes.sighash);\n    }\n    return iface.getFunction(abi.name).format(utils.ethersUtils.FormatTypes.sighash)\n}\n\nconst decodeOutput = (abi, output) => {\n    return decodeParamsV2ByABI(abi, output)\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n      let rawParameter = '';\n      if(this.abi && !/event/i.test(this.abi.type)) {\n          rawParameter = encodeParamsV2ByABI(this.abi, args);\n      }\n      return {\n          call: (options = {}, callback = false) => {\n              if (utils.isFunction(options)) {\n                  callback = options;\n                  options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._call([], [], options, callback);\n          },\n          send: (options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) => {\n              if (utils.isFunction(privateKey)) {\n                  callback = privateKey;\n                  privateKey = this.tronWeb.defaultPrivateKey;\n              }\n              if (utils.isFunction(options)) {\n                callback = options;\n                options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._send([], [], options, privateKey, callback);\n          },\n          watch: (...methodArgs) => this._watch(...methodArgs)\n      }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n            _isConstant: true\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.abi, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1 && Object.keys(output).length === 1) {\n                        output = output[0];\n                    }\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.abi, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1 && Object.keys(decoded).length === 1) {\n                    decoded = decoded[0];\n                }\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener,\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.only_confirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.only_unconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import injectpromise from 'injectpromise';\nimport Validator from 'paramValidator';\n\nexport default class SideChain {\n    constructor(sideOptions, TronWeb = false, mainchain = false, privateKey = false) {\n        this.mainchain = mainchain;\n        const { fullHost, fullNode, solidityNode, eventServer, mainGatewayAddress, sideGatewayAddress, sideChainId } = sideOptions;\n        this.sidechain = new TronWeb(fullHost || fullNode, fullHost || solidityNode, fullHost || eventServer, privateKey);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(this.sidechain);\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                transaction.raw_data.contract[0].Permission_id = permissionId;\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n        // sign\n        try {\n            return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== this.sidechain.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    /**\n    * deposit asset to sidechain\n    */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch (functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\nimport {encodeParamsV2ByABI} from 'utils/abi';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type === 'constructor' && 'payable' === func.stateMutability.toLowerCase();\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        if (options.rawParameter && utils.isString(options.rawParameter)) {\n            parameters = options.rawParameter.replace(/^(0x)/, '');\n        } else if (options.funcABIV2) {\n            parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n        } else {\n            var constructorParams = abi.find(\n                (it) => {\n                    return it.type === 'constructor';\n                }\n            );\n\n            if (typeof constructorParams !== 'undefined' && constructorParams) {\n                const abiCoder = new AbiCoder();\n                const types = [];\n                const values = [];\n                constructorParams = constructorParams.inputs;\n\n                if (parameters.length != constructorParams.length)\n                    return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let type = constructorParams[i].type;\n                    let value = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n                    else if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n        }\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: this.tronWeb.feeLimit\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress)\n        };\n\n\n        if (functionSelector && utils.isString(functionSelector)) {\n            functionSelector = functionSelector.replace('/\\s*/g', '');\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let {type, value} = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map(type => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256')\n                        }\n                        return type\n                    })\n\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n\n            // work for abiv2 if passed the function abi in options\n            if (options.funcABIV2) {\n                parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n            }\n\n            if (options.shieldedParameter && utils.isString(options.shieldedParameter)) {\n                parameters = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            if (options.rawParameter && utils.isString(options.rawParameter)) {\n                parameters = options.rawParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameters;\n        }\n\n        args.call_value = parseInt(callValue)\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        if (!options._isConstant) {\n            args.fee_limit = parseInt(feeLimit)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision < 0 || precision > 6))\n            return callback('precision must be a positive integer >= 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (!(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value ={\n            toHexString: function() {\n                return '0x' + privateKey\n            },\n            value: privateKey\n        }\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransactions(signedTransactions = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransactions, signedTransactions, options);\n\n        if (!utils.isObject(signedTransactions))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        this.tronWeb.fullNode.request(\n            'wallet/sendseatxs',\n            signedTransactions,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transactions = signedTransactions.transactions;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendHexTransaction(signedHexTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendHexTransaction, signedHexTransaction, options);\n\n        if (!utils.isHex(signedHexTransaction))\n            return callback('Invalid hex transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        const params = {\n            transaction: signedHexTransaction\n        }\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasthex',\n             params,\n            'post'\n        ).then(result => {\n            if (result.result) {\n                result.transaction = JSON.parse(result.transaction)\n                result.hexTransaction = signedHexTransaction;\n            }\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    broadcastHex(...args) {\n        return this.sendHexTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nfunction _isArray(_array) {\n    return Array.isArray(_array);\n}\n\nfunction _addressToHex(value) {\n    return TronWeb.address.toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n}\n\nfunction deepCopy(target) {\n    if (\n        Object.prototype.toString.call(target) !== '[object Object]' &&\n        Object.prototype.toString.call(target) !== '[object Array]'\n    ) {\n        return target;\n    }\n    const newTarget = _isArray(target) ? [] : {};\n\n    Object.keys(target).forEach(key =>\n        newTarget[key] = target[key] instanceof Object && !target[key]._isBigNumber ? deepCopy(target[key]) : target[key]\n    );\n\n    return newTarget;\n}\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n\nfunction extractSize (type) {\n  const size = type.match(/([a-zA-Z0-9])(\\[.*\\])/);\n  return size ? size[2] : '';\n}\n\nfunction extractArrayDim (type) {\n  const size = extractSize(type)\n  return (size.match(/\\]\\[/g) || []).length + 1;\n}\n\nexport function encodeParamsV2ByABI(funABI, args) {\n    const types = [];\n\n    const buildFullTypeDefinition = (typeDef) => {\n      if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n        const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeDefinition(innerType) });\n        return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}`;\n      }\n\n      if (/trcToken/.test(typeDef.type))\n        return typeDef.type.replace(/trcToken/, 'uint256');\n\n      return typeDef.type;\n    }\n\n    const convertTypes = (types) => {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (/trcToken/.test(type))\n          types[i] = type.replace(/trcToken/, 'uint256');\n      }\n    }\n\n    const convertAddresses = addrArr => {\n      if (Array.isArray(addrArr)) {\n        addrArr.forEach((addrs, i) => {\n          addrArr[i] = convertAddresses(addrs);\n        });\n        return addrArr;\n      } else {\n        return _addressToHex(addrArr)\n      }\n    };\n\n    const mapTuple = (components, args, dimension) => {\n      if (dimension > 1) {\n        if (args.length) {\n          args.forEach(arg => {\n            mapTuple(components, arg, dimension - 1);\n          });\n        }\n      } else {\n        if (args.length && dimension) {\n          args.forEach(arg => {\n            encodeArgs(components, arg);\n          });\n        }\n      }\n    };\n\n    const encodeArgs = (inputs = [], args) => {\n      if (inputs.length)\n        inputs.forEach((input, i) => {\n          const type = input.type;\n\n          if (args[i])\n            if (type === 'address') args[i] = _addressToHex(args[i]);\n            else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n              convertAddresses(args[i])\n            else if (type.indexOf('tuple') === 0)\n              if (extractSize(type)) {\n                const dimension = extractArrayDim(type);\n                mapTuple(input.components, args[i], dimension);\n              } else encodeArgs(input.components, args[i]);\n        });\n    };\n\n    if (funABI.inputs && funABI.inputs.length) {\n      for (let i = 0; i < funABI.inputs.length; i++) {\n        const type = funABI.inputs[i].type;\n        // \"false\" will be converting to `false` and \"true\" will be working\n        // fine as abiCoder assume anything in quotes as `true`\n        if (type === 'bool' && args[i] === 'false') {\n          args[i] = false;\n        }\n        types.push(type.indexOf('tuple') === 0 ? buildFullTypeDefinition(funABI.inputs[i]) : type);\n        if (args.length < types.length) {\n          args.push('');\n        }\n      }\n    }\n\n    encodeArgs(funABI.inputs, args);\n    convertTypes(types);\n\n    return abiCoder.encode(types, args);\n}\n\nexport function decodeParamsV2ByABI(funABI, data) {\n  const convertTypeNames = (types) => {\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i]\n      if (/^trcToken/.test(type))\n        types[i] = type.replace(/^trcToken/, 'uint256')\n    }\n  }\n\n  const convertAddresses = addrArr => {\n    if (Array.isArray(addrArr)) {\n      addrArr.forEach((addrs, i) => {\n        addrArr[i] = convertAddresses(addrs);\n      });\n      return addrArr;\n    } else {\n      return TronWeb.address.toHex(addrArr)\n    }\n  };\n\n  const mapTuple = (components, args, dimension) => {\n    if (dimension > 1) {\n      if (args.length) {\n        args.forEach(arg => {\n          mapTuple(components, arg, dimension - 1);\n        });\n      }\n    } else {\n      if (args.length && dimension) {\n        args.forEach(arg => {\n          decodeResult(components, arg);\n        });\n      }\n    }\n  };\n\n  const buildFullTypeNameDefinition = (typeDef) => {\n    const name = typeDef.name ? ` ${typeDef.name}` : '';\n    if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n      const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeNameDefinition(innerType) });\n      return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}${name}`;\n    }\n    if (/trcToken/.test(typeDef.type))\n      return typeDef.type.replace(/trcToken/, 'uint256') + name;\n\n    return typeDef.type + name;\n  }\n\n  const decodeResult = (outputs = [], result) => {\n    if (outputs.length)\n      outputs.forEach((output, i) => {\n        const {type, name} = output;\n\n        if (result[i])\n          if (type === 'address') {\n            result[i] = TronWeb.address.toHex(result[i]);\n            if(name) result[name] = TronWeb.address.toHex(result[name]);\n          }\n          else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[') {\n            convertAddresses(result[i])\n            if(name) convertAddresses(result[name])\n          }\n          else if (type.indexOf('tuple') === 0) {\n            if (extractSize(type)) {\n              const dimension = extractArrayDim(type);\n              mapTuple(output.components, result[i], dimension);\n            } else decodeResult(output.components, result[i]);\n\n            if(name) result[name] = result[i];\n          }\n      });\n  };\n\n  // Only decode if there supposed to be fields\n  if (funABI.outputs && funABI.outputs.length > 0) {\n\n      let outputTypes = [];\n      for (let i = 0; i < funABI.outputs.length; i++) {\n        const type = funABI.outputs[i].type;\n        const name = funABI.outputs[i].name ? ` ${funABI.outputs[i].name}` : '';\n        outputTypes.push(type.indexOf('tuple') === 0 ? buildFullTypeNameDefinition(funABI.outputs[i]) : type + name);\n      }\n      convertTypeNames(outputTypes);\n\n      if (!data || !data.length) data = new Uint8Array(32 * funABI.outputs.length); // ensuring the data is at least filled by 0 cause `AbiCoder` throws if there's not engouh data\n      // decode data\n      const decodeRes = abiCoder.decode(outputTypes, data);\n      const decodeResCopy = deepCopy(decodeRes);\n      decodeResult(funABI.outputs, decodeResCopy);\n\n      return decodeResCopy\n  }\n  return [];\n}","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// set strict as true: if the length of str is odd, add 0 before the str to make its length as even\nexport function hexStr2byteArray(str, strict = false) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    let len = str.length;\n\n    if (strict) {\n        if (len % 2) {\n            str = `0${str}`;\n            len++;\n        }\n    }\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < len; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey, strict = false) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey, strict);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { utils } from \"ethers\";\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst toUtf8String = utils.toUtf8String;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\nconst Interface = utils.Interface;\nconst FormatTypes = utils.FormatTypes;\nconst arrayify = utils.arrayify;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n    Interface,\n    FormatTypes,\n    arrayify\n};\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"axios\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"elliptic\");","module.exports = require(\"ethers\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"injectpromise\");","module.exports = require(\"querystring\");","module.exports = require(\"semver\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"validator\");"],"sourceRoot":""}